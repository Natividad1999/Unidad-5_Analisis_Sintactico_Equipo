Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    APOSTROFE
    ARRAY
    AS
    CATCH
    COMILLAS
    COMMENTS
    COMMENTS_C99
    CONST
    CONTINUE
    DEBUGGER
    DECLARE
    DELETE
    DOT_DOT
    EMPTY
    EXPORT
    EXTENDS
    FINALLY
    FOREACH
    GLOBAL
    HASHTAG
    IMPLEMENTS
    IMPORT
    IN
    INSTANCEOF
    LET
    MINUSEQUAL
    PLUSEQUAL
    PRINT
    PUNTO
    STATIC
    SUPER
    THIS
    THROW
    TRY
    TYPEOF
    WITH
    XOR
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> declaration_list
Rule 2     declaration_list -> declaration_list declaration
Rule 3     declaration_list -> declaration
Rule 4     declaration_list -> additive_expression
Rule 5     declaration -> var_declaration
Rule 6     declaration -> fun_declaration
Rule 7     declaration -> area fun_declaration
Rule 8     declaration -> header_declaration
Rule 9     declaration -> class_declaration
Rule 10    declaration -> echo_stmt
Rule 11    declaration -> selection_stmt
Rule 12    declaration -> iteration_stmt
Rule 13    declaration -> typeclass
Rule 14    declaration -> alert_stmt
Rule 15    declaration -> additive_expression
Rule 16    echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA
Rule 17    echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA
Rule 18    echo_stmt -> empty
Rule 19    echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA
Rule 20    echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA
Rule 21    echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA
Rule 22    alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
Rule 23    alert_stmt -> empty
Rule 24    header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
Rule 25    header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
Rule 26    class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
Rule 27    class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
Rule 28    attribute -> attribute area var_declaration
Rule 29    attribute -> area var_declaration
Rule 30    attribute -> attribute area fun_declaration
Rule 31    attribute -> area fun_declaration
Rule 32    area -> PRIVATE
Rule 33    area -> PUBLIC
Rule 34    area -> PROTECTED
Rule 35    var_declaration -> VARIABLE PUNTOYCOMA var_declaration
Rule 36    var_declaration -> VAR VARIABLE IGUAL simple_expression
Rule 37    var_declaration -> VARIABLE PUNTOYCOMA
Rule 38    var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA
Rule 39    var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration
Rule 40    var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration
Rule 41    var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA
Rule 42    var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration
Rule 43    var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA
Rule 44    var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration
Rule 45    var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA
Rule 46    var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration
Rule 47    var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt
Rule 48    var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA
Rule 49    var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA
Rule 50    fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER
Rule 51    fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt
Rule 52    params -> param_list
Rule 53    params -> empty
Rule 54    param_list -> param_list COMA param_list
Rule 55    param_list -> param
Rule 56    param -> VARIABLE
Rule 57    param -> VARIABLE CORCHETE_IZQ CORCHETE_DER PUNTOYCOMA
Rule 58    compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER
Rule 59    local_declarations -> local_declarations var_declaration
Rule 60    local_declarations -> empty
Rule 61    statement_list -> statement_list statement
Rule 62    statement_list -> empty
Rule 63    statement_list -> alert_stmt
Rule 64    statement -> expression_stmt
Rule 65    statement -> compount_stmt
Rule 66    statement -> selection_stmt
Rule 67    statement -> iteration_stmt
Rule 68    statement -> return_stmt
Rule 69    statement -> class_declaration
Rule 70    statement -> echo_stmt
Rule 71    statement -> expression
Rule 72    statement -> additive_expression
Rule 73    statement -> alert_stmt
Rule 74    expression_stmt -> expression PUNTOYCOMA
Rule 75    expression_stmt -> additive_expression
Rule 76    expression_stmt -> alert_stmt
Rule 77    selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement
Rule 78    selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection
Rule 79    selection -> ELSE statement
Rule 80    selection -> ELSEIF statement selection
Rule 81    selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement
Rule 82    selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA
Rule 83    selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA
Rule 84    iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement
Rule 85    iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement
Rule 86    iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER
Rule 87    return_stmt -> RETURN PUNTOYCOMA
Rule 88    return_stmt -> RETURN expression PUNTOYCOMA
Rule 89    expression -> VARIABLE relop NUMERO
Rule 90    expression -> simple_expression
Rule 91    expression -> VARIABLE IGUAL AMPERSANT VARIABLE
Rule 92    expression -> expression AND expression
Rule 93    expression -> expression OR expression
Rule 94    expression -> additive_expression
Rule 95    expression -> alert_stmt
Rule 96    var -> VARIABLE
Rule 97    var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER
Rule 98    simple_expression -> additive_expression relop additive_expression
Rule 99    simple_expression -> additive_expression
Rule 100   simple_expression -> alert_stmt
Rule 101   relop -> MENOR
Rule 102   relop -> MENOR_IGUAL
Rule 103   relop -> MAYOR
Rule 104   relop -> MAYOR_IGUAL
Rule 105   relop -> DESIGUAL
Rule 106   relop -> DISTINTO
Rule 107   relop -> ES_IGUAL
Rule 108   additive_expression -> additive_expression addop term
Rule 109   additive_expression -> term
Rule 110   additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA
Rule 111   additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA
Rule 112   additive_expression -> VARIABLE DECREMENTO
Rule 113   additive_expression -> VARIABLE INCREMENTO
Rule 114   addop -> SUMA
Rule 115   addop -> RESTA
Rule 116   term -> term mulop factor
Rule 117   term -> factor
Rule 118   mulop -> MULTIPLICACION
Rule 119   mulop -> DIVISION
Rule 120   factor -> PARENT_IZQ expression PARENT_DER
Rule 121   factor -> var
Rule 122   factor -> NUMERO
Rule 123   factor -> boolean
Rule 124   factor -> IDVAR PARENT_IZQ args PARENT_DER
Rule 125   args -> args_list
Rule 126   args -> empty
Rule 127   args -> VOID
Rule 128   args_list -> args_list COMA expression
Rule 129   args_list -> expression
Rule 130   boolean -> TRUE
Rule 131   boolean -> FALSE
Rule 132   typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA
Rule 133   constructor -> VARIABLE PARENT_IZQ PARENT_DER
Rule 134   constructor -> VARIABLE PARENT_IZQ args PARENT_DER
Rule 135   empty -> <empty>

Terminals, with rules where they appear

ALERT                : 22
AMPERSANT            : 46 47 48 91
AND                  : 92
APOSTROFE            : 
ARRAY                : 
AS                   : 
BREAK                : 82 83
CASE                 : 82
CATCH                : 
CLASS                : 26 27
COMA                 : 54 128
COMILLAS             : 
COMMENTS             : 
COMMENTS_C99         : 
CONST                : 
CONTINUE             : 
CORCHETE_DER         : 57 97
CORCHETE_IZQ         : 57 97
DEBUGGER             : 
DECLARE              : 
DECREMENTO           : 110 112
DEFAULT              : 83
DELETE               : 
DESIGUAL             : 105
DISTINTO             : 106
DIVISION             : 119
DO                   : 86
DOS_PUNTOS           : 82 83
DOT_DOT              : 
ECHO                 : 16 17 19 20 21
ELSE                 : 79
ELSEIF               : 80
EMPTY                : 
ES_IGUAL             : 107
EXPORT               : 
EXTENDS              : 
FALSE                : 131
FINALLY              : 
FOR                  : 84
FOREACH              : 
FUNCTION             : 50 51
GLOBAL               : 
HASHTAG              : 
IDVAR                : 17 124 132
IF                   : 77 78
IGUAL                : 36 40 41 42 43 44 45 47 49 91 132
IMPLEMENTS           : 
IMPORT               : 
IN                   : 
INCLUDE              : 25
INCREMENTO           : 111 113
INSTANCEOF           : 
LET                  : 
LLAVE_DER            : 26 27 58 86
LLAVE_IZQ            : 26 27 58 86
MAYOR                : 103
MAYOR_IGUAL          : 104
MENOR                : 101
MENOR_IGUAL          : 102
MINUSEQUAL           : 
MULTIPLICACION       : 118
NEW                  : 132
NUMERO               : 19 40 41 82 89 122
OR                   : 93
PARENT_DER           : 22 24 25 50 51 77 78 81 84 85 86 120 124 133 134
PARENT_IZQ           : 22 24 25 50 51 77 78 81 84 85 86 120 124 133 134
PLUSEQUAL            : 
PRINT                : 
PRIVATE              : 32
PROTECTED            : 34
PUBLIC               : 33
PUNTO                : 
PUNTOYCOMA           : 16 17 19 20 21 22 24 25 35 37 38 39 40 41 42 43 44 45 46 47 48 49 57 74 82 83 84 84 86 87 88 110 111 132
REQUIRE              : 24
RESTA                : 115
RETURN               : 87 88
STATIC               : 
STRING               : 16 22 24 25
SUMA                 : 114
SUPER                : 
SWITCH               : 81
THIS                 : 
THROW                : 
TIMESTIMES           : 38 39
TRUE                 : 130
TRY                  : 
TYPEOF               : 
VAR                  : 36
VARIABLE             : 26 27 35 36 37 38 39 40 41 42 43 44 44 45 45 46 47 47 48 49 50 51 56 57 89 91 91 96 97 110 111 112 113 132 133 134
VOID                 : 127
WHILE                : 85 86
WITH                 : 
XOR                  : 
YIELD                : 
error                : 

Nonterminals, with rules where they appear

additive_expression  : 4 15 72 75 84 94 98 98 99 108
addop                : 108
alert_stmt           : 14 63 73 76 95 100
area                 : 7 26 28 29 30 31
args                 : 124 134
args_list            : 125 128
attribute            : 26 27 28 30
boolean              : 20 42 43 123
class_declaration    : 9 69
compount_stmt        : 51 65
constructor          : 132
declaration          : 2 3
declaration_list     : 1 2
echo_stmt            : 10 16 17 19 20 21 58 58 58 70
empty                : 18 23 53 60 62 126
expression           : 71 74 77 78 84 85 86 88 92 92 93 93 97 120 128 129
expression_stmt      : 64
factor               : 116 117
fun_declaration      : 6 7 21 30 31
header_declaration   : 8
iteration_stmt       : 12 67
local_declarations   : 58 59
mulop                : 116
param                : 55
param_list           : 52 54 54
params               : 50 51
program              : 0
relop                : 89 98
return_stmt          : 68
selection            : 78 80
selection_stmt       : 11 47 66
simple_expression    : 36 49 90
statement            : 61 77 78 79 80 81 82 83 84 85 86
statement_list       : 58 61
term                 : 108 109 116
typeclass            : 13
var                  : 81 121
var_declaration      : 5 28 29 35 39 40 42 44 46 59 84

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declaration_list
    (2) declaration_list -> . declaration_list declaration
    (3) declaration_list -> . declaration
    (4) declaration_list -> . additive_expression
    (5) declaration -> . var_declaration
    (6) declaration -> . fun_declaration
    (7) declaration -> . area fun_declaration
    (8) declaration -> . header_declaration
    (9) declaration -> . class_declaration
    (10) declaration -> . echo_stmt
    (11) declaration -> . selection_stmt
    (12) declaration -> . iteration_stmt
    (13) declaration -> . typeclass
    (14) declaration -> . alert_stmt
    (15) declaration -> . additive_expression
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (35) var_declaration -> . VARIABLE PUNTOYCOMA var_declaration
    (36) var_declaration -> . VAR VARIABLE IGUAL simple_expression
    (37) var_declaration -> . VARIABLE PUNTOYCOMA
    (38) var_declaration -> . TIMESTIMES VARIABLE PUNTOYCOMA
    (39) var_declaration -> . TIMESTIMES VARIABLE PUNTOYCOMA var_declaration
    (40) var_declaration -> . VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration
    (41) var_declaration -> . VARIABLE IGUAL NUMERO PUNTOYCOMA
    (42) var_declaration -> . VARIABLE IGUAL boolean PUNTOYCOMA var_declaration
    (43) var_declaration -> . VARIABLE IGUAL boolean PUNTOYCOMA
    (44) var_declaration -> . VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration
    (45) var_declaration -> . VARIABLE IGUAL VARIABLE PUNTOYCOMA
    (46) var_declaration -> . AMPERSANT VARIABLE PUNTOYCOMA var_declaration
    (47) var_declaration -> . AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt
    (48) var_declaration -> . AMPERSANT VARIABLE PUNTOYCOMA
    (49) var_declaration -> . VARIABLE IGUAL simple_expression PUNTOYCOMA
    (50) fun_declaration -> . FUNCTION VARIABLE PARENT_IZQ params PARENT_DER
    (51) fun_declaration -> . FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED
    (24) header_declaration -> . REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (25) header_declaration -> . INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (26) class_declaration -> . area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
    (27) class_declaration -> . CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
    (16) echo_stmt -> . echo_stmt ECHO STRING PUNTOYCOMA
    (17) echo_stmt -> . echo_stmt ECHO IDVAR PUNTOYCOMA
    (18) echo_stmt -> . empty
    (19) echo_stmt -> . echo_stmt ECHO NUMERO PUNTOYCOMA
    (20) echo_stmt -> . echo_stmt ECHO boolean PUNTOYCOMA
    (21) echo_stmt -> . echo_stmt ECHO fun_declaration PUNTOYCOMA
    (77) selection_stmt -> . IF PARENT_IZQ expression PARENT_DER statement
    (78) selection_stmt -> . IF PARENT_IZQ expression PARENT_DER statement selection
    (81) selection_stmt -> . SWITCH PARENT_IZQ var PARENT_DER statement
    (82) selection_stmt -> . CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA
    (83) selection_stmt -> . DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA
    (84) iteration_stmt -> . FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement
    (85) iteration_stmt -> . WHILE PARENT_IZQ expression PARENT_DER statement
    (86) iteration_stmt -> . DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER
    (132) typeclass -> . VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty
    (116) term -> . term mulop factor
    (117) term -> . factor
    (135) empty -> .
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for TIMESTIMES resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ALERT resolved as shift
  ! shift/reduce conflict for PARENT_IZQ resolved as shift
  ! shift/reduce conflict for NUMERO resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    VARIABLE        shift and go to state 16
    VAR             shift and go to state 17
    TIMESTIMES      shift and go to state 18
    AMPERSANT       shift and go to state 21
    FUNCTION        shift and go to state 22
    PRIVATE         shift and go to state 24
    PUBLIC          shift and go to state 25
    PROTECTED       shift and go to state 26
    REQUIRE         shift and go to state 27
    INCLUDE         shift and go to state 28
    CLASS           shift and go to state 29
    IF              shift and go to state 32
    SWITCH          shift and go to state 33
    CASE            shift and go to state 35
    DEFAULT         shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    DO              shift and go to state 39
    ALERT           shift and go to state 40
    ECHO            reduce using rule 135 (empty -> .)
    $end            reduce using rule 135 (empty -> .)
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

  ! VARIABLE        [ reduce using rule 135 (empty -> .) ]
  ! VAR             [ reduce using rule 135 (empty -> .) ]
  ! TIMESTIMES      [ reduce using rule 135 (empty -> .) ]
  ! AMPERSANT       [ reduce using rule 135 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 135 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 135 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 135 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 135 (empty -> .) ]
  ! REQUIRE         [ reduce using rule 135 (empty -> .) ]
  ! INCLUDE         [ reduce using rule 135 (empty -> .) ]
  ! CLASS           [ reduce using rule 135 (empty -> .) ]
  ! IF              [ reduce using rule 135 (empty -> .) ]
  ! SWITCH          [ reduce using rule 135 (empty -> .) ]
  ! CASE            [ reduce using rule 135 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 135 (empty -> .) ]
  ! FOR             [ reduce using rule 135 (empty -> .) ]
  ! WHILE           [ reduce using rule 135 (empty -> .) ]
  ! DO              [ reduce using rule 135 (empty -> .) ]
  ! ALERT           [ reduce using rule 135 (empty -> .) ]
  ! PARENT_IZQ      [ reduce using rule 135 (empty -> .) ]
  ! NUMERO          [ reduce using rule 135 (empty -> .) ]
  ! IDVAR           [ reduce using rule 135 (empty -> .) ]
  ! TRUE            [ reduce using rule 135 (empty -> .) ]
  ! FALSE           [ reduce using rule 135 (empty -> .) ]

    program                        shift and go to state 1
    declaration_list               shift and go to state 2
    declaration                    shift and go to state 3
    additive_expression            shift and go to state 4
    var_declaration                shift and go to state 5
    fun_declaration                shift and go to state 6
    area                           shift and go to state 7
    header_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    echo_stmt                      shift and go to state 10
    selection_stmt                 shift and go to state 11
    iteration_stmt                 shift and go to state 12
    typeclass                      shift and go to state 13
    alert_stmt                     shift and go to state 14
    term                           shift and go to state 15
    boolean                        shift and go to state 20
    empty                          shift and go to state 31
    var                            shift and go to state 34
    factor                         shift and go to state 41

state 1

    (0) S' -> program .



state 2

    (1) program -> declaration_list .
    (2) declaration_list -> declaration_list . declaration
    (5) declaration -> . var_declaration
    (6) declaration -> . fun_declaration
    (7) declaration -> . area fun_declaration
    (8) declaration -> . header_declaration
    (9) declaration -> . class_declaration
    (10) declaration -> . echo_stmt
    (11) declaration -> . selection_stmt
    (12) declaration -> . iteration_stmt
    (13) declaration -> . typeclass
    (14) declaration -> . alert_stmt
    (15) declaration -> . additive_expression
    (35) var_declaration -> . VARIABLE PUNTOYCOMA var_declaration
    (36) var_declaration -> . VAR VARIABLE IGUAL simple_expression
    (37) var_declaration -> . VARIABLE PUNTOYCOMA
    (38) var_declaration -> . TIMESTIMES VARIABLE PUNTOYCOMA
    (39) var_declaration -> . TIMESTIMES VARIABLE PUNTOYCOMA var_declaration
    (40) var_declaration -> . VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration
    (41) var_declaration -> . VARIABLE IGUAL NUMERO PUNTOYCOMA
    (42) var_declaration -> . VARIABLE IGUAL boolean PUNTOYCOMA var_declaration
    (43) var_declaration -> . VARIABLE IGUAL boolean PUNTOYCOMA
    (44) var_declaration -> . VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration
    (45) var_declaration -> . VARIABLE IGUAL VARIABLE PUNTOYCOMA
    (46) var_declaration -> . AMPERSANT VARIABLE PUNTOYCOMA var_declaration
    (47) var_declaration -> . AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt
    (48) var_declaration -> . AMPERSANT VARIABLE PUNTOYCOMA
    (49) var_declaration -> . VARIABLE IGUAL simple_expression PUNTOYCOMA
    (50) fun_declaration -> . FUNCTION VARIABLE PARENT_IZQ params PARENT_DER
    (51) fun_declaration -> . FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED
    (24) header_declaration -> . REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (25) header_declaration -> . INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (26) class_declaration -> . area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
    (27) class_declaration -> . CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
    (16) echo_stmt -> . echo_stmt ECHO STRING PUNTOYCOMA
    (17) echo_stmt -> . echo_stmt ECHO IDVAR PUNTOYCOMA
    (18) echo_stmt -> . empty
    (19) echo_stmt -> . echo_stmt ECHO NUMERO PUNTOYCOMA
    (20) echo_stmt -> . echo_stmt ECHO boolean PUNTOYCOMA
    (21) echo_stmt -> . echo_stmt ECHO fun_declaration PUNTOYCOMA
    (77) selection_stmt -> . IF PARENT_IZQ expression PARENT_DER statement
    (78) selection_stmt -> . IF PARENT_IZQ expression PARENT_DER statement selection
    (81) selection_stmt -> . SWITCH PARENT_IZQ var PARENT_DER statement
    (82) selection_stmt -> . CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA
    (83) selection_stmt -> . DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA
    (84) iteration_stmt -> . FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement
    (85) iteration_stmt -> . WHILE PARENT_IZQ expression PARENT_DER statement
    (86) iteration_stmt -> . DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER
    (132) typeclass -> . VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (135) empty -> .
    (116) term -> . term mulop factor
    (117) term -> . factor
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for TIMESTIMES resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ALERT resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 1 (program -> declaration_list .)
  ! shift/reduce conflict for PARENT_IZQ resolved as shift
  ! shift/reduce conflict for NUMERO resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    $end            reduce using rule 1 (program -> declaration_list .)
    VARIABLE        shift and go to state 46
    VAR             shift and go to state 17
    TIMESTIMES      shift and go to state 18
    AMPERSANT       shift and go to state 21
    FUNCTION        shift and go to state 22
    PRIVATE         shift and go to state 24
    PUBLIC          shift and go to state 25
    PROTECTED       shift and go to state 26
    REQUIRE         shift and go to state 27
    INCLUDE         shift and go to state 28
    CLASS           shift and go to state 29
    IF              shift and go to state 32
    SWITCH          shift and go to state 33
    CASE            shift and go to state 35
    DEFAULT         shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    DO              shift and go to state 39
    ALERT           shift and go to state 40
    ECHO            reduce using rule 135 (empty -> .)
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

  ! VARIABLE        [ reduce using rule 135 (empty -> .) ]
  ! VAR             [ reduce using rule 135 (empty -> .) ]
  ! TIMESTIMES      [ reduce using rule 135 (empty -> .) ]
  ! AMPERSANT       [ reduce using rule 135 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 135 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 135 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 135 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 135 (empty -> .) ]
  ! REQUIRE         [ reduce using rule 135 (empty -> .) ]
  ! INCLUDE         [ reduce using rule 135 (empty -> .) ]
  ! CLASS           [ reduce using rule 135 (empty -> .) ]
  ! IF              [ reduce using rule 135 (empty -> .) ]
  ! SWITCH          [ reduce using rule 135 (empty -> .) ]
  ! CASE            [ reduce using rule 135 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 135 (empty -> .) ]
  ! FOR             [ reduce using rule 135 (empty -> .) ]
  ! WHILE           [ reduce using rule 135 (empty -> .) ]
  ! DO              [ reduce using rule 135 (empty -> .) ]
  ! ALERT           [ reduce using rule 135 (empty -> .) ]
  ! PARENT_IZQ      [ reduce using rule 135 (empty -> .) ]
  ! NUMERO          [ reduce using rule 135 (empty -> .) ]
  ! IDVAR           [ reduce using rule 135 (empty -> .) ]
  ! TRUE            [ reduce using rule 135 (empty -> .) ]
  ! FALSE           [ reduce using rule 135 (empty -> .) ]
  ! $end            [ reduce using rule 135 (empty -> .) ]

    declaration                    shift and go to state 44
    var_declaration                shift and go to state 5
    fun_declaration                shift and go to state 6
    area                           shift and go to state 7
    header_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    echo_stmt                      shift and go to state 10
    selection_stmt                 shift and go to state 11
    iteration_stmt                 shift and go to state 12
    typeclass                      shift and go to state 13
    alert_stmt                     shift and go to state 14
    additive_expression            shift and go to state 45
    boolean                        shift and go to state 20
    empty                          shift and go to state 31
    var                            shift and go to state 34
    term                           shift and go to state 15
    factor                         shift and go to state 41

state 3

    (3) declaration_list -> declaration .

    VARIABLE        reduce using rule 3 (declaration_list -> declaration .)
    VAR             reduce using rule 3 (declaration_list -> declaration .)
    TIMESTIMES      reduce using rule 3 (declaration_list -> declaration .)
    AMPERSANT       reduce using rule 3 (declaration_list -> declaration .)
    FUNCTION        reduce using rule 3 (declaration_list -> declaration .)
    PRIVATE         reduce using rule 3 (declaration_list -> declaration .)
    PUBLIC          reduce using rule 3 (declaration_list -> declaration .)
    PROTECTED       reduce using rule 3 (declaration_list -> declaration .)
    REQUIRE         reduce using rule 3 (declaration_list -> declaration .)
    INCLUDE         reduce using rule 3 (declaration_list -> declaration .)
    CLASS           reduce using rule 3 (declaration_list -> declaration .)
    IF              reduce using rule 3 (declaration_list -> declaration .)
    SWITCH          reduce using rule 3 (declaration_list -> declaration .)
    CASE            reduce using rule 3 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 3 (declaration_list -> declaration .)
    FOR             reduce using rule 3 (declaration_list -> declaration .)
    WHILE           reduce using rule 3 (declaration_list -> declaration .)
    DO              reduce using rule 3 (declaration_list -> declaration .)
    ALERT           reduce using rule 3 (declaration_list -> declaration .)
    PARENT_IZQ      reduce using rule 3 (declaration_list -> declaration .)
    NUMERO          reduce using rule 3 (declaration_list -> declaration .)
    IDVAR           reduce using rule 3 (declaration_list -> declaration .)
    TRUE            reduce using rule 3 (declaration_list -> declaration .)
    FALSE           reduce using rule 3 (declaration_list -> declaration .)
    ECHO            reduce using rule 3 (declaration_list -> declaration .)
    $end            reduce using rule 3 (declaration_list -> declaration .)


state 4

    (4) declaration_list -> additive_expression .
    (15) declaration -> additive_expression .
    (108) additive_expression -> additive_expression . addop term
    (114) addop -> . SUMA
    (115) addop -> . RESTA

  ! reduce/reduce conflict for VARIABLE resolved using rule 4 (declaration_list -> additive_expression .)
  ! reduce/reduce conflict for VAR resolved using rule 4 (declaration_list -> additive_expression .)
  ! reduce/reduce conflict for TIMESTIMES resolved using rule 4 (declaration_list -> additive_expression .)
  ! reduce/reduce conflict for AMPERSANT resolved using rule 4 (declaration_list -> additive_expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 4 (declaration_list -> additive_expression .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 4 (declaration_list -> additive_expression .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 4 (declaration_list -> additive_expression .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 4 (declaration_list -> additive_expression .)
  ! reduce/reduce conflict for REQUIRE resolved using rule 4 (declaration_list -> additive_expression .)
  ! reduce/reduce conflict for INCLUDE resolved using rule 4 (declaration_list -> additive_expression .)
  ! reduce/reduce conflict for CLASS resolved using rule 4 (declaration_list -> additive_expression .)
  ! reduce/reduce conflict for IF resolved using rule 4 (declaration_list -> additive_expression .)
  ! reduce/reduce conflict for SWITCH resolved using rule 4 (declaration_list -> additive_expression .)
  ! reduce/reduce conflict for CASE resolved using rule 4 (declaration_list -> additive_expression .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 4 (declaration_list -> additive_expression .)
  ! reduce/reduce conflict for FOR resolved using rule 4 (declaration_list -> additive_expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 4 (declaration_list -> additive_expression .)
  ! reduce/reduce conflict for DO resolved using rule 4 (declaration_list -> additive_expression .)
  ! reduce/reduce conflict for ALERT resolved using rule 4 (declaration_list -> additive_expression .)
  ! reduce/reduce conflict for PARENT_IZQ resolved using rule 4 (declaration_list -> additive_expression .)
  ! reduce/reduce conflict for NUMERO resolved using rule 4 (declaration_list -> additive_expression .)
  ! reduce/reduce conflict for IDVAR resolved using rule 4 (declaration_list -> additive_expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 4 (declaration_list -> additive_expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 4 (declaration_list -> additive_expression .)
  ! reduce/reduce conflict for ECHO resolved using rule 4 (declaration_list -> additive_expression .)
  ! reduce/reduce conflict for $end resolved using rule 4 (declaration_list -> additive_expression .)
    VARIABLE        reduce using rule 4 (declaration_list -> additive_expression .)
    VAR             reduce using rule 4 (declaration_list -> additive_expression .)
    TIMESTIMES      reduce using rule 4 (declaration_list -> additive_expression .)
    AMPERSANT       reduce using rule 4 (declaration_list -> additive_expression .)
    FUNCTION        reduce using rule 4 (declaration_list -> additive_expression .)
    PRIVATE         reduce using rule 4 (declaration_list -> additive_expression .)
    PUBLIC          reduce using rule 4 (declaration_list -> additive_expression .)
    PROTECTED       reduce using rule 4 (declaration_list -> additive_expression .)
    REQUIRE         reduce using rule 4 (declaration_list -> additive_expression .)
    INCLUDE         reduce using rule 4 (declaration_list -> additive_expression .)
    CLASS           reduce using rule 4 (declaration_list -> additive_expression .)
    IF              reduce using rule 4 (declaration_list -> additive_expression .)
    SWITCH          reduce using rule 4 (declaration_list -> additive_expression .)
    CASE            reduce using rule 4 (declaration_list -> additive_expression .)
    DEFAULT         reduce using rule 4 (declaration_list -> additive_expression .)
    FOR             reduce using rule 4 (declaration_list -> additive_expression .)
    WHILE           reduce using rule 4 (declaration_list -> additive_expression .)
    DO              reduce using rule 4 (declaration_list -> additive_expression .)
    ALERT           reduce using rule 4 (declaration_list -> additive_expression .)
    PARENT_IZQ      reduce using rule 4 (declaration_list -> additive_expression .)
    NUMERO          reduce using rule 4 (declaration_list -> additive_expression .)
    IDVAR           reduce using rule 4 (declaration_list -> additive_expression .)
    TRUE            reduce using rule 4 (declaration_list -> additive_expression .)
    FALSE           reduce using rule 4 (declaration_list -> additive_expression .)
    ECHO            reduce using rule 4 (declaration_list -> additive_expression .)
    $end            reduce using rule 4 (declaration_list -> additive_expression .)
    SUMA            shift and go to state 48
    RESTA           shift and go to state 49

  ! VARIABLE        [ reduce using rule 15 (declaration -> additive_expression .) ]
  ! VAR             [ reduce using rule 15 (declaration -> additive_expression .) ]
  ! TIMESTIMES      [ reduce using rule 15 (declaration -> additive_expression .) ]
  ! AMPERSANT       [ reduce using rule 15 (declaration -> additive_expression .) ]
  ! FUNCTION        [ reduce using rule 15 (declaration -> additive_expression .) ]
  ! PRIVATE         [ reduce using rule 15 (declaration -> additive_expression .) ]
  ! PUBLIC          [ reduce using rule 15 (declaration -> additive_expression .) ]
  ! PROTECTED       [ reduce using rule 15 (declaration -> additive_expression .) ]
  ! REQUIRE         [ reduce using rule 15 (declaration -> additive_expression .) ]
  ! INCLUDE         [ reduce using rule 15 (declaration -> additive_expression .) ]
  ! CLASS           [ reduce using rule 15 (declaration -> additive_expression .) ]
  ! IF              [ reduce using rule 15 (declaration -> additive_expression .) ]
  ! SWITCH          [ reduce using rule 15 (declaration -> additive_expression .) ]
  ! CASE            [ reduce using rule 15 (declaration -> additive_expression .) ]
  ! DEFAULT         [ reduce using rule 15 (declaration -> additive_expression .) ]
  ! FOR             [ reduce using rule 15 (declaration -> additive_expression .) ]
  ! WHILE           [ reduce using rule 15 (declaration -> additive_expression .) ]
  ! DO              [ reduce using rule 15 (declaration -> additive_expression .) ]
  ! ALERT           [ reduce using rule 15 (declaration -> additive_expression .) ]
  ! PARENT_IZQ      [ reduce using rule 15 (declaration -> additive_expression .) ]
  ! NUMERO          [ reduce using rule 15 (declaration -> additive_expression .) ]
  ! IDVAR           [ reduce using rule 15 (declaration -> additive_expression .) ]
  ! TRUE            [ reduce using rule 15 (declaration -> additive_expression .) ]
  ! FALSE           [ reduce using rule 15 (declaration -> additive_expression .) ]
  ! ECHO            [ reduce using rule 15 (declaration -> additive_expression .) ]
  ! $end            [ reduce using rule 15 (declaration -> additive_expression .) ]

    addop                          shift and go to state 47

state 5

    (5) declaration -> var_declaration .

    VARIABLE        reduce using rule 5 (declaration -> var_declaration .)
    VAR             reduce using rule 5 (declaration -> var_declaration .)
    TIMESTIMES      reduce using rule 5 (declaration -> var_declaration .)
    AMPERSANT       reduce using rule 5 (declaration -> var_declaration .)
    FUNCTION        reduce using rule 5 (declaration -> var_declaration .)
    PRIVATE         reduce using rule 5 (declaration -> var_declaration .)
    PUBLIC          reduce using rule 5 (declaration -> var_declaration .)
    PROTECTED       reduce using rule 5 (declaration -> var_declaration .)
    REQUIRE         reduce using rule 5 (declaration -> var_declaration .)
    INCLUDE         reduce using rule 5 (declaration -> var_declaration .)
    CLASS           reduce using rule 5 (declaration -> var_declaration .)
    IF              reduce using rule 5 (declaration -> var_declaration .)
    SWITCH          reduce using rule 5 (declaration -> var_declaration .)
    CASE            reduce using rule 5 (declaration -> var_declaration .)
    DEFAULT         reduce using rule 5 (declaration -> var_declaration .)
    FOR             reduce using rule 5 (declaration -> var_declaration .)
    WHILE           reduce using rule 5 (declaration -> var_declaration .)
    DO              reduce using rule 5 (declaration -> var_declaration .)
    ALERT           reduce using rule 5 (declaration -> var_declaration .)
    PARENT_IZQ      reduce using rule 5 (declaration -> var_declaration .)
    NUMERO          reduce using rule 5 (declaration -> var_declaration .)
    IDVAR           reduce using rule 5 (declaration -> var_declaration .)
    TRUE            reduce using rule 5 (declaration -> var_declaration .)
    FALSE           reduce using rule 5 (declaration -> var_declaration .)
    ECHO            reduce using rule 5 (declaration -> var_declaration .)
    $end            reduce using rule 5 (declaration -> var_declaration .)


state 6

    (6) declaration -> fun_declaration .

    VARIABLE        reduce using rule 6 (declaration -> fun_declaration .)
    VAR             reduce using rule 6 (declaration -> fun_declaration .)
    TIMESTIMES      reduce using rule 6 (declaration -> fun_declaration .)
    AMPERSANT       reduce using rule 6 (declaration -> fun_declaration .)
    FUNCTION        reduce using rule 6 (declaration -> fun_declaration .)
    PRIVATE         reduce using rule 6 (declaration -> fun_declaration .)
    PUBLIC          reduce using rule 6 (declaration -> fun_declaration .)
    PROTECTED       reduce using rule 6 (declaration -> fun_declaration .)
    REQUIRE         reduce using rule 6 (declaration -> fun_declaration .)
    INCLUDE         reduce using rule 6 (declaration -> fun_declaration .)
    CLASS           reduce using rule 6 (declaration -> fun_declaration .)
    IF              reduce using rule 6 (declaration -> fun_declaration .)
    SWITCH          reduce using rule 6 (declaration -> fun_declaration .)
    CASE            reduce using rule 6 (declaration -> fun_declaration .)
    DEFAULT         reduce using rule 6 (declaration -> fun_declaration .)
    FOR             reduce using rule 6 (declaration -> fun_declaration .)
    WHILE           reduce using rule 6 (declaration -> fun_declaration .)
    DO              reduce using rule 6 (declaration -> fun_declaration .)
    ALERT           reduce using rule 6 (declaration -> fun_declaration .)
    PARENT_IZQ      reduce using rule 6 (declaration -> fun_declaration .)
    NUMERO          reduce using rule 6 (declaration -> fun_declaration .)
    IDVAR           reduce using rule 6 (declaration -> fun_declaration .)
    TRUE            reduce using rule 6 (declaration -> fun_declaration .)
    FALSE           reduce using rule 6 (declaration -> fun_declaration .)
    ECHO            reduce using rule 6 (declaration -> fun_declaration .)
    $end            reduce using rule 6 (declaration -> fun_declaration .)


state 7

    (7) declaration -> area . fun_declaration
    (26) class_declaration -> area . CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
    (50) fun_declaration -> . FUNCTION VARIABLE PARENT_IZQ params PARENT_DER
    (51) fun_declaration -> . FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt

    CLASS           shift and go to state 51
    FUNCTION        shift and go to state 22

    fun_declaration                shift and go to state 50

state 8

    (8) declaration -> header_declaration .

    VARIABLE        reduce using rule 8 (declaration -> header_declaration .)
    VAR             reduce using rule 8 (declaration -> header_declaration .)
    TIMESTIMES      reduce using rule 8 (declaration -> header_declaration .)
    AMPERSANT       reduce using rule 8 (declaration -> header_declaration .)
    FUNCTION        reduce using rule 8 (declaration -> header_declaration .)
    PRIVATE         reduce using rule 8 (declaration -> header_declaration .)
    PUBLIC          reduce using rule 8 (declaration -> header_declaration .)
    PROTECTED       reduce using rule 8 (declaration -> header_declaration .)
    REQUIRE         reduce using rule 8 (declaration -> header_declaration .)
    INCLUDE         reduce using rule 8 (declaration -> header_declaration .)
    CLASS           reduce using rule 8 (declaration -> header_declaration .)
    IF              reduce using rule 8 (declaration -> header_declaration .)
    SWITCH          reduce using rule 8 (declaration -> header_declaration .)
    CASE            reduce using rule 8 (declaration -> header_declaration .)
    DEFAULT         reduce using rule 8 (declaration -> header_declaration .)
    FOR             reduce using rule 8 (declaration -> header_declaration .)
    WHILE           reduce using rule 8 (declaration -> header_declaration .)
    DO              reduce using rule 8 (declaration -> header_declaration .)
    ALERT           reduce using rule 8 (declaration -> header_declaration .)
    PARENT_IZQ      reduce using rule 8 (declaration -> header_declaration .)
    NUMERO          reduce using rule 8 (declaration -> header_declaration .)
    IDVAR           reduce using rule 8 (declaration -> header_declaration .)
    TRUE            reduce using rule 8 (declaration -> header_declaration .)
    FALSE           reduce using rule 8 (declaration -> header_declaration .)
    ECHO            reduce using rule 8 (declaration -> header_declaration .)
    $end            reduce using rule 8 (declaration -> header_declaration .)


state 9

    (9) declaration -> class_declaration .

    VARIABLE        reduce using rule 9 (declaration -> class_declaration .)
    VAR             reduce using rule 9 (declaration -> class_declaration .)
    TIMESTIMES      reduce using rule 9 (declaration -> class_declaration .)
    AMPERSANT       reduce using rule 9 (declaration -> class_declaration .)
    FUNCTION        reduce using rule 9 (declaration -> class_declaration .)
    PRIVATE         reduce using rule 9 (declaration -> class_declaration .)
    PUBLIC          reduce using rule 9 (declaration -> class_declaration .)
    PROTECTED       reduce using rule 9 (declaration -> class_declaration .)
    REQUIRE         reduce using rule 9 (declaration -> class_declaration .)
    INCLUDE         reduce using rule 9 (declaration -> class_declaration .)
    CLASS           reduce using rule 9 (declaration -> class_declaration .)
    IF              reduce using rule 9 (declaration -> class_declaration .)
    SWITCH          reduce using rule 9 (declaration -> class_declaration .)
    CASE            reduce using rule 9 (declaration -> class_declaration .)
    DEFAULT         reduce using rule 9 (declaration -> class_declaration .)
    FOR             reduce using rule 9 (declaration -> class_declaration .)
    WHILE           reduce using rule 9 (declaration -> class_declaration .)
    DO              reduce using rule 9 (declaration -> class_declaration .)
    ALERT           reduce using rule 9 (declaration -> class_declaration .)
    PARENT_IZQ      reduce using rule 9 (declaration -> class_declaration .)
    NUMERO          reduce using rule 9 (declaration -> class_declaration .)
    IDVAR           reduce using rule 9 (declaration -> class_declaration .)
    TRUE            reduce using rule 9 (declaration -> class_declaration .)
    FALSE           reduce using rule 9 (declaration -> class_declaration .)
    ECHO            reduce using rule 9 (declaration -> class_declaration .)
    $end            reduce using rule 9 (declaration -> class_declaration .)


state 10

    (10) declaration -> echo_stmt .
    (16) echo_stmt -> echo_stmt . ECHO STRING PUNTOYCOMA
    (17) echo_stmt -> echo_stmt . ECHO IDVAR PUNTOYCOMA
    (19) echo_stmt -> echo_stmt . ECHO NUMERO PUNTOYCOMA
    (20) echo_stmt -> echo_stmt . ECHO boolean PUNTOYCOMA
    (21) echo_stmt -> echo_stmt . ECHO fun_declaration PUNTOYCOMA

  ! shift/reduce conflict for ECHO resolved as shift
    VARIABLE        reduce using rule 10 (declaration -> echo_stmt .)
    VAR             reduce using rule 10 (declaration -> echo_stmt .)
    TIMESTIMES      reduce using rule 10 (declaration -> echo_stmt .)
    AMPERSANT       reduce using rule 10 (declaration -> echo_stmt .)
    FUNCTION        reduce using rule 10 (declaration -> echo_stmt .)
    PRIVATE         reduce using rule 10 (declaration -> echo_stmt .)
    PUBLIC          reduce using rule 10 (declaration -> echo_stmt .)
    PROTECTED       reduce using rule 10 (declaration -> echo_stmt .)
    REQUIRE         reduce using rule 10 (declaration -> echo_stmt .)
    INCLUDE         reduce using rule 10 (declaration -> echo_stmt .)
    CLASS           reduce using rule 10 (declaration -> echo_stmt .)
    IF              reduce using rule 10 (declaration -> echo_stmt .)
    SWITCH          reduce using rule 10 (declaration -> echo_stmt .)
    CASE            reduce using rule 10 (declaration -> echo_stmt .)
    DEFAULT         reduce using rule 10 (declaration -> echo_stmt .)
    FOR             reduce using rule 10 (declaration -> echo_stmt .)
    WHILE           reduce using rule 10 (declaration -> echo_stmt .)
    DO              reduce using rule 10 (declaration -> echo_stmt .)
    ALERT           reduce using rule 10 (declaration -> echo_stmt .)
    PARENT_IZQ      reduce using rule 10 (declaration -> echo_stmt .)
    NUMERO          reduce using rule 10 (declaration -> echo_stmt .)
    IDVAR           reduce using rule 10 (declaration -> echo_stmt .)
    TRUE            reduce using rule 10 (declaration -> echo_stmt .)
    FALSE           reduce using rule 10 (declaration -> echo_stmt .)
    $end            reduce using rule 10 (declaration -> echo_stmt .)
    ECHO            shift and go to state 52

  ! ECHO            [ reduce using rule 10 (declaration -> echo_stmt .) ]


state 11

    (11) declaration -> selection_stmt .

    VARIABLE        reduce using rule 11 (declaration -> selection_stmt .)
    VAR             reduce using rule 11 (declaration -> selection_stmt .)
    TIMESTIMES      reduce using rule 11 (declaration -> selection_stmt .)
    AMPERSANT       reduce using rule 11 (declaration -> selection_stmt .)
    FUNCTION        reduce using rule 11 (declaration -> selection_stmt .)
    PRIVATE         reduce using rule 11 (declaration -> selection_stmt .)
    PUBLIC          reduce using rule 11 (declaration -> selection_stmt .)
    PROTECTED       reduce using rule 11 (declaration -> selection_stmt .)
    REQUIRE         reduce using rule 11 (declaration -> selection_stmt .)
    INCLUDE         reduce using rule 11 (declaration -> selection_stmt .)
    CLASS           reduce using rule 11 (declaration -> selection_stmt .)
    IF              reduce using rule 11 (declaration -> selection_stmt .)
    SWITCH          reduce using rule 11 (declaration -> selection_stmt .)
    CASE            reduce using rule 11 (declaration -> selection_stmt .)
    DEFAULT         reduce using rule 11 (declaration -> selection_stmt .)
    FOR             reduce using rule 11 (declaration -> selection_stmt .)
    WHILE           reduce using rule 11 (declaration -> selection_stmt .)
    DO              reduce using rule 11 (declaration -> selection_stmt .)
    ALERT           reduce using rule 11 (declaration -> selection_stmt .)
    PARENT_IZQ      reduce using rule 11 (declaration -> selection_stmt .)
    NUMERO          reduce using rule 11 (declaration -> selection_stmt .)
    IDVAR           reduce using rule 11 (declaration -> selection_stmt .)
    TRUE            reduce using rule 11 (declaration -> selection_stmt .)
    FALSE           reduce using rule 11 (declaration -> selection_stmt .)
    ECHO            reduce using rule 11 (declaration -> selection_stmt .)
    $end            reduce using rule 11 (declaration -> selection_stmt .)


state 12

    (12) declaration -> iteration_stmt .

    VARIABLE        reduce using rule 12 (declaration -> iteration_stmt .)
    VAR             reduce using rule 12 (declaration -> iteration_stmt .)
    TIMESTIMES      reduce using rule 12 (declaration -> iteration_stmt .)
    AMPERSANT       reduce using rule 12 (declaration -> iteration_stmt .)
    FUNCTION        reduce using rule 12 (declaration -> iteration_stmt .)
    PRIVATE         reduce using rule 12 (declaration -> iteration_stmt .)
    PUBLIC          reduce using rule 12 (declaration -> iteration_stmt .)
    PROTECTED       reduce using rule 12 (declaration -> iteration_stmt .)
    REQUIRE         reduce using rule 12 (declaration -> iteration_stmt .)
    INCLUDE         reduce using rule 12 (declaration -> iteration_stmt .)
    CLASS           reduce using rule 12 (declaration -> iteration_stmt .)
    IF              reduce using rule 12 (declaration -> iteration_stmt .)
    SWITCH          reduce using rule 12 (declaration -> iteration_stmt .)
    CASE            reduce using rule 12 (declaration -> iteration_stmt .)
    DEFAULT         reduce using rule 12 (declaration -> iteration_stmt .)
    FOR             reduce using rule 12 (declaration -> iteration_stmt .)
    WHILE           reduce using rule 12 (declaration -> iteration_stmt .)
    DO              reduce using rule 12 (declaration -> iteration_stmt .)
    ALERT           reduce using rule 12 (declaration -> iteration_stmt .)
    PARENT_IZQ      reduce using rule 12 (declaration -> iteration_stmt .)
    NUMERO          reduce using rule 12 (declaration -> iteration_stmt .)
    IDVAR           reduce using rule 12 (declaration -> iteration_stmt .)
    TRUE            reduce using rule 12 (declaration -> iteration_stmt .)
    FALSE           reduce using rule 12 (declaration -> iteration_stmt .)
    ECHO            reduce using rule 12 (declaration -> iteration_stmt .)
    $end            reduce using rule 12 (declaration -> iteration_stmt .)


state 13

    (13) declaration -> typeclass .

    VARIABLE        reduce using rule 13 (declaration -> typeclass .)
    VAR             reduce using rule 13 (declaration -> typeclass .)
    TIMESTIMES      reduce using rule 13 (declaration -> typeclass .)
    AMPERSANT       reduce using rule 13 (declaration -> typeclass .)
    FUNCTION        reduce using rule 13 (declaration -> typeclass .)
    PRIVATE         reduce using rule 13 (declaration -> typeclass .)
    PUBLIC          reduce using rule 13 (declaration -> typeclass .)
    PROTECTED       reduce using rule 13 (declaration -> typeclass .)
    REQUIRE         reduce using rule 13 (declaration -> typeclass .)
    INCLUDE         reduce using rule 13 (declaration -> typeclass .)
    CLASS           reduce using rule 13 (declaration -> typeclass .)
    IF              reduce using rule 13 (declaration -> typeclass .)
    SWITCH          reduce using rule 13 (declaration -> typeclass .)
    CASE            reduce using rule 13 (declaration -> typeclass .)
    DEFAULT         reduce using rule 13 (declaration -> typeclass .)
    FOR             reduce using rule 13 (declaration -> typeclass .)
    WHILE           reduce using rule 13 (declaration -> typeclass .)
    DO              reduce using rule 13 (declaration -> typeclass .)
    ALERT           reduce using rule 13 (declaration -> typeclass .)
    PARENT_IZQ      reduce using rule 13 (declaration -> typeclass .)
    NUMERO          reduce using rule 13 (declaration -> typeclass .)
    IDVAR           reduce using rule 13 (declaration -> typeclass .)
    TRUE            reduce using rule 13 (declaration -> typeclass .)
    FALSE           reduce using rule 13 (declaration -> typeclass .)
    ECHO            reduce using rule 13 (declaration -> typeclass .)
    $end            reduce using rule 13 (declaration -> typeclass .)


state 14

    (14) declaration -> alert_stmt .

    VARIABLE        reduce using rule 14 (declaration -> alert_stmt .)
    VAR             reduce using rule 14 (declaration -> alert_stmt .)
    TIMESTIMES      reduce using rule 14 (declaration -> alert_stmt .)
    AMPERSANT       reduce using rule 14 (declaration -> alert_stmt .)
    FUNCTION        reduce using rule 14 (declaration -> alert_stmt .)
    PRIVATE         reduce using rule 14 (declaration -> alert_stmt .)
    PUBLIC          reduce using rule 14 (declaration -> alert_stmt .)
    PROTECTED       reduce using rule 14 (declaration -> alert_stmt .)
    REQUIRE         reduce using rule 14 (declaration -> alert_stmt .)
    INCLUDE         reduce using rule 14 (declaration -> alert_stmt .)
    CLASS           reduce using rule 14 (declaration -> alert_stmt .)
    IF              reduce using rule 14 (declaration -> alert_stmt .)
    SWITCH          reduce using rule 14 (declaration -> alert_stmt .)
    CASE            reduce using rule 14 (declaration -> alert_stmt .)
    DEFAULT         reduce using rule 14 (declaration -> alert_stmt .)
    FOR             reduce using rule 14 (declaration -> alert_stmt .)
    WHILE           reduce using rule 14 (declaration -> alert_stmt .)
    DO              reduce using rule 14 (declaration -> alert_stmt .)
    ALERT           reduce using rule 14 (declaration -> alert_stmt .)
    PARENT_IZQ      reduce using rule 14 (declaration -> alert_stmt .)
    NUMERO          reduce using rule 14 (declaration -> alert_stmt .)
    IDVAR           reduce using rule 14 (declaration -> alert_stmt .)
    TRUE            reduce using rule 14 (declaration -> alert_stmt .)
    FALSE           reduce using rule 14 (declaration -> alert_stmt .)
    ECHO            reduce using rule 14 (declaration -> alert_stmt .)
    $end            reduce using rule 14 (declaration -> alert_stmt .)


state 15

    (109) additive_expression -> term .
    (116) term -> term . mulop factor
    (118) mulop -> . MULTIPLICACION
    (119) mulop -> . DIVISION

    SUMA            reduce using rule 109 (additive_expression -> term .)
    RESTA           reduce using rule 109 (additive_expression -> term .)
    VARIABLE        reduce using rule 109 (additive_expression -> term .)
    VAR             reduce using rule 109 (additive_expression -> term .)
    TIMESTIMES      reduce using rule 109 (additive_expression -> term .)
    AMPERSANT       reduce using rule 109 (additive_expression -> term .)
    FUNCTION        reduce using rule 109 (additive_expression -> term .)
    PRIVATE         reduce using rule 109 (additive_expression -> term .)
    PUBLIC          reduce using rule 109 (additive_expression -> term .)
    PROTECTED       reduce using rule 109 (additive_expression -> term .)
    REQUIRE         reduce using rule 109 (additive_expression -> term .)
    INCLUDE         reduce using rule 109 (additive_expression -> term .)
    CLASS           reduce using rule 109 (additive_expression -> term .)
    IF              reduce using rule 109 (additive_expression -> term .)
    SWITCH          reduce using rule 109 (additive_expression -> term .)
    CASE            reduce using rule 109 (additive_expression -> term .)
    DEFAULT         reduce using rule 109 (additive_expression -> term .)
    FOR             reduce using rule 109 (additive_expression -> term .)
    WHILE           reduce using rule 109 (additive_expression -> term .)
    DO              reduce using rule 109 (additive_expression -> term .)
    ALERT           reduce using rule 109 (additive_expression -> term .)
    PARENT_IZQ      reduce using rule 109 (additive_expression -> term .)
    NUMERO          reduce using rule 109 (additive_expression -> term .)
    IDVAR           reduce using rule 109 (additive_expression -> term .)
    TRUE            reduce using rule 109 (additive_expression -> term .)
    FALSE           reduce using rule 109 (additive_expression -> term .)
    ECHO            reduce using rule 109 (additive_expression -> term .)
    $end            reduce using rule 109 (additive_expression -> term .)
    MENOR           reduce using rule 109 (additive_expression -> term .)
    MENOR_IGUAL     reduce using rule 109 (additive_expression -> term .)
    MAYOR           reduce using rule 109 (additive_expression -> term .)
    MAYOR_IGUAL     reduce using rule 109 (additive_expression -> term .)
    DESIGUAL        reduce using rule 109 (additive_expression -> term .)
    DISTINTO        reduce using rule 109 (additive_expression -> term .)
    ES_IGUAL        reduce using rule 109 (additive_expression -> term .)
    PARENT_DER      reduce using rule 109 (additive_expression -> term .)
    AND             reduce using rule 109 (additive_expression -> term .)
    OR              reduce using rule 109 (additive_expression -> term .)
    PUNTOYCOMA      reduce using rule 109 (additive_expression -> term .)
    CORCHETE_DER    reduce using rule 109 (additive_expression -> term .)
    COMA            reduce using rule 109 (additive_expression -> term .)
    BREAK           reduce using rule 109 (additive_expression -> term .)
    LLAVE_DER       reduce using rule 109 (additive_expression -> term .)
    LLAVE_IZQ       reduce using rule 109 (additive_expression -> term .)
    RETURN          reduce using rule 109 (additive_expression -> term .)
    ELSE            reduce using rule 109 (additive_expression -> term .)
    ELSEIF          reduce using rule 109 (additive_expression -> term .)
    MULTIPLICACION  shift and go to state 54
    DIVISION        shift and go to state 55

    mulop                          shift and go to state 53

state 16

    (110) additive_expression -> VARIABLE . DECREMENTO PUNTOYCOMA
    (111) additive_expression -> VARIABLE . INCREMENTO PUNTOYCOMA
    (112) additive_expression -> VARIABLE . DECREMENTO
    (113) additive_expression -> VARIABLE . INCREMENTO
    (35) var_declaration -> VARIABLE . PUNTOYCOMA var_declaration
    (37) var_declaration -> VARIABLE . PUNTOYCOMA
    (40) var_declaration -> VARIABLE . IGUAL NUMERO PUNTOYCOMA var_declaration
    (41) var_declaration -> VARIABLE . IGUAL NUMERO PUNTOYCOMA
    (42) var_declaration -> VARIABLE . IGUAL boolean PUNTOYCOMA var_declaration
    (43) var_declaration -> VARIABLE . IGUAL boolean PUNTOYCOMA
    (44) var_declaration -> VARIABLE . IGUAL VARIABLE PUNTOYCOMA var_declaration
    (45) var_declaration -> VARIABLE . IGUAL VARIABLE PUNTOYCOMA
    (49) var_declaration -> VARIABLE . IGUAL simple_expression PUNTOYCOMA
    (132) typeclass -> VARIABLE . IDVAR IGUAL NEW constructor PUNTOYCOMA
    (96) var -> VARIABLE .
    (97) var -> VARIABLE . CORCHETE_IZQ expression CORCHETE_DER

  ! shift/reduce conflict for IDVAR resolved as shift
    DECREMENTO      shift and go to state 56
    INCREMENTO      shift and go to state 58
    PUNTOYCOMA      shift and go to state 57
    IGUAL           shift and go to state 59
    IDVAR           shift and go to state 60
    MULTIPLICACION  reduce using rule 96 (var -> VARIABLE .)
    DIVISION        reduce using rule 96 (var -> VARIABLE .)
    SUMA            reduce using rule 96 (var -> VARIABLE .)
    RESTA           reduce using rule 96 (var -> VARIABLE .)
    VARIABLE        reduce using rule 96 (var -> VARIABLE .)
    VAR             reduce using rule 96 (var -> VARIABLE .)
    TIMESTIMES      reduce using rule 96 (var -> VARIABLE .)
    AMPERSANT       reduce using rule 96 (var -> VARIABLE .)
    FUNCTION        reduce using rule 96 (var -> VARIABLE .)
    PRIVATE         reduce using rule 96 (var -> VARIABLE .)
    PUBLIC          reduce using rule 96 (var -> VARIABLE .)
    PROTECTED       reduce using rule 96 (var -> VARIABLE .)
    REQUIRE         reduce using rule 96 (var -> VARIABLE .)
    INCLUDE         reduce using rule 96 (var -> VARIABLE .)
    CLASS           reduce using rule 96 (var -> VARIABLE .)
    IF              reduce using rule 96 (var -> VARIABLE .)
    SWITCH          reduce using rule 96 (var -> VARIABLE .)
    CASE            reduce using rule 96 (var -> VARIABLE .)
    DEFAULT         reduce using rule 96 (var -> VARIABLE .)
    FOR             reduce using rule 96 (var -> VARIABLE .)
    WHILE           reduce using rule 96 (var -> VARIABLE .)
    DO              reduce using rule 96 (var -> VARIABLE .)
    ALERT           reduce using rule 96 (var -> VARIABLE .)
    PARENT_IZQ      reduce using rule 96 (var -> VARIABLE .)
    NUMERO          reduce using rule 96 (var -> VARIABLE .)
    TRUE            reduce using rule 96 (var -> VARIABLE .)
    FALSE           reduce using rule 96 (var -> VARIABLE .)
    ECHO            reduce using rule 96 (var -> VARIABLE .)
    $end            reduce using rule 96 (var -> VARIABLE .)
    CORCHETE_IZQ    shift and go to state 61

  ! IDVAR           [ reduce using rule 96 (var -> VARIABLE .) ]


state 17

    (36) var_declaration -> VAR . VARIABLE IGUAL simple_expression

    VARIABLE        shift and go to state 62


state 18

    (38) var_declaration -> TIMESTIMES . VARIABLE PUNTOYCOMA
    (39) var_declaration -> TIMESTIMES . VARIABLE PUNTOYCOMA var_declaration

    VARIABLE        shift and go to state 63


state 19

    (122) factor -> NUMERO .

    MULTIPLICACION  reduce using rule 122 (factor -> NUMERO .)
    DIVISION        reduce using rule 122 (factor -> NUMERO .)
    SUMA            reduce using rule 122 (factor -> NUMERO .)
    RESTA           reduce using rule 122 (factor -> NUMERO .)
    VARIABLE        reduce using rule 122 (factor -> NUMERO .)
    VAR             reduce using rule 122 (factor -> NUMERO .)
    TIMESTIMES      reduce using rule 122 (factor -> NUMERO .)
    AMPERSANT       reduce using rule 122 (factor -> NUMERO .)
    FUNCTION        reduce using rule 122 (factor -> NUMERO .)
    PRIVATE         reduce using rule 122 (factor -> NUMERO .)
    PUBLIC          reduce using rule 122 (factor -> NUMERO .)
    PROTECTED       reduce using rule 122 (factor -> NUMERO .)
    REQUIRE         reduce using rule 122 (factor -> NUMERO .)
    INCLUDE         reduce using rule 122 (factor -> NUMERO .)
    CLASS           reduce using rule 122 (factor -> NUMERO .)
    IF              reduce using rule 122 (factor -> NUMERO .)
    SWITCH          reduce using rule 122 (factor -> NUMERO .)
    CASE            reduce using rule 122 (factor -> NUMERO .)
    DEFAULT         reduce using rule 122 (factor -> NUMERO .)
    FOR             reduce using rule 122 (factor -> NUMERO .)
    WHILE           reduce using rule 122 (factor -> NUMERO .)
    DO              reduce using rule 122 (factor -> NUMERO .)
    ALERT           reduce using rule 122 (factor -> NUMERO .)
    PARENT_IZQ      reduce using rule 122 (factor -> NUMERO .)
    NUMERO          reduce using rule 122 (factor -> NUMERO .)
    IDVAR           reduce using rule 122 (factor -> NUMERO .)
    TRUE            reduce using rule 122 (factor -> NUMERO .)
    FALSE           reduce using rule 122 (factor -> NUMERO .)
    ECHO            reduce using rule 122 (factor -> NUMERO .)
    $end            reduce using rule 122 (factor -> NUMERO .)
    MENOR           reduce using rule 122 (factor -> NUMERO .)
    MENOR_IGUAL     reduce using rule 122 (factor -> NUMERO .)
    MAYOR           reduce using rule 122 (factor -> NUMERO .)
    MAYOR_IGUAL     reduce using rule 122 (factor -> NUMERO .)
    DESIGUAL        reduce using rule 122 (factor -> NUMERO .)
    DISTINTO        reduce using rule 122 (factor -> NUMERO .)
    ES_IGUAL        reduce using rule 122 (factor -> NUMERO .)
    PARENT_DER      reduce using rule 122 (factor -> NUMERO .)
    AND             reduce using rule 122 (factor -> NUMERO .)
    OR              reduce using rule 122 (factor -> NUMERO .)
    PUNTOYCOMA      reduce using rule 122 (factor -> NUMERO .)
    CORCHETE_DER    reduce using rule 122 (factor -> NUMERO .)
    COMA            reduce using rule 122 (factor -> NUMERO .)
    BREAK           reduce using rule 122 (factor -> NUMERO .)
    LLAVE_DER       reduce using rule 122 (factor -> NUMERO .)
    LLAVE_IZQ       reduce using rule 122 (factor -> NUMERO .)
    RETURN          reduce using rule 122 (factor -> NUMERO .)
    ELSE            reduce using rule 122 (factor -> NUMERO .)
    ELSEIF          reduce using rule 122 (factor -> NUMERO .)


state 20

    (123) factor -> boolean .

    MULTIPLICACION  reduce using rule 123 (factor -> boolean .)
    DIVISION        reduce using rule 123 (factor -> boolean .)
    SUMA            reduce using rule 123 (factor -> boolean .)
    RESTA           reduce using rule 123 (factor -> boolean .)
    VARIABLE        reduce using rule 123 (factor -> boolean .)
    VAR             reduce using rule 123 (factor -> boolean .)
    TIMESTIMES      reduce using rule 123 (factor -> boolean .)
    AMPERSANT       reduce using rule 123 (factor -> boolean .)
    FUNCTION        reduce using rule 123 (factor -> boolean .)
    PRIVATE         reduce using rule 123 (factor -> boolean .)
    PUBLIC          reduce using rule 123 (factor -> boolean .)
    PROTECTED       reduce using rule 123 (factor -> boolean .)
    REQUIRE         reduce using rule 123 (factor -> boolean .)
    INCLUDE         reduce using rule 123 (factor -> boolean .)
    CLASS           reduce using rule 123 (factor -> boolean .)
    IF              reduce using rule 123 (factor -> boolean .)
    SWITCH          reduce using rule 123 (factor -> boolean .)
    CASE            reduce using rule 123 (factor -> boolean .)
    DEFAULT         reduce using rule 123 (factor -> boolean .)
    FOR             reduce using rule 123 (factor -> boolean .)
    WHILE           reduce using rule 123 (factor -> boolean .)
    DO              reduce using rule 123 (factor -> boolean .)
    ALERT           reduce using rule 123 (factor -> boolean .)
    PARENT_IZQ      reduce using rule 123 (factor -> boolean .)
    NUMERO          reduce using rule 123 (factor -> boolean .)
    IDVAR           reduce using rule 123 (factor -> boolean .)
    TRUE            reduce using rule 123 (factor -> boolean .)
    FALSE           reduce using rule 123 (factor -> boolean .)
    ECHO            reduce using rule 123 (factor -> boolean .)
    $end            reduce using rule 123 (factor -> boolean .)
    MENOR           reduce using rule 123 (factor -> boolean .)
    MENOR_IGUAL     reduce using rule 123 (factor -> boolean .)
    MAYOR           reduce using rule 123 (factor -> boolean .)
    MAYOR_IGUAL     reduce using rule 123 (factor -> boolean .)
    DESIGUAL        reduce using rule 123 (factor -> boolean .)
    DISTINTO        reduce using rule 123 (factor -> boolean .)
    ES_IGUAL        reduce using rule 123 (factor -> boolean .)
    PARENT_DER      reduce using rule 123 (factor -> boolean .)
    AND             reduce using rule 123 (factor -> boolean .)
    OR              reduce using rule 123 (factor -> boolean .)
    PUNTOYCOMA      reduce using rule 123 (factor -> boolean .)
    CORCHETE_DER    reduce using rule 123 (factor -> boolean .)
    COMA            reduce using rule 123 (factor -> boolean .)
    BREAK           reduce using rule 123 (factor -> boolean .)
    LLAVE_DER       reduce using rule 123 (factor -> boolean .)
    LLAVE_IZQ       reduce using rule 123 (factor -> boolean .)
    RETURN          reduce using rule 123 (factor -> boolean .)
    ELSE            reduce using rule 123 (factor -> boolean .)
    ELSEIF          reduce using rule 123 (factor -> boolean .)


state 21

    (46) var_declaration -> AMPERSANT . VARIABLE PUNTOYCOMA var_declaration
    (47) var_declaration -> AMPERSANT . VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt
    (48) var_declaration -> AMPERSANT . VARIABLE PUNTOYCOMA

    VARIABLE        shift and go to state 64


state 22

    (50) fun_declaration -> FUNCTION . VARIABLE PARENT_IZQ params PARENT_DER
    (51) fun_declaration -> FUNCTION . VARIABLE PARENT_IZQ params PARENT_DER compount_stmt

    VARIABLE        shift and go to state 65


state 23

    (120) factor -> PARENT_IZQ . expression PARENT_DER
    (89) expression -> . VARIABLE relop NUMERO
    (90) expression -> . simple_expression
    (91) expression -> . VARIABLE IGUAL AMPERSANT VARIABLE
    (92) expression -> . expression AND expression
    (93) expression -> . expression OR expression
    (94) expression -> . additive_expression
    (95) expression -> . alert_stmt
    (98) simple_expression -> . additive_expression relop additive_expression
    (99) simple_expression -> . additive_expression
    (100) simple_expression -> . alert_stmt
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty
    (116) term -> . term mulop factor
    (117) term -> . factor
    (135) empty -> .
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

    VARIABLE        shift and go to state 67
    ALERT           shift and go to state 40
    PARENT_DER      reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    expression                     shift and go to state 66
    simple_expression              shift and go to state 68
    additive_expression            shift and go to state 69
    alert_stmt                     shift and go to state 70
    term                           shift and go to state 15
    empty                          shift and go to state 71
    factor                         shift and go to state 41
    var                            shift and go to state 34
    boolean                        shift and go to state 20

state 24

    (32) area -> PRIVATE .

    CLASS           reduce using rule 32 (area -> PRIVATE .)
    FUNCTION        reduce using rule 32 (area -> PRIVATE .)
    VARIABLE        reduce using rule 32 (area -> PRIVATE .)
    VAR             reduce using rule 32 (area -> PRIVATE .)
    TIMESTIMES      reduce using rule 32 (area -> PRIVATE .)
    AMPERSANT       reduce using rule 32 (area -> PRIVATE .)


state 25

    (33) area -> PUBLIC .

    CLASS           reduce using rule 33 (area -> PUBLIC .)
    FUNCTION        reduce using rule 33 (area -> PUBLIC .)
    VARIABLE        reduce using rule 33 (area -> PUBLIC .)
    VAR             reduce using rule 33 (area -> PUBLIC .)
    TIMESTIMES      reduce using rule 33 (area -> PUBLIC .)
    AMPERSANT       reduce using rule 33 (area -> PUBLIC .)


state 26

    (34) area -> PROTECTED .

    CLASS           reduce using rule 34 (area -> PROTECTED .)
    FUNCTION        reduce using rule 34 (area -> PROTECTED .)
    VARIABLE        reduce using rule 34 (area -> PROTECTED .)
    VAR             reduce using rule 34 (area -> PROTECTED .)
    TIMESTIMES      reduce using rule 34 (area -> PROTECTED .)
    AMPERSANT       reduce using rule 34 (area -> PROTECTED .)


state 27

    (24) header_declaration -> REQUIRE . PARENT_IZQ STRING PARENT_DER PUNTOYCOMA

    PARENT_IZQ      shift and go to state 72


state 28

    (25) header_declaration -> INCLUDE . PARENT_IZQ STRING PARENT_DER PUNTOYCOMA

    PARENT_IZQ      shift and go to state 73


state 29

    (27) class_declaration -> CLASS . VARIABLE LLAVE_IZQ attribute LLAVE_DER

    VARIABLE        shift and go to state 74


state 30

    (124) factor -> IDVAR . PARENT_IZQ args PARENT_DER

    PARENT_IZQ      shift and go to state 75


state 31

    (18) echo_stmt -> empty .
    (23) alert_stmt -> empty .

  ! reduce/reduce conflict for VARIABLE resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for VAR resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for TIMESTIMES resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for AMPERSANT resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for REQUIRE resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for INCLUDE resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for CLASS resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for SWITCH resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for CASE resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for DO resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for ALERT resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for PARENT_IZQ resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for NUMERO resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for IDVAR resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for TRUE resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for FALSE resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for ECHO resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for BREAK resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for PUNTOYCOMA resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for AND resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for OR resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for ELSE resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for LLAVE_IZQ resolved using rule 18 (echo_stmt -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 18 (echo_stmt -> empty .)
    ECHO            reduce using rule 18 (echo_stmt -> empty .)
    VARIABLE        reduce using rule 18 (echo_stmt -> empty .)
    VAR             reduce using rule 18 (echo_stmt -> empty .)
    TIMESTIMES      reduce using rule 18 (echo_stmt -> empty .)
    AMPERSANT       reduce using rule 18 (echo_stmt -> empty .)
    FUNCTION        reduce using rule 18 (echo_stmt -> empty .)
    PRIVATE         reduce using rule 18 (echo_stmt -> empty .)
    PUBLIC          reduce using rule 18 (echo_stmt -> empty .)
    PROTECTED       reduce using rule 18 (echo_stmt -> empty .)
    REQUIRE         reduce using rule 18 (echo_stmt -> empty .)
    INCLUDE         reduce using rule 18 (echo_stmt -> empty .)
    CLASS           reduce using rule 18 (echo_stmt -> empty .)
    IF              reduce using rule 18 (echo_stmt -> empty .)
    SWITCH          reduce using rule 18 (echo_stmt -> empty .)
    CASE            reduce using rule 18 (echo_stmt -> empty .)
    DEFAULT         reduce using rule 18 (echo_stmt -> empty .)
    FOR             reduce using rule 18 (echo_stmt -> empty .)
    WHILE           reduce using rule 18 (echo_stmt -> empty .)
    DO              reduce using rule 18 (echo_stmt -> empty .)
    ALERT           reduce using rule 18 (echo_stmt -> empty .)
    PARENT_IZQ      reduce using rule 18 (echo_stmt -> empty .)
    NUMERO          reduce using rule 18 (echo_stmt -> empty .)
    IDVAR           reduce using rule 18 (echo_stmt -> empty .)
    TRUE            reduce using rule 18 (echo_stmt -> empty .)
    FALSE           reduce using rule 18 (echo_stmt -> empty .)
    $end            reduce using rule 18 (echo_stmt -> empty .)
    BREAK           reduce using rule 18 (echo_stmt -> empty .)
    PUNTOYCOMA      reduce using rule 18 (echo_stmt -> empty .)
    ELSE            reduce using rule 18 (echo_stmt -> empty .)
    ELSEIF          reduce using rule 18 (echo_stmt -> empty .)
    LLAVE_DER       reduce using rule 18 (echo_stmt -> empty .)
    LLAVE_IZQ       reduce using rule 18 (echo_stmt -> empty .)
    RETURN          reduce using rule 18 (echo_stmt -> empty .)
    AND             reduce using rule 18 (echo_stmt -> empty .)
    OR              reduce using rule 18 (echo_stmt -> empty .)

  ! VARIABLE        [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! VAR             [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! TIMESTIMES      [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! AMPERSANT       [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! FUNCTION        [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! PRIVATE         [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! PUBLIC          [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! PROTECTED       [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! REQUIRE         [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! INCLUDE         [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! CLASS           [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! IF              [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! SWITCH          [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! CASE            [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! DEFAULT         [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! FOR             [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! WHILE           [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! DO              [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! ALERT           [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! PARENT_IZQ      [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! NUMERO          [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! IDVAR           [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! TRUE            [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! FALSE           [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! ECHO            [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! $end            [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! BREAK           [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! PUNTOYCOMA      [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! AND             [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! OR              [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! ELSE            [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! ELSEIF          [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! LLAVE_DER       [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! LLAVE_IZQ       [ reduce using rule 23 (alert_stmt -> empty .) ]
  ! RETURN          [ reduce using rule 23 (alert_stmt -> empty .) ]


state 32

    (77) selection_stmt -> IF . PARENT_IZQ expression PARENT_DER statement
    (78) selection_stmt -> IF . PARENT_IZQ expression PARENT_DER statement selection

    PARENT_IZQ      shift and go to state 76


state 33

    (81) selection_stmt -> SWITCH . PARENT_IZQ var PARENT_DER statement

    PARENT_IZQ      shift and go to state 77


state 34

    (121) factor -> var .

    MULTIPLICACION  reduce using rule 121 (factor -> var .)
    DIVISION        reduce using rule 121 (factor -> var .)
    SUMA            reduce using rule 121 (factor -> var .)
    RESTA           reduce using rule 121 (factor -> var .)
    VARIABLE        reduce using rule 121 (factor -> var .)
    VAR             reduce using rule 121 (factor -> var .)
    TIMESTIMES      reduce using rule 121 (factor -> var .)
    AMPERSANT       reduce using rule 121 (factor -> var .)
    FUNCTION        reduce using rule 121 (factor -> var .)
    PRIVATE         reduce using rule 121 (factor -> var .)
    PUBLIC          reduce using rule 121 (factor -> var .)
    PROTECTED       reduce using rule 121 (factor -> var .)
    REQUIRE         reduce using rule 121 (factor -> var .)
    INCLUDE         reduce using rule 121 (factor -> var .)
    CLASS           reduce using rule 121 (factor -> var .)
    IF              reduce using rule 121 (factor -> var .)
    SWITCH          reduce using rule 121 (factor -> var .)
    CASE            reduce using rule 121 (factor -> var .)
    DEFAULT         reduce using rule 121 (factor -> var .)
    FOR             reduce using rule 121 (factor -> var .)
    WHILE           reduce using rule 121 (factor -> var .)
    DO              reduce using rule 121 (factor -> var .)
    ALERT           reduce using rule 121 (factor -> var .)
    PARENT_IZQ      reduce using rule 121 (factor -> var .)
    NUMERO          reduce using rule 121 (factor -> var .)
    IDVAR           reduce using rule 121 (factor -> var .)
    TRUE            reduce using rule 121 (factor -> var .)
    FALSE           reduce using rule 121 (factor -> var .)
    ECHO            reduce using rule 121 (factor -> var .)
    $end            reduce using rule 121 (factor -> var .)
    MENOR           reduce using rule 121 (factor -> var .)
    MENOR_IGUAL     reduce using rule 121 (factor -> var .)
    MAYOR           reduce using rule 121 (factor -> var .)
    MAYOR_IGUAL     reduce using rule 121 (factor -> var .)
    DESIGUAL        reduce using rule 121 (factor -> var .)
    DISTINTO        reduce using rule 121 (factor -> var .)
    ES_IGUAL        reduce using rule 121 (factor -> var .)
    PARENT_DER      reduce using rule 121 (factor -> var .)
    AND             reduce using rule 121 (factor -> var .)
    OR              reduce using rule 121 (factor -> var .)
    PUNTOYCOMA      reduce using rule 121 (factor -> var .)
    CORCHETE_DER    reduce using rule 121 (factor -> var .)
    COMA            reduce using rule 121 (factor -> var .)
    BREAK           reduce using rule 121 (factor -> var .)
    LLAVE_DER       reduce using rule 121 (factor -> var .)
    LLAVE_IZQ       reduce using rule 121 (factor -> var .)
    RETURN          reduce using rule 121 (factor -> var .)
    ELSE            reduce using rule 121 (factor -> var .)
    ELSEIF          reduce using rule 121 (factor -> var .)


state 35

    (82) selection_stmt -> CASE . NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA

    NUMERO          shift and go to state 78


state 36

    (83) selection_stmt -> DEFAULT . DOS_PUNTOS statement BREAK PUNTOYCOMA

    DOS_PUNTOS      shift and go to state 79


state 37

    (84) iteration_stmt -> FOR . PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement

    PARENT_IZQ      shift and go to state 80


state 38

    (85) iteration_stmt -> WHILE . PARENT_IZQ expression PARENT_DER statement

    PARENT_IZQ      shift and go to state 81


state 39

    (86) iteration_stmt -> DO . LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER

    LLAVE_IZQ       shift and go to state 82


state 40

    (22) alert_stmt -> ALERT . PARENT_IZQ STRING PARENT_DER PUNTOYCOMA

    PARENT_IZQ      shift and go to state 83


state 41

    (117) term -> factor .

    MULTIPLICACION  reduce using rule 117 (term -> factor .)
    DIVISION        reduce using rule 117 (term -> factor .)
    SUMA            reduce using rule 117 (term -> factor .)
    RESTA           reduce using rule 117 (term -> factor .)
    VARIABLE        reduce using rule 117 (term -> factor .)
    VAR             reduce using rule 117 (term -> factor .)
    TIMESTIMES      reduce using rule 117 (term -> factor .)
    AMPERSANT       reduce using rule 117 (term -> factor .)
    FUNCTION        reduce using rule 117 (term -> factor .)
    PRIVATE         reduce using rule 117 (term -> factor .)
    PUBLIC          reduce using rule 117 (term -> factor .)
    PROTECTED       reduce using rule 117 (term -> factor .)
    REQUIRE         reduce using rule 117 (term -> factor .)
    INCLUDE         reduce using rule 117 (term -> factor .)
    CLASS           reduce using rule 117 (term -> factor .)
    IF              reduce using rule 117 (term -> factor .)
    SWITCH          reduce using rule 117 (term -> factor .)
    CASE            reduce using rule 117 (term -> factor .)
    DEFAULT         reduce using rule 117 (term -> factor .)
    FOR             reduce using rule 117 (term -> factor .)
    WHILE           reduce using rule 117 (term -> factor .)
    DO              reduce using rule 117 (term -> factor .)
    ALERT           reduce using rule 117 (term -> factor .)
    PARENT_IZQ      reduce using rule 117 (term -> factor .)
    NUMERO          reduce using rule 117 (term -> factor .)
    IDVAR           reduce using rule 117 (term -> factor .)
    TRUE            reduce using rule 117 (term -> factor .)
    FALSE           reduce using rule 117 (term -> factor .)
    ECHO            reduce using rule 117 (term -> factor .)
    $end            reduce using rule 117 (term -> factor .)
    MENOR           reduce using rule 117 (term -> factor .)
    MENOR_IGUAL     reduce using rule 117 (term -> factor .)
    MAYOR           reduce using rule 117 (term -> factor .)
    MAYOR_IGUAL     reduce using rule 117 (term -> factor .)
    DESIGUAL        reduce using rule 117 (term -> factor .)
    DISTINTO        reduce using rule 117 (term -> factor .)
    ES_IGUAL        reduce using rule 117 (term -> factor .)
    PARENT_DER      reduce using rule 117 (term -> factor .)
    AND             reduce using rule 117 (term -> factor .)
    OR              reduce using rule 117 (term -> factor .)
    PUNTOYCOMA      reduce using rule 117 (term -> factor .)
    CORCHETE_DER    reduce using rule 117 (term -> factor .)
    COMA            reduce using rule 117 (term -> factor .)
    BREAK           reduce using rule 117 (term -> factor .)
    LLAVE_DER       reduce using rule 117 (term -> factor .)
    LLAVE_IZQ       reduce using rule 117 (term -> factor .)
    RETURN          reduce using rule 117 (term -> factor .)
    ELSE            reduce using rule 117 (term -> factor .)
    ELSEIF          reduce using rule 117 (term -> factor .)


state 42

    (130) boolean -> TRUE .

    MULTIPLICACION  reduce using rule 130 (boolean -> TRUE .)
    DIVISION        reduce using rule 130 (boolean -> TRUE .)
    SUMA            reduce using rule 130 (boolean -> TRUE .)
    RESTA           reduce using rule 130 (boolean -> TRUE .)
    VARIABLE        reduce using rule 130 (boolean -> TRUE .)
    VAR             reduce using rule 130 (boolean -> TRUE .)
    TIMESTIMES      reduce using rule 130 (boolean -> TRUE .)
    AMPERSANT       reduce using rule 130 (boolean -> TRUE .)
    FUNCTION        reduce using rule 130 (boolean -> TRUE .)
    PRIVATE         reduce using rule 130 (boolean -> TRUE .)
    PUBLIC          reduce using rule 130 (boolean -> TRUE .)
    PROTECTED       reduce using rule 130 (boolean -> TRUE .)
    REQUIRE         reduce using rule 130 (boolean -> TRUE .)
    INCLUDE         reduce using rule 130 (boolean -> TRUE .)
    CLASS           reduce using rule 130 (boolean -> TRUE .)
    IF              reduce using rule 130 (boolean -> TRUE .)
    SWITCH          reduce using rule 130 (boolean -> TRUE .)
    CASE            reduce using rule 130 (boolean -> TRUE .)
    DEFAULT         reduce using rule 130 (boolean -> TRUE .)
    FOR             reduce using rule 130 (boolean -> TRUE .)
    WHILE           reduce using rule 130 (boolean -> TRUE .)
    DO              reduce using rule 130 (boolean -> TRUE .)
    ALERT           reduce using rule 130 (boolean -> TRUE .)
    PARENT_IZQ      reduce using rule 130 (boolean -> TRUE .)
    NUMERO          reduce using rule 130 (boolean -> TRUE .)
    IDVAR           reduce using rule 130 (boolean -> TRUE .)
    TRUE            reduce using rule 130 (boolean -> TRUE .)
    FALSE           reduce using rule 130 (boolean -> TRUE .)
    ECHO            reduce using rule 130 (boolean -> TRUE .)
    $end            reduce using rule 130 (boolean -> TRUE .)
    MENOR           reduce using rule 130 (boolean -> TRUE .)
    MENOR_IGUAL     reduce using rule 130 (boolean -> TRUE .)
    MAYOR           reduce using rule 130 (boolean -> TRUE .)
    MAYOR_IGUAL     reduce using rule 130 (boolean -> TRUE .)
    DESIGUAL        reduce using rule 130 (boolean -> TRUE .)
    DISTINTO        reduce using rule 130 (boolean -> TRUE .)
    ES_IGUAL        reduce using rule 130 (boolean -> TRUE .)
    PARENT_DER      reduce using rule 130 (boolean -> TRUE .)
    AND             reduce using rule 130 (boolean -> TRUE .)
    OR              reduce using rule 130 (boolean -> TRUE .)
    PUNTOYCOMA      reduce using rule 130 (boolean -> TRUE .)
    CORCHETE_DER    reduce using rule 130 (boolean -> TRUE .)
    COMA            reduce using rule 130 (boolean -> TRUE .)
    BREAK           reduce using rule 130 (boolean -> TRUE .)
    LLAVE_DER       reduce using rule 130 (boolean -> TRUE .)
    LLAVE_IZQ       reduce using rule 130 (boolean -> TRUE .)
    RETURN          reduce using rule 130 (boolean -> TRUE .)
    ELSE            reduce using rule 130 (boolean -> TRUE .)
    ELSEIF          reduce using rule 130 (boolean -> TRUE .)


state 43

    (131) boolean -> FALSE .

    MULTIPLICACION  reduce using rule 131 (boolean -> FALSE .)
    DIVISION        reduce using rule 131 (boolean -> FALSE .)
    SUMA            reduce using rule 131 (boolean -> FALSE .)
    RESTA           reduce using rule 131 (boolean -> FALSE .)
    VARIABLE        reduce using rule 131 (boolean -> FALSE .)
    VAR             reduce using rule 131 (boolean -> FALSE .)
    TIMESTIMES      reduce using rule 131 (boolean -> FALSE .)
    AMPERSANT       reduce using rule 131 (boolean -> FALSE .)
    FUNCTION        reduce using rule 131 (boolean -> FALSE .)
    PRIVATE         reduce using rule 131 (boolean -> FALSE .)
    PUBLIC          reduce using rule 131 (boolean -> FALSE .)
    PROTECTED       reduce using rule 131 (boolean -> FALSE .)
    REQUIRE         reduce using rule 131 (boolean -> FALSE .)
    INCLUDE         reduce using rule 131 (boolean -> FALSE .)
    CLASS           reduce using rule 131 (boolean -> FALSE .)
    IF              reduce using rule 131 (boolean -> FALSE .)
    SWITCH          reduce using rule 131 (boolean -> FALSE .)
    CASE            reduce using rule 131 (boolean -> FALSE .)
    DEFAULT         reduce using rule 131 (boolean -> FALSE .)
    FOR             reduce using rule 131 (boolean -> FALSE .)
    WHILE           reduce using rule 131 (boolean -> FALSE .)
    DO              reduce using rule 131 (boolean -> FALSE .)
    ALERT           reduce using rule 131 (boolean -> FALSE .)
    PARENT_IZQ      reduce using rule 131 (boolean -> FALSE .)
    NUMERO          reduce using rule 131 (boolean -> FALSE .)
    IDVAR           reduce using rule 131 (boolean -> FALSE .)
    TRUE            reduce using rule 131 (boolean -> FALSE .)
    FALSE           reduce using rule 131 (boolean -> FALSE .)
    ECHO            reduce using rule 131 (boolean -> FALSE .)
    $end            reduce using rule 131 (boolean -> FALSE .)
    MENOR           reduce using rule 131 (boolean -> FALSE .)
    MENOR_IGUAL     reduce using rule 131 (boolean -> FALSE .)
    MAYOR           reduce using rule 131 (boolean -> FALSE .)
    MAYOR_IGUAL     reduce using rule 131 (boolean -> FALSE .)
    DESIGUAL        reduce using rule 131 (boolean -> FALSE .)
    DISTINTO        reduce using rule 131 (boolean -> FALSE .)
    ES_IGUAL        reduce using rule 131 (boolean -> FALSE .)
    PARENT_DER      reduce using rule 131 (boolean -> FALSE .)
    AND             reduce using rule 131 (boolean -> FALSE .)
    OR              reduce using rule 131 (boolean -> FALSE .)
    PUNTOYCOMA      reduce using rule 131 (boolean -> FALSE .)
    CORCHETE_DER    reduce using rule 131 (boolean -> FALSE .)
    COMA            reduce using rule 131 (boolean -> FALSE .)
    BREAK           reduce using rule 131 (boolean -> FALSE .)
    LLAVE_DER       reduce using rule 131 (boolean -> FALSE .)
    LLAVE_IZQ       reduce using rule 131 (boolean -> FALSE .)
    RETURN          reduce using rule 131 (boolean -> FALSE .)
    ELSE            reduce using rule 131 (boolean -> FALSE .)
    ELSEIF          reduce using rule 131 (boolean -> FALSE .)


state 44

    (2) declaration_list -> declaration_list declaration .

    VARIABLE        reduce using rule 2 (declaration_list -> declaration_list declaration .)
    VAR             reduce using rule 2 (declaration_list -> declaration_list declaration .)
    TIMESTIMES      reduce using rule 2 (declaration_list -> declaration_list declaration .)
    AMPERSANT       reduce using rule 2 (declaration_list -> declaration_list declaration .)
    FUNCTION        reduce using rule 2 (declaration_list -> declaration_list declaration .)
    PRIVATE         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    PUBLIC          reduce using rule 2 (declaration_list -> declaration_list declaration .)
    PROTECTED       reduce using rule 2 (declaration_list -> declaration_list declaration .)
    REQUIRE         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    INCLUDE         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    CLASS           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 2 (declaration_list -> declaration_list declaration .)
    SWITCH          reduce using rule 2 (declaration_list -> declaration_list declaration .)
    CASE            reduce using rule 2 (declaration_list -> declaration_list declaration .)
    DEFAULT         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 2 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    DO              reduce using rule 2 (declaration_list -> declaration_list declaration .)
    ALERT           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    PARENT_IZQ      reduce using rule 2 (declaration_list -> declaration_list declaration .)
    NUMERO          reduce using rule 2 (declaration_list -> declaration_list declaration .)
    IDVAR           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    TRUE            reduce using rule 2 (declaration_list -> declaration_list declaration .)
    FALSE           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    ECHO            reduce using rule 2 (declaration_list -> declaration_list declaration .)
    $end            reduce using rule 2 (declaration_list -> declaration_list declaration .)


state 45

    (15) declaration -> additive_expression .
    (108) additive_expression -> additive_expression . addop term
    (114) addop -> . SUMA
    (115) addop -> . RESTA

    VARIABLE        reduce using rule 15 (declaration -> additive_expression .)
    VAR             reduce using rule 15 (declaration -> additive_expression .)
    TIMESTIMES      reduce using rule 15 (declaration -> additive_expression .)
    AMPERSANT       reduce using rule 15 (declaration -> additive_expression .)
    FUNCTION        reduce using rule 15 (declaration -> additive_expression .)
    PRIVATE         reduce using rule 15 (declaration -> additive_expression .)
    PUBLIC          reduce using rule 15 (declaration -> additive_expression .)
    PROTECTED       reduce using rule 15 (declaration -> additive_expression .)
    REQUIRE         reduce using rule 15 (declaration -> additive_expression .)
    INCLUDE         reduce using rule 15 (declaration -> additive_expression .)
    CLASS           reduce using rule 15 (declaration -> additive_expression .)
    IF              reduce using rule 15 (declaration -> additive_expression .)
    SWITCH          reduce using rule 15 (declaration -> additive_expression .)
    CASE            reduce using rule 15 (declaration -> additive_expression .)
    DEFAULT         reduce using rule 15 (declaration -> additive_expression .)
    FOR             reduce using rule 15 (declaration -> additive_expression .)
    WHILE           reduce using rule 15 (declaration -> additive_expression .)
    DO              reduce using rule 15 (declaration -> additive_expression .)
    ALERT           reduce using rule 15 (declaration -> additive_expression .)
    PARENT_IZQ      reduce using rule 15 (declaration -> additive_expression .)
    NUMERO          reduce using rule 15 (declaration -> additive_expression .)
    IDVAR           reduce using rule 15 (declaration -> additive_expression .)
    TRUE            reduce using rule 15 (declaration -> additive_expression .)
    FALSE           reduce using rule 15 (declaration -> additive_expression .)
    ECHO            reduce using rule 15 (declaration -> additive_expression .)
    $end            reduce using rule 15 (declaration -> additive_expression .)
    SUMA            shift and go to state 48
    RESTA           shift and go to state 49

    addop                          shift and go to state 47

state 46

    (35) var_declaration -> VARIABLE . PUNTOYCOMA var_declaration
    (37) var_declaration -> VARIABLE . PUNTOYCOMA
    (40) var_declaration -> VARIABLE . IGUAL NUMERO PUNTOYCOMA var_declaration
    (41) var_declaration -> VARIABLE . IGUAL NUMERO PUNTOYCOMA
    (42) var_declaration -> VARIABLE . IGUAL boolean PUNTOYCOMA var_declaration
    (43) var_declaration -> VARIABLE . IGUAL boolean PUNTOYCOMA
    (44) var_declaration -> VARIABLE . IGUAL VARIABLE PUNTOYCOMA var_declaration
    (45) var_declaration -> VARIABLE . IGUAL VARIABLE PUNTOYCOMA
    (49) var_declaration -> VARIABLE . IGUAL simple_expression PUNTOYCOMA
    (132) typeclass -> VARIABLE . IDVAR IGUAL NEW constructor PUNTOYCOMA
    (110) additive_expression -> VARIABLE . DECREMENTO PUNTOYCOMA
    (111) additive_expression -> VARIABLE . INCREMENTO PUNTOYCOMA
    (112) additive_expression -> VARIABLE . DECREMENTO
    (113) additive_expression -> VARIABLE . INCREMENTO
    (96) var -> VARIABLE .
    (97) var -> VARIABLE . CORCHETE_IZQ expression CORCHETE_DER

  ! shift/reduce conflict for IDVAR resolved as shift
    PUNTOYCOMA      shift and go to state 57
    IGUAL           shift and go to state 59
    IDVAR           shift and go to state 60
    DECREMENTO      shift and go to state 56
    INCREMENTO      shift and go to state 58
    MULTIPLICACION  reduce using rule 96 (var -> VARIABLE .)
    DIVISION        reduce using rule 96 (var -> VARIABLE .)
    SUMA            reduce using rule 96 (var -> VARIABLE .)
    RESTA           reduce using rule 96 (var -> VARIABLE .)
    VARIABLE        reduce using rule 96 (var -> VARIABLE .)
    VAR             reduce using rule 96 (var -> VARIABLE .)
    TIMESTIMES      reduce using rule 96 (var -> VARIABLE .)
    AMPERSANT       reduce using rule 96 (var -> VARIABLE .)
    FUNCTION        reduce using rule 96 (var -> VARIABLE .)
    PRIVATE         reduce using rule 96 (var -> VARIABLE .)
    PUBLIC          reduce using rule 96 (var -> VARIABLE .)
    PROTECTED       reduce using rule 96 (var -> VARIABLE .)
    REQUIRE         reduce using rule 96 (var -> VARIABLE .)
    INCLUDE         reduce using rule 96 (var -> VARIABLE .)
    CLASS           reduce using rule 96 (var -> VARIABLE .)
    IF              reduce using rule 96 (var -> VARIABLE .)
    SWITCH          reduce using rule 96 (var -> VARIABLE .)
    CASE            reduce using rule 96 (var -> VARIABLE .)
    DEFAULT         reduce using rule 96 (var -> VARIABLE .)
    FOR             reduce using rule 96 (var -> VARIABLE .)
    WHILE           reduce using rule 96 (var -> VARIABLE .)
    DO              reduce using rule 96 (var -> VARIABLE .)
    ALERT           reduce using rule 96 (var -> VARIABLE .)
    PARENT_IZQ      reduce using rule 96 (var -> VARIABLE .)
    NUMERO          reduce using rule 96 (var -> VARIABLE .)
    TRUE            reduce using rule 96 (var -> VARIABLE .)
    FALSE           reduce using rule 96 (var -> VARIABLE .)
    ECHO            reduce using rule 96 (var -> VARIABLE .)
    $end            reduce using rule 96 (var -> VARIABLE .)
    CORCHETE_IZQ    shift and go to state 61

  ! IDVAR           [ reduce using rule 96 (var -> VARIABLE .) ]


state 47

    (108) additive_expression -> additive_expression addop . term
    (116) term -> . term mulop factor
    (117) term -> . factor
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    VARIABLE        shift and go to state 85
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    term                           shift and go to state 84
    factor                         shift and go to state 41
    var                            shift and go to state 34
    boolean                        shift and go to state 20

state 48

    (114) addop -> SUMA .

    PARENT_IZQ      reduce using rule 114 (addop -> SUMA .)
    NUMERO          reduce using rule 114 (addop -> SUMA .)
    IDVAR           reduce using rule 114 (addop -> SUMA .)
    VARIABLE        reduce using rule 114 (addop -> SUMA .)
    TRUE            reduce using rule 114 (addop -> SUMA .)
    FALSE           reduce using rule 114 (addop -> SUMA .)


state 49

    (115) addop -> RESTA .

    PARENT_IZQ      reduce using rule 115 (addop -> RESTA .)
    NUMERO          reduce using rule 115 (addop -> RESTA .)
    IDVAR           reduce using rule 115 (addop -> RESTA .)
    VARIABLE        reduce using rule 115 (addop -> RESTA .)
    TRUE            reduce using rule 115 (addop -> RESTA .)
    FALSE           reduce using rule 115 (addop -> RESTA .)


state 50

    (7) declaration -> area fun_declaration .

    VARIABLE        reduce using rule 7 (declaration -> area fun_declaration .)
    VAR             reduce using rule 7 (declaration -> area fun_declaration .)
    TIMESTIMES      reduce using rule 7 (declaration -> area fun_declaration .)
    AMPERSANT       reduce using rule 7 (declaration -> area fun_declaration .)
    FUNCTION        reduce using rule 7 (declaration -> area fun_declaration .)
    PRIVATE         reduce using rule 7 (declaration -> area fun_declaration .)
    PUBLIC          reduce using rule 7 (declaration -> area fun_declaration .)
    PROTECTED       reduce using rule 7 (declaration -> area fun_declaration .)
    REQUIRE         reduce using rule 7 (declaration -> area fun_declaration .)
    INCLUDE         reduce using rule 7 (declaration -> area fun_declaration .)
    CLASS           reduce using rule 7 (declaration -> area fun_declaration .)
    IF              reduce using rule 7 (declaration -> area fun_declaration .)
    SWITCH          reduce using rule 7 (declaration -> area fun_declaration .)
    CASE            reduce using rule 7 (declaration -> area fun_declaration .)
    DEFAULT         reduce using rule 7 (declaration -> area fun_declaration .)
    FOR             reduce using rule 7 (declaration -> area fun_declaration .)
    WHILE           reduce using rule 7 (declaration -> area fun_declaration .)
    DO              reduce using rule 7 (declaration -> area fun_declaration .)
    ALERT           reduce using rule 7 (declaration -> area fun_declaration .)
    PARENT_IZQ      reduce using rule 7 (declaration -> area fun_declaration .)
    NUMERO          reduce using rule 7 (declaration -> area fun_declaration .)
    IDVAR           reduce using rule 7 (declaration -> area fun_declaration .)
    TRUE            reduce using rule 7 (declaration -> area fun_declaration .)
    FALSE           reduce using rule 7 (declaration -> area fun_declaration .)
    ECHO            reduce using rule 7 (declaration -> area fun_declaration .)
    $end            reduce using rule 7 (declaration -> area fun_declaration .)


state 51

    (26) class_declaration -> area CLASS . VARIABLE LLAVE_IZQ attribute LLAVE_DER

    VARIABLE        shift and go to state 86


state 52

    (16) echo_stmt -> echo_stmt ECHO . STRING PUNTOYCOMA
    (17) echo_stmt -> echo_stmt ECHO . IDVAR PUNTOYCOMA
    (19) echo_stmt -> echo_stmt ECHO . NUMERO PUNTOYCOMA
    (20) echo_stmt -> echo_stmt ECHO . boolean PUNTOYCOMA
    (21) echo_stmt -> echo_stmt ECHO . fun_declaration PUNTOYCOMA
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE
    (50) fun_declaration -> . FUNCTION VARIABLE PARENT_IZQ params PARENT_DER
    (51) fun_declaration -> . FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt

    STRING          shift and go to state 87
    IDVAR           shift and go to state 88
    NUMERO          shift and go to state 89
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    FUNCTION        shift and go to state 22

    boolean                        shift and go to state 90
    fun_declaration                shift and go to state 91

state 53

    (116) term -> term mulop . factor
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    VARIABLE        shift and go to state 85
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    factor                         shift and go to state 92
    var                            shift and go to state 34
    boolean                        shift and go to state 20

state 54

    (118) mulop -> MULTIPLICACION .

    PARENT_IZQ      reduce using rule 118 (mulop -> MULTIPLICACION .)
    NUMERO          reduce using rule 118 (mulop -> MULTIPLICACION .)
    IDVAR           reduce using rule 118 (mulop -> MULTIPLICACION .)
    VARIABLE        reduce using rule 118 (mulop -> MULTIPLICACION .)
    TRUE            reduce using rule 118 (mulop -> MULTIPLICACION .)
    FALSE           reduce using rule 118 (mulop -> MULTIPLICACION .)


state 55

    (119) mulop -> DIVISION .

    PARENT_IZQ      reduce using rule 119 (mulop -> DIVISION .)
    NUMERO          reduce using rule 119 (mulop -> DIVISION .)
    IDVAR           reduce using rule 119 (mulop -> DIVISION .)
    VARIABLE        reduce using rule 119 (mulop -> DIVISION .)
    TRUE            reduce using rule 119 (mulop -> DIVISION .)
    FALSE           reduce using rule 119 (mulop -> DIVISION .)


state 56

    (110) additive_expression -> VARIABLE DECREMENTO . PUNTOYCOMA
    (112) additive_expression -> VARIABLE DECREMENTO .

  ! shift/reduce conflict for PUNTOYCOMA resolved as shift
    PUNTOYCOMA      shift and go to state 93
    SUMA            reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    RESTA           reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    VARIABLE        reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    VAR             reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    TIMESTIMES      reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    AMPERSANT       reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    FUNCTION        reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    PRIVATE         reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    PUBLIC          reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    PROTECTED       reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    REQUIRE         reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    INCLUDE         reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    CLASS           reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    IF              reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    SWITCH          reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    CASE            reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    DEFAULT         reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    FOR             reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    WHILE           reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    DO              reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    ALERT           reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    PARENT_IZQ      reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    NUMERO          reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    IDVAR           reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    TRUE            reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    FALSE           reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    ECHO            reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    $end            reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    MENOR           reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    MENOR_IGUAL     reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    MAYOR           reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    MAYOR_IGUAL     reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    DESIGUAL        reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    DISTINTO        reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    ES_IGUAL        reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    PARENT_DER      reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    AND             reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    OR              reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    CORCHETE_DER    reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    COMA            reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    BREAK           reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    LLAVE_DER       reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    LLAVE_IZQ       reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    RETURN          reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    ELSE            reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)
    ELSEIF          reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .)

  ! PUNTOYCOMA      [ reduce using rule 112 (additive_expression -> VARIABLE DECREMENTO .) ]


state 57

    (35) var_declaration -> VARIABLE PUNTOYCOMA . var_declaration
    (37) var_declaration -> VARIABLE PUNTOYCOMA .
    (35) var_declaration -> . VARIABLE PUNTOYCOMA var_declaration
    (36) var_declaration -> . VAR VARIABLE IGUAL simple_expression
    (37) var_declaration -> . VARIABLE PUNTOYCOMA
    (38) var_declaration -> . TIMESTIMES VARIABLE PUNTOYCOMA
    (39) var_declaration -> . TIMESTIMES VARIABLE PUNTOYCOMA var_declaration
    (40) var_declaration -> . VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration
    (41) var_declaration -> . VARIABLE IGUAL NUMERO PUNTOYCOMA
    (42) var_declaration -> . VARIABLE IGUAL boolean PUNTOYCOMA var_declaration
    (43) var_declaration -> . VARIABLE IGUAL boolean PUNTOYCOMA
    (44) var_declaration -> . VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration
    (45) var_declaration -> . VARIABLE IGUAL VARIABLE PUNTOYCOMA
    (46) var_declaration -> . AMPERSANT VARIABLE PUNTOYCOMA var_declaration
    (47) var_declaration -> . AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt
    (48) var_declaration -> . AMPERSANT VARIABLE PUNTOYCOMA
    (49) var_declaration -> . VARIABLE IGUAL simple_expression PUNTOYCOMA

    VARIABLE        reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    VAR             reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    TIMESTIMES      reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    AMPERSANT       reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    FUNCTION        reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    PRIVATE         reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    PUBLIC          reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    PROTECTED       reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    REQUIRE         reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    INCLUDE         reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    CLASS           reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    IF              reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    SWITCH          reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    CASE            reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    DEFAULT         reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    FOR             reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    WHILE           reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    DO              reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    ALERT           reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    PARENT_IZQ      reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    NUMERO          reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    IDVAR           reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    TRUE            reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    FALSE           reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    ECHO            reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    $end            reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    PUNTOYCOMA      reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    LLAVE_DER       reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    LLAVE_IZQ       reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    RETURN          reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    AND             reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)
    OR              reduce using rule 37 (var_declaration -> VARIABLE PUNTOYCOMA .)

  ! VARIABLE        [ shift and go to state 94 ]
  ! VAR             [ shift and go to state 17 ]
  ! TIMESTIMES      [ shift and go to state 18 ]
  ! AMPERSANT       [ shift and go to state 21 ]

    var_declaration                shift and go to state 95

state 58

    (111) additive_expression -> VARIABLE INCREMENTO . PUNTOYCOMA
    (113) additive_expression -> VARIABLE INCREMENTO .

  ! shift/reduce conflict for PUNTOYCOMA resolved as shift
    PUNTOYCOMA      shift and go to state 96
    SUMA            reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    RESTA           reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    VARIABLE        reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    VAR             reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    TIMESTIMES      reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    AMPERSANT       reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    FUNCTION        reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    PRIVATE         reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    PUBLIC          reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    PROTECTED       reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    REQUIRE         reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    INCLUDE         reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    CLASS           reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    IF              reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    SWITCH          reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    CASE            reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    DEFAULT         reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    FOR             reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    WHILE           reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    DO              reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    ALERT           reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    PARENT_IZQ      reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    NUMERO          reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    IDVAR           reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    TRUE            reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    FALSE           reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    ECHO            reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    $end            reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    MENOR           reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    MENOR_IGUAL     reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    MAYOR           reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    MAYOR_IGUAL     reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    DESIGUAL        reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    DISTINTO        reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    ES_IGUAL        reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    PARENT_DER      reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    AND             reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    OR              reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    CORCHETE_DER    reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    COMA            reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    BREAK           reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    LLAVE_DER       reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    LLAVE_IZQ       reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    RETURN          reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    ELSE            reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)
    ELSEIF          reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .)

  ! PUNTOYCOMA      [ reduce using rule 113 (additive_expression -> VARIABLE INCREMENTO .) ]


state 59

    (40) var_declaration -> VARIABLE IGUAL . NUMERO PUNTOYCOMA var_declaration
    (41) var_declaration -> VARIABLE IGUAL . NUMERO PUNTOYCOMA
    (42) var_declaration -> VARIABLE IGUAL . boolean PUNTOYCOMA var_declaration
    (43) var_declaration -> VARIABLE IGUAL . boolean PUNTOYCOMA
    (44) var_declaration -> VARIABLE IGUAL . VARIABLE PUNTOYCOMA var_declaration
    (45) var_declaration -> VARIABLE IGUAL . VARIABLE PUNTOYCOMA
    (49) var_declaration -> VARIABLE IGUAL . simple_expression PUNTOYCOMA
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE
    (98) simple_expression -> . additive_expression relop additive_expression
    (99) simple_expression -> . additive_expression
    (100) simple_expression -> . alert_stmt
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty
    (116) term -> . term mulop factor
    (117) term -> . factor
    (135) empty -> .
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER

    NUMERO          shift and go to state 98
    VARIABLE        shift and go to state 97
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ALERT           shift and go to state 40
    PUNTOYCOMA      reduce using rule 135 (empty -> .)
    PARENT_IZQ      shift and go to state 23
    IDVAR           shift and go to state 30

    boolean                        shift and go to state 99
    simple_expression              shift and go to state 100
    additive_expression            shift and go to state 101
    alert_stmt                     shift and go to state 102
    term                           shift and go to state 15
    empty                          shift and go to state 71
    factor                         shift and go to state 41
    var                            shift and go to state 34

state 60

    (132) typeclass -> VARIABLE IDVAR . IGUAL NEW constructor PUNTOYCOMA

    IGUAL           shift and go to state 103


state 61

    (97) var -> VARIABLE CORCHETE_IZQ . expression CORCHETE_DER
    (89) expression -> . VARIABLE relop NUMERO
    (90) expression -> . simple_expression
    (91) expression -> . VARIABLE IGUAL AMPERSANT VARIABLE
    (92) expression -> . expression AND expression
    (93) expression -> . expression OR expression
    (94) expression -> . additive_expression
    (95) expression -> . alert_stmt
    (98) simple_expression -> . additive_expression relop additive_expression
    (99) simple_expression -> . additive_expression
    (100) simple_expression -> . alert_stmt
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty
    (116) term -> . term mulop factor
    (117) term -> . factor
    (135) empty -> .
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

    VARIABLE        shift and go to state 67
    ALERT           shift and go to state 40
    CORCHETE_DER    reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    expression                     shift and go to state 104
    simple_expression              shift and go to state 68
    additive_expression            shift and go to state 69
    alert_stmt                     shift and go to state 70
    term                           shift and go to state 15
    empty                          shift and go to state 71
    factor                         shift and go to state 41
    var                            shift and go to state 34
    boolean                        shift and go to state 20

state 62

    (36) var_declaration -> VAR VARIABLE . IGUAL simple_expression

    IGUAL           shift and go to state 105


state 63

    (38) var_declaration -> TIMESTIMES VARIABLE . PUNTOYCOMA
    (39) var_declaration -> TIMESTIMES VARIABLE . PUNTOYCOMA var_declaration

    PUNTOYCOMA      shift and go to state 106


state 64

    (46) var_declaration -> AMPERSANT VARIABLE . PUNTOYCOMA var_declaration
    (47) var_declaration -> AMPERSANT VARIABLE . IGUAL VARIABLE PUNTOYCOMA selection_stmt
    (48) var_declaration -> AMPERSANT VARIABLE . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 107
    IGUAL           shift and go to state 108


state 65

    (50) fun_declaration -> FUNCTION VARIABLE . PARENT_IZQ params PARENT_DER
    (51) fun_declaration -> FUNCTION VARIABLE . PARENT_IZQ params PARENT_DER compount_stmt

    PARENT_IZQ      shift and go to state 109


state 66

    (120) factor -> PARENT_IZQ expression . PARENT_DER
    (92) expression -> expression . AND expression
    (93) expression -> expression . OR expression

    PARENT_DER      shift and go to state 110
    AND             shift and go to state 111
    OR              shift and go to state 112


state 67

    (89) expression -> VARIABLE . relop NUMERO
    (91) expression -> VARIABLE . IGUAL AMPERSANT VARIABLE
    (110) additive_expression -> VARIABLE . DECREMENTO PUNTOYCOMA
    (111) additive_expression -> VARIABLE . INCREMENTO PUNTOYCOMA
    (112) additive_expression -> VARIABLE . DECREMENTO
    (113) additive_expression -> VARIABLE . INCREMENTO
    (96) var -> VARIABLE .
    (97) var -> VARIABLE . CORCHETE_IZQ expression CORCHETE_DER
    (101) relop -> . MENOR
    (102) relop -> . MENOR_IGUAL
    (103) relop -> . MAYOR
    (104) relop -> . MAYOR_IGUAL
    (105) relop -> . DESIGUAL
    (106) relop -> . DISTINTO
    (107) relop -> . ES_IGUAL

  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for DESIGUAL resolved as shift
  ! shift/reduce conflict for DISTINTO resolved as shift
  ! shift/reduce conflict for ES_IGUAL resolved as shift
    IGUAL           shift and go to state 114
    DECREMENTO      shift and go to state 56
    INCREMENTO      shift and go to state 58
    MULTIPLICACION  reduce using rule 96 (var -> VARIABLE .)
    DIVISION        reduce using rule 96 (var -> VARIABLE .)
    SUMA            reduce using rule 96 (var -> VARIABLE .)
    RESTA           reduce using rule 96 (var -> VARIABLE .)
    PARENT_DER      reduce using rule 96 (var -> VARIABLE .)
    AND             reduce using rule 96 (var -> VARIABLE .)
    OR              reduce using rule 96 (var -> VARIABLE .)
    CORCHETE_DER    reduce using rule 96 (var -> VARIABLE .)
    COMA            reduce using rule 96 (var -> VARIABLE .)
    BREAK           reduce using rule 96 (var -> VARIABLE .)
    PUNTOYCOMA      reduce using rule 96 (var -> VARIABLE .)
    ELSE            reduce using rule 96 (var -> VARIABLE .)
    ELSEIF          reduce using rule 96 (var -> VARIABLE .)
    VARIABLE        reduce using rule 96 (var -> VARIABLE .)
    VAR             reduce using rule 96 (var -> VARIABLE .)
    TIMESTIMES      reduce using rule 96 (var -> VARIABLE .)
    AMPERSANT       reduce using rule 96 (var -> VARIABLE .)
    FUNCTION        reduce using rule 96 (var -> VARIABLE .)
    PRIVATE         reduce using rule 96 (var -> VARIABLE .)
    PUBLIC          reduce using rule 96 (var -> VARIABLE .)
    PROTECTED       reduce using rule 96 (var -> VARIABLE .)
    REQUIRE         reduce using rule 96 (var -> VARIABLE .)
    INCLUDE         reduce using rule 96 (var -> VARIABLE .)
    CLASS           reduce using rule 96 (var -> VARIABLE .)
    IF              reduce using rule 96 (var -> VARIABLE .)
    SWITCH          reduce using rule 96 (var -> VARIABLE .)
    CASE            reduce using rule 96 (var -> VARIABLE .)
    DEFAULT         reduce using rule 96 (var -> VARIABLE .)
    FOR             reduce using rule 96 (var -> VARIABLE .)
    WHILE           reduce using rule 96 (var -> VARIABLE .)
    DO              reduce using rule 96 (var -> VARIABLE .)
    ALERT           reduce using rule 96 (var -> VARIABLE .)
    PARENT_IZQ      reduce using rule 96 (var -> VARIABLE .)
    NUMERO          reduce using rule 96 (var -> VARIABLE .)
    IDVAR           reduce using rule 96 (var -> VARIABLE .)
    TRUE            reduce using rule 96 (var -> VARIABLE .)
    FALSE           reduce using rule 96 (var -> VARIABLE .)
    ECHO            reduce using rule 96 (var -> VARIABLE .)
    $end            reduce using rule 96 (var -> VARIABLE .)
    LLAVE_DER       reduce using rule 96 (var -> VARIABLE .)
    LLAVE_IZQ       reduce using rule 96 (var -> VARIABLE .)
    RETURN          reduce using rule 96 (var -> VARIABLE .)
    CORCHETE_IZQ    shift and go to state 61
    MENOR           shift and go to state 115
    MENOR_IGUAL     shift and go to state 116
    MAYOR           shift and go to state 117
    MAYOR_IGUAL     shift and go to state 118
    DESIGUAL        shift and go to state 119
    DISTINTO        shift and go to state 120
    ES_IGUAL        shift and go to state 121

  ! MENOR           [ reduce using rule 96 (var -> VARIABLE .) ]
  ! MENOR_IGUAL     [ reduce using rule 96 (var -> VARIABLE .) ]
  ! MAYOR           [ reduce using rule 96 (var -> VARIABLE .) ]
  ! MAYOR_IGUAL     [ reduce using rule 96 (var -> VARIABLE .) ]
  ! DESIGUAL        [ reduce using rule 96 (var -> VARIABLE .) ]
  ! DISTINTO        [ reduce using rule 96 (var -> VARIABLE .) ]
  ! ES_IGUAL        [ reduce using rule 96 (var -> VARIABLE .) ]

    relop                          shift and go to state 113

state 68

    (90) expression -> simple_expression .

    PARENT_DER      reduce using rule 90 (expression -> simple_expression .)
    AND             reduce using rule 90 (expression -> simple_expression .)
    OR              reduce using rule 90 (expression -> simple_expression .)
    CORCHETE_DER    reduce using rule 90 (expression -> simple_expression .)
    COMA            reduce using rule 90 (expression -> simple_expression .)
    PUNTOYCOMA      reduce using rule 90 (expression -> simple_expression .)
    BREAK           reduce using rule 90 (expression -> simple_expression .)
    ELSE            reduce using rule 90 (expression -> simple_expression .)
    ELSEIF          reduce using rule 90 (expression -> simple_expression .)
    VARIABLE        reduce using rule 90 (expression -> simple_expression .)
    VAR             reduce using rule 90 (expression -> simple_expression .)
    TIMESTIMES      reduce using rule 90 (expression -> simple_expression .)
    AMPERSANT       reduce using rule 90 (expression -> simple_expression .)
    FUNCTION        reduce using rule 90 (expression -> simple_expression .)
    PRIVATE         reduce using rule 90 (expression -> simple_expression .)
    PUBLIC          reduce using rule 90 (expression -> simple_expression .)
    PROTECTED       reduce using rule 90 (expression -> simple_expression .)
    REQUIRE         reduce using rule 90 (expression -> simple_expression .)
    INCLUDE         reduce using rule 90 (expression -> simple_expression .)
    CLASS           reduce using rule 90 (expression -> simple_expression .)
    IF              reduce using rule 90 (expression -> simple_expression .)
    SWITCH          reduce using rule 90 (expression -> simple_expression .)
    CASE            reduce using rule 90 (expression -> simple_expression .)
    DEFAULT         reduce using rule 90 (expression -> simple_expression .)
    FOR             reduce using rule 90 (expression -> simple_expression .)
    WHILE           reduce using rule 90 (expression -> simple_expression .)
    DO              reduce using rule 90 (expression -> simple_expression .)
    ALERT           reduce using rule 90 (expression -> simple_expression .)
    PARENT_IZQ      reduce using rule 90 (expression -> simple_expression .)
    NUMERO          reduce using rule 90 (expression -> simple_expression .)
    IDVAR           reduce using rule 90 (expression -> simple_expression .)
    TRUE            reduce using rule 90 (expression -> simple_expression .)
    FALSE           reduce using rule 90 (expression -> simple_expression .)
    ECHO            reduce using rule 90 (expression -> simple_expression .)
    $end            reduce using rule 90 (expression -> simple_expression .)
    LLAVE_DER       reduce using rule 90 (expression -> simple_expression .)
    LLAVE_IZQ       reduce using rule 90 (expression -> simple_expression .)
    RETURN          reduce using rule 90 (expression -> simple_expression .)


state 69

    (94) expression -> additive_expression .
    (98) simple_expression -> additive_expression . relop additive_expression
    (99) simple_expression -> additive_expression .
    (108) additive_expression -> additive_expression . addop term
    (101) relop -> . MENOR
    (102) relop -> . MENOR_IGUAL
    (103) relop -> . MAYOR
    (104) relop -> . MAYOR_IGUAL
    (105) relop -> . DESIGUAL
    (106) relop -> . DISTINTO
    (107) relop -> . ES_IGUAL
    (114) addop -> . SUMA
    (115) addop -> . RESTA

  ! reduce/reduce conflict for PARENT_DER resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for AND resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for OR resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for CORCHETE_DER resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for COMA resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for PUNTOYCOMA resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for BREAK resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for VAR resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for TIMESTIMES resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for AMPERSANT resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for REQUIRE resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for INCLUDE resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for CLASS resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for IF resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for SWITCH resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for CASE resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for FOR resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for DO resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for ALERT resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for PARENT_IZQ resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for NUMERO resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for IDVAR resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for ECHO resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for $end resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for LLAVE_IZQ resolved using rule 94 (expression -> additive_expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 94 (expression -> additive_expression .)
    PARENT_DER      reduce using rule 94 (expression -> additive_expression .)
    AND             reduce using rule 94 (expression -> additive_expression .)
    OR              reduce using rule 94 (expression -> additive_expression .)
    CORCHETE_DER    reduce using rule 94 (expression -> additive_expression .)
    COMA            reduce using rule 94 (expression -> additive_expression .)
    PUNTOYCOMA      reduce using rule 94 (expression -> additive_expression .)
    BREAK           reduce using rule 94 (expression -> additive_expression .)
    ELSE            reduce using rule 94 (expression -> additive_expression .)
    ELSEIF          reduce using rule 94 (expression -> additive_expression .)
    VARIABLE        reduce using rule 94 (expression -> additive_expression .)
    VAR             reduce using rule 94 (expression -> additive_expression .)
    TIMESTIMES      reduce using rule 94 (expression -> additive_expression .)
    AMPERSANT       reduce using rule 94 (expression -> additive_expression .)
    FUNCTION        reduce using rule 94 (expression -> additive_expression .)
    PRIVATE         reduce using rule 94 (expression -> additive_expression .)
    PUBLIC          reduce using rule 94 (expression -> additive_expression .)
    PROTECTED       reduce using rule 94 (expression -> additive_expression .)
    REQUIRE         reduce using rule 94 (expression -> additive_expression .)
    INCLUDE         reduce using rule 94 (expression -> additive_expression .)
    CLASS           reduce using rule 94 (expression -> additive_expression .)
    IF              reduce using rule 94 (expression -> additive_expression .)
    SWITCH          reduce using rule 94 (expression -> additive_expression .)
    CASE            reduce using rule 94 (expression -> additive_expression .)
    DEFAULT         reduce using rule 94 (expression -> additive_expression .)
    FOR             reduce using rule 94 (expression -> additive_expression .)
    WHILE           reduce using rule 94 (expression -> additive_expression .)
    DO              reduce using rule 94 (expression -> additive_expression .)
    ALERT           reduce using rule 94 (expression -> additive_expression .)
    PARENT_IZQ      reduce using rule 94 (expression -> additive_expression .)
    NUMERO          reduce using rule 94 (expression -> additive_expression .)
    IDVAR           reduce using rule 94 (expression -> additive_expression .)
    TRUE            reduce using rule 94 (expression -> additive_expression .)
    FALSE           reduce using rule 94 (expression -> additive_expression .)
    ECHO            reduce using rule 94 (expression -> additive_expression .)
    $end            reduce using rule 94 (expression -> additive_expression .)
    LLAVE_DER       reduce using rule 94 (expression -> additive_expression .)
    LLAVE_IZQ       reduce using rule 94 (expression -> additive_expression .)
    RETURN          reduce using rule 94 (expression -> additive_expression .)
    MENOR           shift and go to state 115
    MENOR_IGUAL     shift and go to state 116
    MAYOR           shift and go to state 117
    MAYOR_IGUAL     shift and go to state 118
    DESIGUAL        shift and go to state 119
    DISTINTO        shift and go to state 120
    ES_IGUAL        shift and go to state 121
    SUMA            shift and go to state 48
    RESTA           shift and go to state 49

  ! PARENT_DER      [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! AND             [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! OR              [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! CORCHETE_DER    [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! COMA            [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! PUNTOYCOMA      [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! BREAK           [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! ELSE            [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! ELSEIF          [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! VARIABLE        [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! VAR             [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! TIMESTIMES      [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! AMPERSANT       [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! FUNCTION        [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! PRIVATE         [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! PUBLIC          [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! PROTECTED       [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! REQUIRE         [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! INCLUDE         [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! CLASS           [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! IF              [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! SWITCH          [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! CASE            [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! DEFAULT         [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! FOR             [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! WHILE           [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! DO              [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! ALERT           [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! PARENT_IZQ      [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! NUMERO          [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! IDVAR           [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! TRUE            [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! FALSE           [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! ECHO            [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! $end            [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! LLAVE_DER       [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! LLAVE_IZQ       [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! RETURN          [ reduce using rule 99 (simple_expression -> additive_expression .) ]

    relop                          shift and go to state 122
    addop                          shift and go to state 47

state 70

    (95) expression -> alert_stmt .
    (100) simple_expression -> alert_stmt .

  ! reduce/reduce conflict for PARENT_DER resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for AND resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for OR resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for CORCHETE_DER resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for COMA resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for PUNTOYCOMA resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for BREAK resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for ELSE resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for VAR resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for TIMESTIMES resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for AMPERSANT resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for REQUIRE resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for INCLUDE resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for CLASS resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for IF resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for SWITCH resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for CASE resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for FOR resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for WHILE resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for DO resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for ALERT resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for PARENT_IZQ resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for NUMERO resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for IDVAR resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for TRUE resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for FALSE resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for ECHO resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for $end resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for LLAVE_IZQ resolved using rule 95 (expression -> alert_stmt .)
  ! reduce/reduce conflict for RETURN resolved using rule 95 (expression -> alert_stmt .)
    PARENT_DER      reduce using rule 95 (expression -> alert_stmt .)
    AND             reduce using rule 95 (expression -> alert_stmt .)
    OR              reduce using rule 95 (expression -> alert_stmt .)
    CORCHETE_DER    reduce using rule 95 (expression -> alert_stmt .)
    COMA            reduce using rule 95 (expression -> alert_stmt .)
    PUNTOYCOMA      reduce using rule 95 (expression -> alert_stmt .)
    BREAK           reduce using rule 95 (expression -> alert_stmt .)
    ELSE            reduce using rule 95 (expression -> alert_stmt .)
    ELSEIF          reduce using rule 95 (expression -> alert_stmt .)
    VARIABLE        reduce using rule 95 (expression -> alert_stmt .)
    VAR             reduce using rule 95 (expression -> alert_stmt .)
    TIMESTIMES      reduce using rule 95 (expression -> alert_stmt .)
    AMPERSANT       reduce using rule 95 (expression -> alert_stmt .)
    FUNCTION        reduce using rule 95 (expression -> alert_stmt .)
    PRIVATE         reduce using rule 95 (expression -> alert_stmt .)
    PUBLIC          reduce using rule 95 (expression -> alert_stmt .)
    PROTECTED       reduce using rule 95 (expression -> alert_stmt .)
    REQUIRE         reduce using rule 95 (expression -> alert_stmt .)
    INCLUDE         reduce using rule 95 (expression -> alert_stmt .)
    CLASS           reduce using rule 95 (expression -> alert_stmt .)
    IF              reduce using rule 95 (expression -> alert_stmt .)
    SWITCH          reduce using rule 95 (expression -> alert_stmt .)
    CASE            reduce using rule 95 (expression -> alert_stmt .)
    DEFAULT         reduce using rule 95 (expression -> alert_stmt .)
    FOR             reduce using rule 95 (expression -> alert_stmt .)
    WHILE           reduce using rule 95 (expression -> alert_stmt .)
    DO              reduce using rule 95 (expression -> alert_stmt .)
    ALERT           reduce using rule 95 (expression -> alert_stmt .)
    PARENT_IZQ      reduce using rule 95 (expression -> alert_stmt .)
    NUMERO          reduce using rule 95 (expression -> alert_stmt .)
    IDVAR           reduce using rule 95 (expression -> alert_stmt .)
    TRUE            reduce using rule 95 (expression -> alert_stmt .)
    FALSE           reduce using rule 95 (expression -> alert_stmt .)
    ECHO            reduce using rule 95 (expression -> alert_stmt .)
    $end            reduce using rule 95 (expression -> alert_stmt .)
    LLAVE_DER       reduce using rule 95 (expression -> alert_stmt .)
    LLAVE_IZQ       reduce using rule 95 (expression -> alert_stmt .)
    RETURN          reduce using rule 95 (expression -> alert_stmt .)

  ! PARENT_DER      [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! AND             [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! OR              [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! CORCHETE_DER    [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! COMA            [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! PUNTOYCOMA      [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! BREAK           [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! ELSE            [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! ELSEIF          [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! VARIABLE        [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! VAR             [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! TIMESTIMES      [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! AMPERSANT       [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! FUNCTION        [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! PRIVATE         [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! PUBLIC          [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! PROTECTED       [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! REQUIRE         [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! INCLUDE         [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! CLASS           [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! IF              [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! SWITCH          [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! CASE            [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! DEFAULT         [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! FOR             [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! WHILE           [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! DO              [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! ALERT           [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! PARENT_IZQ      [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! NUMERO          [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! IDVAR           [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! TRUE            [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! FALSE           [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! ECHO            [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! $end            [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! LLAVE_DER       [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! LLAVE_IZQ       [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! RETURN          [ reduce using rule 100 (simple_expression -> alert_stmt .) ]


state 71

    (23) alert_stmt -> empty .

    PARENT_DER      reduce using rule 23 (alert_stmt -> empty .)
    AND             reduce using rule 23 (alert_stmt -> empty .)
    OR              reduce using rule 23 (alert_stmt -> empty .)
    PUNTOYCOMA      reduce using rule 23 (alert_stmt -> empty .)
    CORCHETE_DER    reduce using rule 23 (alert_stmt -> empty .)
    VARIABLE        reduce using rule 23 (alert_stmt -> empty .)
    VAR             reduce using rule 23 (alert_stmt -> empty .)
    TIMESTIMES      reduce using rule 23 (alert_stmt -> empty .)
    AMPERSANT       reduce using rule 23 (alert_stmt -> empty .)
    FUNCTION        reduce using rule 23 (alert_stmt -> empty .)
    PRIVATE         reduce using rule 23 (alert_stmt -> empty .)
    PUBLIC          reduce using rule 23 (alert_stmt -> empty .)
    PROTECTED       reduce using rule 23 (alert_stmt -> empty .)
    REQUIRE         reduce using rule 23 (alert_stmt -> empty .)
    INCLUDE         reduce using rule 23 (alert_stmt -> empty .)
    CLASS           reduce using rule 23 (alert_stmt -> empty .)
    IF              reduce using rule 23 (alert_stmt -> empty .)
    SWITCH          reduce using rule 23 (alert_stmt -> empty .)
    CASE            reduce using rule 23 (alert_stmt -> empty .)
    DEFAULT         reduce using rule 23 (alert_stmt -> empty .)
    FOR             reduce using rule 23 (alert_stmt -> empty .)
    WHILE           reduce using rule 23 (alert_stmt -> empty .)
    DO              reduce using rule 23 (alert_stmt -> empty .)
    ALERT           reduce using rule 23 (alert_stmt -> empty .)
    PARENT_IZQ      reduce using rule 23 (alert_stmt -> empty .)
    NUMERO          reduce using rule 23 (alert_stmt -> empty .)
    IDVAR           reduce using rule 23 (alert_stmt -> empty .)
    TRUE            reduce using rule 23 (alert_stmt -> empty .)
    FALSE           reduce using rule 23 (alert_stmt -> empty .)
    ECHO            reduce using rule 23 (alert_stmt -> empty .)
    $end            reduce using rule 23 (alert_stmt -> empty .)
    LLAVE_DER       reduce using rule 23 (alert_stmt -> empty .)
    LLAVE_IZQ       reduce using rule 23 (alert_stmt -> empty .)
    RETURN          reduce using rule 23 (alert_stmt -> empty .)
    COMA            reduce using rule 23 (alert_stmt -> empty .)
    BREAK           reduce using rule 23 (alert_stmt -> empty .)
    ELSE            reduce using rule 23 (alert_stmt -> empty .)
    ELSEIF          reduce using rule 23 (alert_stmt -> empty .)


state 72

    (24) header_declaration -> REQUIRE PARENT_IZQ . STRING PARENT_DER PUNTOYCOMA

    STRING          shift and go to state 123


state 73

    (25) header_declaration -> INCLUDE PARENT_IZQ . STRING PARENT_DER PUNTOYCOMA

    STRING          shift and go to state 124


state 74

    (27) class_declaration -> CLASS VARIABLE . LLAVE_IZQ attribute LLAVE_DER

    LLAVE_IZQ       shift and go to state 125


state 75

    (124) factor -> IDVAR PARENT_IZQ . args PARENT_DER
    (125) args -> . args_list
    (126) args -> . empty
    (127) args -> . VOID
    (128) args_list -> . args_list COMA expression
    (129) args_list -> . expression
    (135) empty -> .
    (89) expression -> . VARIABLE relop NUMERO
    (90) expression -> . simple_expression
    (91) expression -> . VARIABLE IGUAL AMPERSANT VARIABLE
    (92) expression -> . expression AND expression
    (93) expression -> . expression OR expression
    (94) expression -> . additive_expression
    (95) expression -> . alert_stmt
    (98) simple_expression -> . additive_expression relop additive_expression
    (99) simple_expression -> . additive_expression
    (100) simple_expression -> . alert_stmt
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty
    (116) term -> . term mulop factor
    (117) term -> . factor
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

    VOID            shift and go to state 129
    PARENT_DER      reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    COMA            reduce using rule 135 (empty -> .)
    VARIABLE        shift and go to state 67
    ALERT           shift and go to state 40
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    args                           shift and go to state 126
    args_list                      shift and go to state 127
    empty                          shift and go to state 128
    expression                     shift and go to state 130
    simple_expression              shift and go to state 68
    additive_expression            shift and go to state 69
    alert_stmt                     shift and go to state 70
    term                           shift and go to state 15
    factor                         shift and go to state 41
    var                            shift and go to state 34
    boolean                        shift and go to state 20

state 76

    (77) selection_stmt -> IF PARENT_IZQ . expression PARENT_DER statement
    (78) selection_stmt -> IF PARENT_IZQ . expression PARENT_DER statement selection
    (89) expression -> . VARIABLE relop NUMERO
    (90) expression -> . simple_expression
    (91) expression -> . VARIABLE IGUAL AMPERSANT VARIABLE
    (92) expression -> . expression AND expression
    (93) expression -> . expression OR expression
    (94) expression -> . additive_expression
    (95) expression -> . alert_stmt
    (98) simple_expression -> . additive_expression relop additive_expression
    (99) simple_expression -> . additive_expression
    (100) simple_expression -> . alert_stmt
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty
    (116) term -> . term mulop factor
    (117) term -> . factor
    (135) empty -> .
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

    VARIABLE        shift and go to state 67
    ALERT           shift and go to state 40
    PARENT_DER      reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    expression                     shift and go to state 131
    simple_expression              shift and go to state 68
    additive_expression            shift and go to state 69
    alert_stmt                     shift and go to state 70
    term                           shift and go to state 15
    empty                          shift and go to state 71
    factor                         shift and go to state 41
    var                            shift and go to state 34
    boolean                        shift and go to state 20

state 77

    (81) selection_stmt -> SWITCH PARENT_IZQ . var PARENT_DER statement
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER

    VARIABLE        shift and go to state 85

    var                            shift and go to state 132

state 78

    (82) selection_stmt -> CASE NUMERO . DOS_PUNTOS statement BREAK PUNTOYCOMA

    DOS_PUNTOS      shift and go to state 133


state 79

    (83) selection_stmt -> DEFAULT DOS_PUNTOS . statement BREAK PUNTOYCOMA
    (64) statement -> . expression_stmt
    (65) statement -> . compount_stmt
    (66) statement -> . selection_stmt
    (67) statement -> . iteration_stmt
    (68) statement -> . return_stmt
    (69) statement -> . class_declaration
    (70) statement -> . echo_stmt
    (71) statement -> . expression
    (72) statement -> . additive_expression
    (73) statement -> . alert_stmt
    (74) expression_stmt -> . expression PUNTOYCOMA
    (75) expression_stmt -> . additive_expression
    (76) expression_stmt -> . alert_stmt
    (58) compount_stmt -> . LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER
    (77) selection_stmt -> . IF PARENT_IZQ expression PARENT_DER statement
    (78) selection_stmt -> . IF PARENT_IZQ expression PARENT_DER statement selection
    (81) selection_stmt -> . SWITCH PARENT_IZQ var PARENT_DER statement
    (82) selection_stmt -> . CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA
    (83) selection_stmt -> . DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA
    (84) iteration_stmt -> . FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement
    (85) iteration_stmt -> . WHILE PARENT_IZQ expression PARENT_DER statement
    (86) iteration_stmt -> . DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER
    (87) return_stmt -> . RETURN PUNTOYCOMA
    (88) return_stmt -> . RETURN expression PUNTOYCOMA
    (26) class_declaration -> . area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
    (27) class_declaration -> . CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
    (16) echo_stmt -> . echo_stmt ECHO STRING PUNTOYCOMA
    (17) echo_stmt -> . echo_stmt ECHO IDVAR PUNTOYCOMA
    (18) echo_stmt -> . empty
    (19) echo_stmt -> . echo_stmt ECHO NUMERO PUNTOYCOMA
    (20) echo_stmt -> . echo_stmt ECHO boolean PUNTOYCOMA
    (21) echo_stmt -> . echo_stmt ECHO fun_declaration PUNTOYCOMA
    (89) expression -> . VARIABLE relop NUMERO
    (90) expression -> . simple_expression
    (91) expression -> . VARIABLE IGUAL AMPERSANT VARIABLE
    (92) expression -> . expression AND expression
    (93) expression -> . expression OR expression
    (94) expression -> . additive_expression
    (95) expression -> . alert_stmt
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED
    (135) empty -> .
    (98) simple_expression -> . additive_expression relop additive_expression
    (99) simple_expression -> . additive_expression
    (100) simple_expression -> . alert_stmt
    (116) term -> . term mulop factor
    (117) term -> . factor
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

    LLAVE_IZQ       shift and go to state 145
    IF              shift and go to state 32
    SWITCH          shift and go to state 33
    CASE            shift and go to state 35
    DEFAULT         shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    DO              shift and go to state 39
    RETURN          shift and go to state 146
    CLASS           shift and go to state 29
    VARIABLE        shift and go to state 67
    ALERT           shift and go to state 40
    PRIVATE         shift and go to state 24
    PUBLIC          shift and go to state 25
    PROTECTED       shift and go to state 26
    ECHO            reduce using rule 135 (empty -> .)
    BREAK           reduce using rule 135 (empty -> .)
    PUNTOYCOMA      reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    statement                      shift and go to state 134
    expression_stmt                shift and go to state 135
    compount_stmt                  shift and go to state 136
    selection_stmt                 shift and go to state 137
    iteration_stmt                 shift and go to state 138
    return_stmt                    shift and go to state 139
    class_declaration              shift and go to state 140
    echo_stmt                      shift and go to state 141
    expression                     shift and go to state 142
    additive_expression            shift and go to state 143
    alert_stmt                     shift and go to state 144
    var                            shift and go to state 34
    area                           shift and go to state 147
    empty                          shift and go to state 31
    boolean                        shift and go to state 20
    simple_expression              shift and go to state 68
    term                           shift and go to state 15
    factor                         shift and go to state 41

state 80

    (84) iteration_stmt -> FOR PARENT_IZQ . var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement
    (35) var_declaration -> . VARIABLE PUNTOYCOMA var_declaration
    (36) var_declaration -> . VAR VARIABLE IGUAL simple_expression
    (37) var_declaration -> . VARIABLE PUNTOYCOMA
    (38) var_declaration -> . TIMESTIMES VARIABLE PUNTOYCOMA
    (39) var_declaration -> . TIMESTIMES VARIABLE PUNTOYCOMA var_declaration
    (40) var_declaration -> . VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration
    (41) var_declaration -> . VARIABLE IGUAL NUMERO PUNTOYCOMA
    (42) var_declaration -> . VARIABLE IGUAL boolean PUNTOYCOMA var_declaration
    (43) var_declaration -> . VARIABLE IGUAL boolean PUNTOYCOMA
    (44) var_declaration -> . VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration
    (45) var_declaration -> . VARIABLE IGUAL VARIABLE PUNTOYCOMA
    (46) var_declaration -> . AMPERSANT VARIABLE PUNTOYCOMA var_declaration
    (47) var_declaration -> . AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt
    (48) var_declaration -> . AMPERSANT VARIABLE PUNTOYCOMA
    (49) var_declaration -> . VARIABLE IGUAL simple_expression PUNTOYCOMA

    VARIABLE        shift and go to state 94
    VAR             shift and go to state 17
    TIMESTIMES      shift and go to state 18
    AMPERSANT       shift and go to state 21

    var_declaration                shift and go to state 148

state 81

    (85) iteration_stmt -> WHILE PARENT_IZQ . expression PARENT_DER statement
    (89) expression -> . VARIABLE relop NUMERO
    (90) expression -> . simple_expression
    (91) expression -> . VARIABLE IGUAL AMPERSANT VARIABLE
    (92) expression -> . expression AND expression
    (93) expression -> . expression OR expression
    (94) expression -> . additive_expression
    (95) expression -> . alert_stmt
    (98) simple_expression -> . additive_expression relop additive_expression
    (99) simple_expression -> . additive_expression
    (100) simple_expression -> . alert_stmt
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty
    (116) term -> . term mulop factor
    (117) term -> . factor
    (135) empty -> .
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

    VARIABLE        shift and go to state 67
    ALERT           shift and go to state 40
    PARENT_DER      reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    expression                     shift and go to state 149
    simple_expression              shift and go to state 68
    additive_expression            shift and go to state 69
    alert_stmt                     shift and go to state 70
    term                           shift and go to state 15
    empty                          shift and go to state 71
    factor                         shift and go to state 41
    var                            shift and go to state 34
    boolean                        shift and go to state 20

state 82

    (86) iteration_stmt -> DO LLAVE_IZQ . statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER
    (64) statement -> . expression_stmt
    (65) statement -> . compount_stmt
    (66) statement -> . selection_stmt
    (67) statement -> . iteration_stmt
    (68) statement -> . return_stmt
    (69) statement -> . class_declaration
    (70) statement -> . echo_stmt
    (71) statement -> . expression
    (72) statement -> . additive_expression
    (73) statement -> . alert_stmt
    (74) expression_stmt -> . expression PUNTOYCOMA
    (75) expression_stmt -> . additive_expression
    (76) expression_stmt -> . alert_stmt
    (58) compount_stmt -> . LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER
    (77) selection_stmt -> . IF PARENT_IZQ expression PARENT_DER statement
    (78) selection_stmt -> . IF PARENT_IZQ expression PARENT_DER statement selection
    (81) selection_stmt -> . SWITCH PARENT_IZQ var PARENT_DER statement
    (82) selection_stmt -> . CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA
    (83) selection_stmt -> . DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA
    (84) iteration_stmt -> . FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement
    (85) iteration_stmt -> . WHILE PARENT_IZQ expression PARENT_DER statement
    (86) iteration_stmt -> . DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER
    (87) return_stmt -> . RETURN PUNTOYCOMA
    (88) return_stmt -> . RETURN expression PUNTOYCOMA
    (26) class_declaration -> . area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
    (27) class_declaration -> . CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
    (16) echo_stmt -> . echo_stmt ECHO STRING PUNTOYCOMA
    (17) echo_stmt -> . echo_stmt ECHO IDVAR PUNTOYCOMA
    (18) echo_stmt -> . empty
    (19) echo_stmt -> . echo_stmt ECHO NUMERO PUNTOYCOMA
    (20) echo_stmt -> . echo_stmt ECHO boolean PUNTOYCOMA
    (21) echo_stmt -> . echo_stmt ECHO fun_declaration PUNTOYCOMA
    (89) expression -> . VARIABLE relop NUMERO
    (90) expression -> . simple_expression
    (91) expression -> . VARIABLE IGUAL AMPERSANT VARIABLE
    (92) expression -> . expression AND expression
    (93) expression -> . expression OR expression
    (94) expression -> . additive_expression
    (95) expression -> . alert_stmt
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED
    (135) empty -> .
    (98) simple_expression -> . additive_expression relop additive_expression
    (99) simple_expression -> . additive_expression
    (100) simple_expression -> . alert_stmt
    (116) term -> . term mulop factor
    (117) term -> . factor
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

    LLAVE_IZQ       shift and go to state 145
    IF              shift and go to state 32
    SWITCH          shift and go to state 33
    CASE            shift and go to state 35
    DEFAULT         shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    DO              shift and go to state 39
    RETURN          shift and go to state 146
    CLASS           shift and go to state 29
    VARIABLE        shift and go to state 67
    ALERT           shift and go to state 40
    PRIVATE         shift and go to state 24
    PUBLIC          shift and go to state 25
    PROTECTED       shift and go to state 26
    ECHO            reduce using rule 135 (empty -> .)
    PUNTOYCOMA      reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    statement                      shift and go to state 150
    expression                     shift and go to state 142
    expression_stmt                shift and go to state 135
    compount_stmt                  shift and go to state 136
    selection_stmt                 shift and go to state 137
    iteration_stmt                 shift and go to state 138
    return_stmt                    shift and go to state 139
    class_declaration              shift and go to state 140
    echo_stmt                      shift and go to state 141
    additive_expression            shift and go to state 143
    alert_stmt                     shift and go to state 144
    var                            shift and go to state 34
    area                           shift and go to state 147
    empty                          shift and go to state 31
    boolean                        shift and go to state 20
    simple_expression              shift and go to state 68
    term                           shift and go to state 15
    factor                         shift and go to state 41

state 83

    (22) alert_stmt -> ALERT PARENT_IZQ . STRING PARENT_DER PUNTOYCOMA

    STRING          shift and go to state 151


state 84

    (108) additive_expression -> additive_expression addop term .
    (116) term -> term . mulop factor
    (118) mulop -> . MULTIPLICACION
    (119) mulop -> . DIVISION

    SUMA            reduce using rule 108 (additive_expression -> additive_expression addop term .)
    RESTA           reduce using rule 108 (additive_expression -> additive_expression addop term .)
    VARIABLE        reduce using rule 108 (additive_expression -> additive_expression addop term .)
    VAR             reduce using rule 108 (additive_expression -> additive_expression addop term .)
    TIMESTIMES      reduce using rule 108 (additive_expression -> additive_expression addop term .)
    AMPERSANT       reduce using rule 108 (additive_expression -> additive_expression addop term .)
    FUNCTION        reduce using rule 108 (additive_expression -> additive_expression addop term .)
    PRIVATE         reduce using rule 108 (additive_expression -> additive_expression addop term .)
    PUBLIC          reduce using rule 108 (additive_expression -> additive_expression addop term .)
    PROTECTED       reduce using rule 108 (additive_expression -> additive_expression addop term .)
    REQUIRE         reduce using rule 108 (additive_expression -> additive_expression addop term .)
    INCLUDE         reduce using rule 108 (additive_expression -> additive_expression addop term .)
    CLASS           reduce using rule 108 (additive_expression -> additive_expression addop term .)
    IF              reduce using rule 108 (additive_expression -> additive_expression addop term .)
    SWITCH          reduce using rule 108 (additive_expression -> additive_expression addop term .)
    CASE            reduce using rule 108 (additive_expression -> additive_expression addop term .)
    DEFAULT         reduce using rule 108 (additive_expression -> additive_expression addop term .)
    FOR             reduce using rule 108 (additive_expression -> additive_expression addop term .)
    WHILE           reduce using rule 108 (additive_expression -> additive_expression addop term .)
    DO              reduce using rule 108 (additive_expression -> additive_expression addop term .)
    ALERT           reduce using rule 108 (additive_expression -> additive_expression addop term .)
    PARENT_IZQ      reduce using rule 108 (additive_expression -> additive_expression addop term .)
    NUMERO          reduce using rule 108 (additive_expression -> additive_expression addop term .)
    IDVAR           reduce using rule 108 (additive_expression -> additive_expression addop term .)
    TRUE            reduce using rule 108 (additive_expression -> additive_expression addop term .)
    FALSE           reduce using rule 108 (additive_expression -> additive_expression addop term .)
    ECHO            reduce using rule 108 (additive_expression -> additive_expression addop term .)
    $end            reduce using rule 108 (additive_expression -> additive_expression addop term .)
    MENOR           reduce using rule 108 (additive_expression -> additive_expression addop term .)
    MENOR_IGUAL     reduce using rule 108 (additive_expression -> additive_expression addop term .)
    MAYOR           reduce using rule 108 (additive_expression -> additive_expression addop term .)
    MAYOR_IGUAL     reduce using rule 108 (additive_expression -> additive_expression addop term .)
    DESIGUAL        reduce using rule 108 (additive_expression -> additive_expression addop term .)
    DISTINTO        reduce using rule 108 (additive_expression -> additive_expression addop term .)
    ES_IGUAL        reduce using rule 108 (additive_expression -> additive_expression addop term .)
    PARENT_DER      reduce using rule 108 (additive_expression -> additive_expression addop term .)
    AND             reduce using rule 108 (additive_expression -> additive_expression addop term .)
    OR              reduce using rule 108 (additive_expression -> additive_expression addop term .)
    PUNTOYCOMA      reduce using rule 108 (additive_expression -> additive_expression addop term .)
    CORCHETE_DER    reduce using rule 108 (additive_expression -> additive_expression addop term .)
    COMA            reduce using rule 108 (additive_expression -> additive_expression addop term .)
    BREAK           reduce using rule 108 (additive_expression -> additive_expression addop term .)
    LLAVE_DER       reduce using rule 108 (additive_expression -> additive_expression addop term .)
    LLAVE_IZQ       reduce using rule 108 (additive_expression -> additive_expression addop term .)
    RETURN          reduce using rule 108 (additive_expression -> additive_expression addop term .)
    ELSE            reduce using rule 108 (additive_expression -> additive_expression addop term .)
    ELSEIF          reduce using rule 108 (additive_expression -> additive_expression addop term .)
    MULTIPLICACION  shift and go to state 54
    DIVISION        shift and go to state 55

    mulop                          shift and go to state 53

state 85

    (96) var -> VARIABLE .
    (97) var -> VARIABLE . CORCHETE_IZQ expression CORCHETE_DER

    MULTIPLICACION  reduce using rule 96 (var -> VARIABLE .)
    DIVISION        reduce using rule 96 (var -> VARIABLE .)
    SUMA            reduce using rule 96 (var -> VARIABLE .)
    RESTA           reduce using rule 96 (var -> VARIABLE .)
    VARIABLE        reduce using rule 96 (var -> VARIABLE .)
    VAR             reduce using rule 96 (var -> VARIABLE .)
    TIMESTIMES      reduce using rule 96 (var -> VARIABLE .)
    AMPERSANT       reduce using rule 96 (var -> VARIABLE .)
    FUNCTION        reduce using rule 96 (var -> VARIABLE .)
    PRIVATE         reduce using rule 96 (var -> VARIABLE .)
    PUBLIC          reduce using rule 96 (var -> VARIABLE .)
    PROTECTED       reduce using rule 96 (var -> VARIABLE .)
    REQUIRE         reduce using rule 96 (var -> VARIABLE .)
    INCLUDE         reduce using rule 96 (var -> VARIABLE .)
    CLASS           reduce using rule 96 (var -> VARIABLE .)
    IF              reduce using rule 96 (var -> VARIABLE .)
    SWITCH          reduce using rule 96 (var -> VARIABLE .)
    CASE            reduce using rule 96 (var -> VARIABLE .)
    DEFAULT         reduce using rule 96 (var -> VARIABLE .)
    FOR             reduce using rule 96 (var -> VARIABLE .)
    WHILE           reduce using rule 96 (var -> VARIABLE .)
    DO              reduce using rule 96 (var -> VARIABLE .)
    ALERT           reduce using rule 96 (var -> VARIABLE .)
    PARENT_IZQ      reduce using rule 96 (var -> VARIABLE .)
    NUMERO          reduce using rule 96 (var -> VARIABLE .)
    IDVAR           reduce using rule 96 (var -> VARIABLE .)
    TRUE            reduce using rule 96 (var -> VARIABLE .)
    FALSE           reduce using rule 96 (var -> VARIABLE .)
    ECHO            reduce using rule 96 (var -> VARIABLE .)
    $end            reduce using rule 96 (var -> VARIABLE .)
    MENOR           reduce using rule 96 (var -> VARIABLE .)
    MENOR_IGUAL     reduce using rule 96 (var -> VARIABLE .)
    MAYOR           reduce using rule 96 (var -> VARIABLE .)
    MAYOR_IGUAL     reduce using rule 96 (var -> VARIABLE .)
    DESIGUAL        reduce using rule 96 (var -> VARIABLE .)
    DISTINTO        reduce using rule 96 (var -> VARIABLE .)
    ES_IGUAL        reduce using rule 96 (var -> VARIABLE .)
    PARENT_DER      reduce using rule 96 (var -> VARIABLE .)
    AND             reduce using rule 96 (var -> VARIABLE .)
    OR              reduce using rule 96 (var -> VARIABLE .)
    PUNTOYCOMA      reduce using rule 96 (var -> VARIABLE .)
    CORCHETE_DER    reduce using rule 96 (var -> VARIABLE .)
    COMA            reduce using rule 96 (var -> VARIABLE .)
    BREAK           reduce using rule 96 (var -> VARIABLE .)
    LLAVE_DER       reduce using rule 96 (var -> VARIABLE .)
    LLAVE_IZQ       reduce using rule 96 (var -> VARIABLE .)
    RETURN          reduce using rule 96 (var -> VARIABLE .)
    ELSE            reduce using rule 96 (var -> VARIABLE .)
    ELSEIF          reduce using rule 96 (var -> VARIABLE .)
    CORCHETE_IZQ    shift and go to state 61


state 86

    (26) class_declaration -> area CLASS VARIABLE . LLAVE_IZQ attribute LLAVE_DER

    LLAVE_IZQ       shift and go to state 152


state 87

    (16) echo_stmt -> echo_stmt ECHO STRING . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 153


state 88

    (17) echo_stmt -> echo_stmt ECHO IDVAR . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 154


state 89

    (19) echo_stmt -> echo_stmt ECHO NUMERO . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 155


state 90

    (20) echo_stmt -> echo_stmt ECHO boolean . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 156


state 91

    (21) echo_stmt -> echo_stmt ECHO fun_declaration . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 157


state 92

    (116) term -> term mulop factor .

    MULTIPLICACION  reduce using rule 116 (term -> term mulop factor .)
    DIVISION        reduce using rule 116 (term -> term mulop factor .)
    SUMA            reduce using rule 116 (term -> term mulop factor .)
    RESTA           reduce using rule 116 (term -> term mulop factor .)
    VARIABLE        reduce using rule 116 (term -> term mulop factor .)
    VAR             reduce using rule 116 (term -> term mulop factor .)
    TIMESTIMES      reduce using rule 116 (term -> term mulop factor .)
    AMPERSANT       reduce using rule 116 (term -> term mulop factor .)
    FUNCTION        reduce using rule 116 (term -> term mulop factor .)
    PRIVATE         reduce using rule 116 (term -> term mulop factor .)
    PUBLIC          reduce using rule 116 (term -> term mulop factor .)
    PROTECTED       reduce using rule 116 (term -> term mulop factor .)
    REQUIRE         reduce using rule 116 (term -> term mulop factor .)
    INCLUDE         reduce using rule 116 (term -> term mulop factor .)
    CLASS           reduce using rule 116 (term -> term mulop factor .)
    IF              reduce using rule 116 (term -> term mulop factor .)
    SWITCH          reduce using rule 116 (term -> term mulop factor .)
    CASE            reduce using rule 116 (term -> term mulop factor .)
    DEFAULT         reduce using rule 116 (term -> term mulop factor .)
    FOR             reduce using rule 116 (term -> term mulop factor .)
    WHILE           reduce using rule 116 (term -> term mulop factor .)
    DO              reduce using rule 116 (term -> term mulop factor .)
    ALERT           reduce using rule 116 (term -> term mulop factor .)
    PARENT_IZQ      reduce using rule 116 (term -> term mulop factor .)
    NUMERO          reduce using rule 116 (term -> term mulop factor .)
    IDVAR           reduce using rule 116 (term -> term mulop factor .)
    TRUE            reduce using rule 116 (term -> term mulop factor .)
    FALSE           reduce using rule 116 (term -> term mulop factor .)
    ECHO            reduce using rule 116 (term -> term mulop factor .)
    $end            reduce using rule 116 (term -> term mulop factor .)
    MENOR           reduce using rule 116 (term -> term mulop factor .)
    MENOR_IGUAL     reduce using rule 116 (term -> term mulop factor .)
    MAYOR           reduce using rule 116 (term -> term mulop factor .)
    MAYOR_IGUAL     reduce using rule 116 (term -> term mulop factor .)
    DESIGUAL        reduce using rule 116 (term -> term mulop factor .)
    DISTINTO        reduce using rule 116 (term -> term mulop factor .)
    ES_IGUAL        reduce using rule 116 (term -> term mulop factor .)
    PARENT_DER      reduce using rule 116 (term -> term mulop factor .)
    AND             reduce using rule 116 (term -> term mulop factor .)
    OR              reduce using rule 116 (term -> term mulop factor .)
    PUNTOYCOMA      reduce using rule 116 (term -> term mulop factor .)
    CORCHETE_DER    reduce using rule 116 (term -> term mulop factor .)
    COMA            reduce using rule 116 (term -> term mulop factor .)
    BREAK           reduce using rule 116 (term -> term mulop factor .)
    LLAVE_DER       reduce using rule 116 (term -> term mulop factor .)
    LLAVE_IZQ       reduce using rule 116 (term -> term mulop factor .)
    RETURN          reduce using rule 116 (term -> term mulop factor .)
    ELSE            reduce using rule 116 (term -> term mulop factor .)
    ELSEIF          reduce using rule 116 (term -> term mulop factor .)


state 93

    (110) additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .

    SUMA            reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    RESTA           reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    VARIABLE        reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    VAR             reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    TIMESTIMES      reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    AMPERSANT       reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    FUNCTION        reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    PRIVATE         reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    PUBLIC          reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    PROTECTED       reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    REQUIRE         reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    INCLUDE         reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    CLASS           reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    IF              reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    SWITCH          reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    CASE            reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    DEFAULT         reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    FOR             reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    WHILE           reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    DO              reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    ALERT           reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    PARENT_IZQ      reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    NUMERO          reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    IDVAR           reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    TRUE            reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    FALSE           reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    ECHO            reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    $end            reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    MENOR           reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    MENOR_IGUAL     reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    MAYOR           reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    MAYOR_IGUAL     reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    DESIGUAL        reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    DISTINTO        reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    ES_IGUAL        reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    PARENT_DER      reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    AND             reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    OR              reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    PUNTOYCOMA      reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    CORCHETE_DER    reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    COMA            reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    BREAK           reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    LLAVE_DER       reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    LLAVE_IZQ       reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    RETURN          reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    ELSE            reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)
    ELSEIF          reduce using rule 110 (additive_expression -> VARIABLE DECREMENTO PUNTOYCOMA .)


state 94

    (35) var_declaration -> VARIABLE . PUNTOYCOMA var_declaration
    (37) var_declaration -> VARIABLE . PUNTOYCOMA
    (40) var_declaration -> VARIABLE . IGUAL NUMERO PUNTOYCOMA var_declaration
    (41) var_declaration -> VARIABLE . IGUAL NUMERO PUNTOYCOMA
    (42) var_declaration -> VARIABLE . IGUAL boolean PUNTOYCOMA var_declaration
    (43) var_declaration -> VARIABLE . IGUAL boolean PUNTOYCOMA
    (44) var_declaration -> VARIABLE . IGUAL VARIABLE PUNTOYCOMA var_declaration
    (45) var_declaration -> VARIABLE . IGUAL VARIABLE PUNTOYCOMA
    (49) var_declaration -> VARIABLE . IGUAL simple_expression PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 57
    IGUAL           shift and go to state 59


state 95

    (35) var_declaration -> VARIABLE PUNTOYCOMA var_declaration .

    VARIABLE        reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    VAR             reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    TIMESTIMES      reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    AMPERSANT       reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    FUNCTION        reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    PRIVATE         reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    PUBLIC          reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    PROTECTED       reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    REQUIRE         reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    INCLUDE         reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    CLASS           reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    IF              reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    SWITCH          reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    CASE            reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    DEFAULT         reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    FOR             reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    WHILE           reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    DO              reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    ALERT           reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    PARENT_IZQ      reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    NUMERO          reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    IDVAR           reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    TRUE            reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    FALSE           reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    ECHO            reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    $end            reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    PUNTOYCOMA      reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    LLAVE_DER       reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    LLAVE_IZQ       reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    RETURN          reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    AND             reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)
    OR              reduce using rule 35 (var_declaration -> VARIABLE PUNTOYCOMA var_declaration .)


state 96

    (111) additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .

    SUMA            reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    RESTA           reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    VARIABLE        reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    VAR             reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    TIMESTIMES      reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    AMPERSANT       reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    FUNCTION        reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    PRIVATE         reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    PUBLIC          reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    PROTECTED       reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    REQUIRE         reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    INCLUDE         reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    CLASS           reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    IF              reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    SWITCH          reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    CASE            reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    DEFAULT         reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    FOR             reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    WHILE           reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    DO              reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    ALERT           reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    PARENT_IZQ      reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    NUMERO          reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    IDVAR           reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    TRUE            reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    FALSE           reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    ECHO            reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    $end            reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    MENOR           reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    MENOR_IGUAL     reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    MAYOR           reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    MAYOR_IGUAL     reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    DESIGUAL        reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    DISTINTO        reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    ES_IGUAL        reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    PARENT_DER      reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    AND             reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    OR              reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    PUNTOYCOMA      reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    CORCHETE_DER    reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    COMA            reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    BREAK           reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    LLAVE_DER       reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    LLAVE_IZQ       reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    RETURN          reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    ELSE            reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)
    ELSEIF          reduce using rule 111 (additive_expression -> VARIABLE INCREMENTO PUNTOYCOMA .)


state 97

    (44) var_declaration -> VARIABLE IGUAL VARIABLE . PUNTOYCOMA var_declaration
    (45) var_declaration -> VARIABLE IGUAL VARIABLE . PUNTOYCOMA
    (110) additive_expression -> VARIABLE . DECREMENTO PUNTOYCOMA
    (111) additive_expression -> VARIABLE . INCREMENTO PUNTOYCOMA
    (112) additive_expression -> VARIABLE . DECREMENTO
    (113) additive_expression -> VARIABLE . INCREMENTO
    (96) var -> VARIABLE .
    (97) var -> VARIABLE . CORCHETE_IZQ expression CORCHETE_DER

  ! shift/reduce conflict for PUNTOYCOMA resolved as shift
    PUNTOYCOMA      shift and go to state 158
    DECREMENTO      shift and go to state 56
    INCREMENTO      shift and go to state 58
    MULTIPLICACION  reduce using rule 96 (var -> VARIABLE .)
    DIVISION        reduce using rule 96 (var -> VARIABLE .)
    MENOR           reduce using rule 96 (var -> VARIABLE .)
    MENOR_IGUAL     reduce using rule 96 (var -> VARIABLE .)
    MAYOR           reduce using rule 96 (var -> VARIABLE .)
    MAYOR_IGUAL     reduce using rule 96 (var -> VARIABLE .)
    DESIGUAL        reduce using rule 96 (var -> VARIABLE .)
    DISTINTO        reduce using rule 96 (var -> VARIABLE .)
    ES_IGUAL        reduce using rule 96 (var -> VARIABLE .)
    SUMA            reduce using rule 96 (var -> VARIABLE .)
    RESTA           reduce using rule 96 (var -> VARIABLE .)
    CORCHETE_IZQ    shift and go to state 61

  ! PUNTOYCOMA      [ reduce using rule 96 (var -> VARIABLE .) ]


state 98

    (40) var_declaration -> VARIABLE IGUAL NUMERO . PUNTOYCOMA var_declaration
    (41) var_declaration -> VARIABLE IGUAL NUMERO . PUNTOYCOMA
    (122) factor -> NUMERO .

  ! shift/reduce conflict for PUNTOYCOMA resolved as shift
    PUNTOYCOMA      shift and go to state 159
    MULTIPLICACION  reduce using rule 122 (factor -> NUMERO .)
    DIVISION        reduce using rule 122 (factor -> NUMERO .)
    MENOR           reduce using rule 122 (factor -> NUMERO .)
    MENOR_IGUAL     reduce using rule 122 (factor -> NUMERO .)
    MAYOR           reduce using rule 122 (factor -> NUMERO .)
    MAYOR_IGUAL     reduce using rule 122 (factor -> NUMERO .)
    DESIGUAL        reduce using rule 122 (factor -> NUMERO .)
    DISTINTO        reduce using rule 122 (factor -> NUMERO .)
    ES_IGUAL        reduce using rule 122 (factor -> NUMERO .)
    SUMA            reduce using rule 122 (factor -> NUMERO .)
    RESTA           reduce using rule 122 (factor -> NUMERO .)

  ! PUNTOYCOMA      [ reduce using rule 122 (factor -> NUMERO .) ]


state 99

    (42) var_declaration -> VARIABLE IGUAL boolean . PUNTOYCOMA var_declaration
    (43) var_declaration -> VARIABLE IGUAL boolean . PUNTOYCOMA
    (123) factor -> boolean .

  ! shift/reduce conflict for PUNTOYCOMA resolved as shift
    PUNTOYCOMA      shift and go to state 160
    MULTIPLICACION  reduce using rule 123 (factor -> boolean .)
    DIVISION        reduce using rule 123 (factor -> boolean .)
    MENOR           reduce using rule 123 (factor -> boolean .)
    MENOR_IGUAL     reduce using rule 123 (factor -> boolean .)
    MAYOR           reduce using rule 123 (factor -> boolean .)
    MAYOR_IGUAL     reduce using rule 123 (factor -> boolean .)
    DESIGUAL        reduce using rule 123 (factor -> boolean .)
    DISTINTO        reduce using rule 123 (factor -> boolean .)
    ES_IGUAL        reduce using rule 123 (factor -> boolean .)
    SUMA            reduce using rule 123 (factor -> boolean .)
    RESTA           reduce using rule 123 (factor -> boolean .)

  ! PUNTOYCOMA      [ reduce using rule 123 (factor -> boolean .) ]


state 100

    (49) var_declaration -> VARIABLE IGUAL simple_expression . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 161


state 101

    (98) simple_expression -> additive_expression . relop additive_expression
    (99) simple_expression -> additive_expression .
    (108) additive_expression -> additive_expression . addop term
    (101) relop -> . MENOR
    (102) relop -> . MENOR_IGUAL
    (103) relop -> . MAYOR
    (104) relop -> . MAYOR_IGUAL
    (105) relop -> . DESIGUAL
    (106) relop -> . DISTINTO
    (107) relop -> . ES_IGUAL
    (114) addop -> . SUMA
    (115) addop -> . RESTA

    PUNTOYCOMA      reduce using rule 99 (simple_expression -> additive_expression .)
    VARIABLE        reduce using rule 99 (simple_expression -> additive_expression .)
    VAR             reduce using rule 99 (simple_expression -> additive_expression .)
    TIMESTIMES      reduce using rule 99 (simple_expression -> additive_expression .)
    AMPERSANT       reduce using rule 99 (simple_expression -> additive_expression .)
    FUNCTION        reduce using rule 99 (simple_expression -> additive_expression .)
    PRIVATE         reduce using rule 99 (simple_expression -> additive_expression .)
    PUBLIC          reduce using rule 99 (simple_expression -> additive_expression .)
    PROTECTED       reduce using rule 99 (simple_expression -> additive_expression .)
    REQUIRE         reduce using rule 99 (simple_expression -> additive_expression .)
    INCLUDE         reduce using rule 99 (simple_expression -> additive_expression .)
    CLASS           reduce using rule 99 (simple_expression -> additive_expression .)
    IF              reduce using rule 99 (simple_expression -> additive_expression .)
    SWITCH          reduce using rule 99 (simple_expression -> additive_expression .)
    CASE            reduce using rule 99 (simple_expression -> additive_expression .)
    DEFAULT         reduce using rule 99 (simple_expression -> additive_expression .)
    FOR             reduce using rule 99 (simple_expression -> additive_expression .)
    WHILE           reduce using rule 99 (simple_expression -> additive_expression .)
    DO              reduce using rule 99 (simple_expression -> additive_expression .)
    ALERT           reduce using rule 99 (simple_expression -> additive_expression .)
    PARENT_IZQ      reduce using rule 99 (simple_expression -> additive_expression .)
    NUMERO          reduce using rule 99 (simple_expression -> additive_expression .)
    IDVAR           reduce using rule 99 (simple_expression -> additive_expression .)
    TRUE            reduce using rule 99 (simple_expression -> additive_expression .)
    FALSE           reduce using rule 99 (simple_expression -> additive_expression .)
    ECHO            reduce using rule 99 (simple_expression -> additive_expression .)
    $end            reduce using rule 99 (simple_expression -> additive_expression .)
    LLAVE_DER       reduce using rule 99 (simple_expression -> additive_expression .)
    LLAVE_IZQ       reduce using rule 99 (simple_expression -> additive_expression .)
    RETURN          reduce using rule 99 (simple_expression -> additive_expression .)
    AND             reduce using rule 99 (simple_expression -> additive_expression .)
    OR              reduce using rule 99 (simple_expression -> additive_expression .)
    MENOR           shift and go to state 115
    MENOR_IGUAL     shift and go to state 116
    MAYOR           shift and go to state 117
    MAYOR_IGUAL     shift and go to state 118
    DESIGUAL        shift and go to state 119
    DISTINTO        shift and go to state 120
    ES_IGUAL        shift and go to state 121
    SUMA            shift and go to state 48
    RESTA           shift and go to state 49

    relop                          shift and go to state 122
    addop                          shift and go to state 47

state 102

    (100) simple_expression -> alert_stmt .

    PUNTOYCOMA      reduce using rule 100 (simple_expression -> alert_stmt .)
    VARIABLE        reduce using rule 100 (simple_expression -> alert_stmt .)
    VAR             reduce using rule 100 (simple_expression -> alert_stmt .)
    TIMESTIMES      reduce using rule 100 (simple_expression -> alert_stmt .)
    AMPERSANT       reduce using rule 100 (simple_expression -> alert_stmt .)
    FUNCTION        reduce using rule 100 (simple_expression -> alert_stmt .)
    PRIVATE         reduce using rule 100 (simple_expression -> alert_stmt .)
    PUBLIC          reduce using rule 100 (simple_expression -> alert_stmt .)
    PROTECTED       reduce using rule 100 (simple_expression -> alert_stmt .)
    REQUIRE         reduce using rule 100 (simple_expression -> alert_stmt .)
    INCLUDE         reduce using rule 100 (simple_expression -> alert_stmt .)
    CLASS           reduce using rule 100 (simple_expression -> alert_stmt .)
    IF              reduce using rule 100 (simple_expression -> alert_stmt .)
    SWITCH          reduce using rule 100 (simple_expression -> alert_stmt .)
    CASE            reduce using rule 100 (simple_expression -> alert_stmt .)
    DEFAULT         reduce using rule 100 (simple_expression -> alert_stmt .)
    FOR             reduce using rule 100 (simple_expression -> alert_stmt .)
    WHILE           reduce using rule 100 (simple_expression -> alert_stmt .)
    DO              reduce using rule 100 (simple_expression -> alert_stmt .)
    ALERT           reduce using rule 100 (simple_expression -> alert_stmt .)
    PARENT_IZQ      reduce using rule 100 (simple_expression -> alert_stmt .)
    NUMERO          reduce using rule 100 (simple_expression -> alert_stmt .)
    IDVAR           reduce using rule 100 (simple_expression -> alert_stmt .)
    TRUE            reduce using rule 100 (simple_expression -> alert_stmt .)
    FALSE           reduce using rule 100 (simple_expression -> alert_stmt .)
    ECHO            reduce using rule 100 (simple_expression -> alert_stmt .)
    $end            reduce using rule 100 (simple_expression -> alert_stmt .)
    LLAVE_DER       reduce using rule 100 (simple_expression -> alert_stmt .)
    LLAVE_IZQ       reduce using rule 100 (simple_expression -> alert_stmt .)
    RETURN          reduce using rule 100 (simple_expression -> alert_stmt .)
    AND             reduce using rule 100 (simple_expression -> alert_stmt .)
    OR              reduce using rule 100 (simple_expression -> alert_stmt .)


state 103

    (132) typeclass -> VARIABLE IDVAR IGUAL . NEW constructor PUNTOYCOMA

    NEW             shift and go to state 162


state 104

    (97) var -> VARIABLE CORCHETE_IZQ expression . CORCHETE_DER
    (92) expression -> expression . AND expression
    (93) expression -> expression . OR expression

    CORCHETE_DER    shift and go to state 163
    AND             shift and go to state 111
    OR              shift and go to state 112


state 105

    (36) var_declaration -> VAR VARIABLE IGUAL . simple_expression
    (98) simple_expression -> . additive_expression relop additive_expression
    (99) simple_expression -> . additive_expression
    (100) simple_expression -> . alert_stmt
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty
    (116) term -> . term mulop factor
    (117) term -> . factor
    (135) empty -> .
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for ALERT resolved as shift
  ! shift/reduce conflict for PARENT_IZQ resolved as shift
  ! shift/reduce conflict for NUMERO resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    VARIABLE        shift and go to state 164
    ALERT           shift and go to state 40
    VAR             reduce using rule 135 (empty -> .)
    TIMESTIMES      reduce using rule 135 (empty -> .)
    AMPERSANT       reduce using rule 135 (empty -> .)
    FUNCTION        reduce using rule 135 (empty -> .)
    PRIVATE         reduce using rule 135 (empty -> .)
    PUBLIC          reduce using rule 135 (empty -> .)
    PROTECTED       reduce using rule 135 (empty -> .)
    REQUIRE         reduce using rule 135 (empty -> .)
    INCLUDE         reduce using rule 135 (empty -> .)
    CLASS           reduce using rule 135 (empty -> .)
    IF              reduce using rule 135 (empty -> .)
    SWITCH          reduce using rule 135 (empty -> .)
    CASE            reduce using rule 135 (empty -> .)
    DEFAULT         reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    DO              reduce using rule 135 (empty -> .)
    ECHO            reduce using rule 135 (empty -> .)
    $end            reduce using rule 135 (empty -> .)
    PUNTOYCOMA      reduce using rule 135 (empty -> .)
    LLAVE_DER       reduce using rule 135 (empty -> .)
    LLAVE_IZQ       reduce using rule 135 (empty -> .)
    RETURN          reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

  ! VARIABLE        [ reduce using rule 135 (empty -> .) ]
  ! ALERT           [ reduce using rule 135 (empty -> .) ]
  ! PARENT_IZQ      [ reduce using rule 135 (empty -> .) ]
  ! NUMERO          [ reduce using rule 135 (empty -> .) ]
  ! IDVAR           [ reduce using rule 135 (empty -> .) ]
  ! TRUE            [ reduce using rule 135 (empty -> .) ]
  ! FALSE           [ reduce using rule 135 (empty -> .) ]

    simple_expression              shift and go to state 165
    additive_expression            shift and go to state 101
    alert_stmt                     shift and go to state 102
    term                           shift and go to state 15
    empty                          shift and go to state 71
    factor                         shift and go to state 41
    var                            shift and go to state 34
    boolean                        shift and go to state 20

state 106

    (38) var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .
    (39) var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA . var_declaration
    (35) var_declaration -> . VARIABLE PUNTOYCOMA var_declaration
    (36) var_declaration -> . VAR VARIABLE IGUAL simple_expression
    (37) var_declaration -> . VARIABLE PUNTOYCOMA
    (38) var_declaration -> . TIMESTIMES VARIABLE PUNTOYCOMA
    (39) var_declaration -> . TIMESTIMES VARIABLE PUNTOYCOMA var_declaration
    (40) var_declaration -> . VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration
    (41) var_declaration -> . VARIABLE IGUAL NUMERO PUNTOYCOMA
    (42) var_declaration -> . VARIABLE IGUAL boolean PUNTOYCOMA var_declaration
    (43) var_declaration -> . VARIABLE IGUAL boolean PUNTOYCOMA
    (44) var_declaration -> . VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration
    (45) var_declaration -> . VARIABLE IGUAL VARIABLE PUNTOYCOMA
    (46) var_declaration -> . AMPERSANT VARIABLE PUNTOYCOMA var_declaration
    (47) var_declaration -> . AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt
    (48) var_declaration -> . AMPERSANT VARIABLE PUNTOYCOMA
    (49) var_declaration -> . VARIABLE IGUAL simple_expression PUNTOYCOMA

    VARIABLE        reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    VAR             reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    TIMESTIMES      reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    AMPERSANT       reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    FUNCTION        reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    PRIVATE         reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    PUBLIC          reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    PROTECTED       reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    REQUIRE         reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    INCLUDE         reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    CLASS           reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    IF              reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    SWITCH          reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    CASE            reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    DEFAULT         reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    FOR             reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    WHILE           reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    DO              reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    ALERT           reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    PARENT_IZQ      reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    NUMERO          reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    IDVAR           reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    TRUE            reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    FALSE           reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    ECHO            reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    $end            reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    PUNTOYCOMA      reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    LLAVE_DER       reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    LLAVE_IZQ       reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    RETURN          reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    AND             reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)
    OR              reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA .)

  ! VARIABLE        [ shift and go to state 94 ]
  ! VAR             [ shift and go to state 17 ]
  ! TIMESTIMES      [ shift and go to state 18 ]
  ! AMPERSANT       [ shift and go to state 21 ]

    var_declaration                shift and go to state 166

state 107

    (46) var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA . var_declaration
    (48) var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .
    (35) var_declaration -> . VARIABLE PUNTOYCOMA var_declaration
    (36) var_declaration -> . VAR VARIABLE IGUAL simple_expression
    (37) var_declaration -> . VARIABLE PUNTOYCOMA
    (38) var_declaration -> . TIMESTIMES VARIABLE PUNTOYCOMA
    (39) var_declaration -> . TIMESTIMES VARIABLE PUNTOYCOMA var_declaration
    (40) var_declaration -> . VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration
    (41) var_declaration -> . VARIABLE IGUAL NUMERO PUNTOYCOMA
    (42) var_declaration -> . VARIABLE IGUAL boolean PUNTOYCOMA var_declaration
    (43) var_declaration -> . VARIABLE IGUAL boolean PUNTOYCOMA
    (44) var_declaration -> . VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration
    (45) var_declaration -> . VARIABLE IGUAL VARIABLE PUNTOYCOMA
    (46) var_declaration -> . AMPERSANT VARIABLE PUNTOYCOMA var_declaration
    (47) var_declaration -> . AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt
    (48) var_declaration -> . AMPERSANT VARIABLE PUNTOYCOMA
    (49) var_declaration -> . VARIABLE IGUAL simple_expression PUNTOYCOMA

    VARIABLE        reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    VAR             reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    TIMESTIMES      reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    AMPERSANT       reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    FUNCTION        reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    PRIVATE         reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    PUBLIC          reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    PROTECTED       reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    REQUIRE         reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    INCLUDE         reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    CLASS           reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    IF              reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    SWITCH          reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    CASE            reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    DEFAULT         reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    FOR             reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    WHILE           reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    DO              reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    ALERT           reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    PARENT_IZQ      reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    NUMERO          reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    IDVAR           reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    TRUE            reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    FALSE           reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    ECHO            reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    $end            reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    PUNTOYCOMA      reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    LLAVE_DER       reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    LLAVE_IZQ       reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    RETURN          reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    AND             reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)
    OR              reduce using rule 48 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA .)

  ! VARIABLE        [ shift and go to state 94 ]
  ! VAR             [ shift and go to state 17 ]
  ! TIMESTIMES      [ shift and go to state 18 ]
  ! AMPERSANT       [ shift and go to state 21 ]

    var_declaration                shift and go to state 167

state 108

    (47) var_declaration -> AMPERSANT VARIABLE IGUAL . VARIABLE PUNTOYCOMA selection_stmt

    VARIABLE        shift and go to state 168


state 109

    (50) fun_declaration -> FUNCTION VARIABLE PARENT_IZQ . params PARENT_DER
    (51) fun_declaration -> FUNCTION VARIABLE PARENT_IZQ . params PARENT_DER compount_stmt
    (52) params -> . param_list
    (53) params -> . empty
    (54) param_list -> . param_list COMA param_list
    (55) param_list -> . param
    (135) empty -> .
    (56) param -> . VARIABLE
    (57) param -> . VARIABLE CORCHETE_IZQ CORCHETE_DER PUNTOYCOMA

    PARENT_DER      reduce using rule 135 (empty -> .)
    VARIABLE        shift and go to state 169

    params                         shift and go to state 170
    param_list                     shift and go to state 171
    empty                          shift and go to state 172
    param                          shift and go to state 173

state 110

    (120) factor -> PARENT_IZQ expression PARENT_DER .

    MULTIPLICACION  reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    DIVISION        reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    SUMA            reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    RESTA           reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    VARIABLE        reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    VAR             reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    TIMESTIMES      reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    AMPERSANT       reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    FUNCTION        reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    PRIVATE         reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    PUBLIC          reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    PROTECTED       reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    REQUIRE         reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    INCLUDE         reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    CLASS           reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    IF              reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    SWITCH          reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    CASE            reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    DEFAULT         reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    FOR             reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    WHILE           reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    DO              reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    ALERT           reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    PARENT_IZQ      reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    NUMERO          reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    IDVAR           reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    TRUE            reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    FALSE           reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    ECHO            reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    $end            reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    MENOR           reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    MENOR_IGUAL     reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    MAYOR           reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    MAYOR_IGUAL     reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    DESIGUAL        reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    DISTINTO        reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    ES_IGUAL        reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    PARENT_DER      reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    AND             reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    OR              reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    PUNTOYCOMA      reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    CORCHETE_DER    reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    COMA            reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    BREAK           reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    LLAVE_DER       reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    LLAVE_IZQ       reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    RETURN          reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    ELSE            reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)
    ELSEIF          reduce using rule 120 (factor -> PARENT_IZQ expression PARENT_DER .)


state 111

    (92) expression -> expression AND . expression
    (89) expression -> . VARIABLE relop NUMERO
    (90) expression -> . simple_expression
    (91) expression -> . VARIABLE IGUAL AMPERSANT VARIABLE
    (92) expression -> . expression AND expression
    (93) expression -> . expression OR expression
    (94) expression -> . additive_expression
    (95) expression -> . alert_stmt
    (98) simple_expression -> . additive_expression relop additive_expression
    (99) simple_expression -> . additive_expression
    (100) simple_expression -> . alert_stmt
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty
    (116) term -> . term mulop factor
    (117) term -> . factor
    (135) empty -> .
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for ALERT resolved as shift
  ! shift/reduce conflict for PARENT_IZQ resolved as shift
  ! shift/reduce conflict for NUMERO resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    VARIABLE        shift and go to state 67
    ALERT           shift and go to state 40
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    PARENT_DER      reduce using rule 135 (empty -> .)
    CORCHETE_DER    reduce using rule 135 (empty -> .)
    COMA            reduce using rule 135 (empty -> .)
    PUNTOYCOMA      reduce using rule 135 (empty -> .)
    BREAK           reduce using rule 135 (empty -> .)
    ELSE            reduce using rule 135 (empty -> .)
    ELSEIF          reduce using rule 135 (empty -> .)
    VAR             reduce using rule 135 (empty -> .)
    TIMESTIMES      reduce using rule 135 (empty -> .)
    AMPERSANT       reduce using rule 135 (empty -> .)
    FUNCTION        reduce using rule 135 (empty -> .)
    PRIVATE         reduce using rule 135 (empty -> .)
    PUBLIC          reduce using rule 135 (empty -> .)
    PROTECTED       reduce using rule 135 (empty -> .)
    REQUIRE         reduce using rule 135 (empty -> .)
    INCLUDE         reduce using rule 135 (empty -> .)
    CLASS           reduce using rule 135 (empty -> .)
    IF              reduce using rule 135 (empty -> .)
    SWITCH          reduce using rule 135 (empty -> .)
    CASE            reduce using rule 135 (empty -> .)
    DEFAULT         reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    DO              reduce using rule 135 (empty -> .)
    ECHO            reduce using rule 135 (empty -> .)
    $end            reduce using rule 135 (empty -> .)
    LLAVE_DER       reduce using rule 135 (empty -> .)
    LLAVE_IZQ       reduce using rule 135 (empty -> .)
    RETURN          reduce using rule 135 (empty -> .)
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

  ! VARIABLE        [ reduce using rule 135 (empty -> .) ]
  ! ALERT           [ reduce using rule 135 (empty -> .) ]
  ! PARENT_IZQ      [ reduce using rule 135 (empty -> .) ]
  ! NUMERO          [ reduce using rule 135 (empty -> .) ]
  ! IDVAR           [ reduce using rule 135 (empty -> .) ]
  ! TRUE            [ reduce using rule 135 (empty -> .) ]
  ! FALSE           [ reduce using rule 135 (empty -> .) ]

    expression                     shift and go to state 174
    simple_expression              shift and go to state 68
    additive_expression            shift and go to state 69
    alert_stmt                     shift and go to state 70
    term                           shift and go to state 15
    empty                          shift and go to state 71
    factor                         shift and go to state 41
    var                            shift and go to state 34
    boolean                        shift and go to state 20

state 112

    (93) expression -> expression OR . expression
    (89) expression -> . VARIABLE relop NUMERO
    (90) expression -> . simple_expression
    (91) expression -> . VARIABLE IGUAL AMPERSANT VARIABLE
    (92) expression -> . expression AND expression
    (93) expression -> . expression OR expression
    (94) expression -> . additive_expression
    (95) expression -> . alert_stmt
    (98) simple_expression -> . additive_expression relop additive_expression
    (99) simple_expression -> . additive_expression
    (100) simple_expression -> . alert_stmt
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty
    (116) term -> . term mulop factor
    (117) term -> . factor
    (135) empty -> .
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for ALERT resolved as shift
  ! shift/reduce conflict for PARENT_IZQ resolved as shift
  ! shift/reduce conflict for NUMERO resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    VARIABLE        shift and go to state 67
    ALERT           shift and go to state 40
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    PARENT_DER      reduce using rule 135 (empty -> .)
    CORCHETE_DER    reduce using rule 135 (empty -> .)
    COMA            reduce using rule 135 (empty -> .)
    PUNTOYCOMA      reduce using rule 135 (empty -> .)
    BREAK           reduce using rule 135 (empty -> .)
    ELSE            reduce using rule 135 (empty -> .)
    ELSEIF          reduce using rule 135 (empty -> .)
    VAR             reduce using rule 135 (empty -> .)
    TIMESTIMES      reduce using rule 135 (empty -> .)
    AMPERSANT       reduce using rule 135 (empty -> .)
    FUNCTION        reduce using rule 135 (empty -> .)
    PRIVATE         reduce using rule 135 (empty -> .)
    PUBLIC          reduce using rule 135 (empty -> .)
    PROTECTED       reduce using rule 135 (empty -> .)
    REQUIRE         reduce using rule 135 (empty -> .)
    INCLUDE         reduce using rule 135 (empty -> .)
    CLASS           reduce using rule 135 (empty -> .)
    IF              reduce using rule 135 (empty -> .)
    SWITCH          reduce using rule 135 (empty -> .)
    CASE            reduce using rule 135 (empty -> .)
    DEFAULT         reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    DO              reduce using rule 135 (empty -> .)
    ECHO            reduce using rule 135 (empty -> .)
    $end            reduce using rule 135 (empty -> .)
    LLAVE_DER       reduce using rule 135 (empty -> .)
    LLAVE_IZQ       reduce using rule 135 (empty -> .)
    RETURN          reduce using rule 135 (empty -> .)
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

  ! VARIABLE        [ reduce using rule 135 (empty -> .) ]
  ! ALERT           [ reduce using rule 135 (empty -> .) ]
  ! PARENT_IZQ      [ reduce using rule 135 (empty -> .) ]
  ! NUMERO          [ reduce using rule 135 (empty -> .) ]
  ! IDVAR           [ reduce using rule 135 (empty -> .) ]
  ! TRUE            [ reduce using rule 135 (empty -> .) ]
  ! FALSE           [ reduce using rule 135 (empty -> .) ]

    expression                     shift and go to state 175
    simple_expression              shift and go to state 68
    additive_expression            shift and go to state 69
    alert_stmt                     shift and go to state 70
    term                           shift and go to state 15
    empty                          shift and go to state 71
    factor                         shift and go to state 41
    var                            shift and go to state 34
    boolean                        shift and go to state 20

state 113

    (89) expression -> VARIABLE relop . NUMERO

    NUMERO          shift and go to state 176


state 114

    (91) expression -> VARIABLE IGUAL . AMPERSANT VARIABLE

    AMPERSANT       shift and go to state 177


state 115

    (101) relop -> MENOR .

    NUMERO          reduce using rule 101 (relop -> MENOR .)
    VARIABLE        reduce using rule 101 (relop -> MENOR .)
    PARENT_IZQ      reduce using rule 101 (relop -> MENOR .)
    IDVAR           reduce using rule 101 (relop -> MENOR .)
    TRUE            reduce using rule 101 (relop -> MENOR .)
    FALSE           reduce using rule 101 (relop -> MENOR .)


state 116

    (102) relop -> MENOR_IGUAL .

    NUMERO          reduce using rule 102 (relop -> MENOR_IGUAL .)
    VARIABLE        reduce using rule 102 (relop -> MENOR_IGUAL .)
    PARENT_IZQ      reduce using rule 102 (relop -> MENOR_IGUAL .)
    IDVAR           reduce using rule 102 (relop -> MENOR_IGUAL .)
    TRUE            reduce using rule 102 (relop -> MENOR_IGUAL .)
    FALSE           reduce using rule 102 (relop -> MENOR_IGUAL .)


state 117

    (103) relop -> MAYOR .

    NUMERO          reduce using rule 103 (relop -> MAYOR .)
    VARIABLE        reduce using rule 103 (relop -> MAYOR .)
    PARENT_IZQ      reduce using rule 103 (relop -> MAYOR .)
    IDVAR           reduce using rule 103 (relop -> MAYOR .)
    TRUE            reduce using rule 103 (relop -> MAYOR .)
    FALSE           reduce using rule 103 (relop -> MAYOR .)


state 118

    (104) relop -> MAYOR_IGUAL .

    NUMERO          reduce using rule 104 (relop -> MAYOR_IGUAL .)
    VARIABLE        reduce using rule 104 (relop -> MAYOR_IGUAL .)
    PARENT_IZQ      reduce using rule 104 (relop -> MAYOR_IGUAL .)
    IDVAR           reduce using rule 104 (relop -> MAYOR_IGUAL .)
    TRUE            reduce using rule 104 (relop -> MAYOR_IGUAL .)
    FALSE           reduce using rule 104 (relop -> MAYOR_IGUAL .)


state 119

    (105) relop -> DESIGUAL .

    NUMERO          reduce using rule 105 (relop -> DESIGUAL .)
    VARIABLE        reduce using rule 105 (relop -> DESIGUAL .)
    PARENT_IZQ      reduce using rule 105 (relop -> DESIGUAL .)
    IDVAR           reduce using rule 105 (relop -> DESIGUAL .)
    TRUE            reduce using rule 105 (relop -> DESIGUAL .)
    FALSE           reduce using rule 105 (relop -> DESIGUAL .)


state 120

    (106) relop -> DISTINTO .

    NUMERO          reduce using rule 106 (relop -> DISTINTO .)
    VARIABLE        reduce using rule 106 (relop -> DISTINTO .)
    PARENT_IZQ      reduce using rule 106 (relop -> DISTINTO .)
    IDVAR           reduce using rule 106 (relop -> DISTINTO .)
    TRUE            reduce using rule 106 (relop -> DISTINTO .)
    FALSE           reduce using rule 106 (relop -> DISTINTO .)


state 121

    (107) relop -> ES_IGUAL .

    NUMERO          reduce using rule 107 (relop -> ES_IGUAL .)
    VARIABLE        reduce using rule 107 (relop -> ES_IGUAL .)
    PARENT_IZQ      reduce using rule 107 (relop -> ES_IGUAL .)
    IDVAR           reduce using rule 107 (relop -> ES_IGUAL .)
    TRUE            reduce using rule 107 (relop -> ES_IGUAL .)
    FALSE           reduce using rule 107 (relop -> ES_IGUAL .)


state 122

    (98) simple_expression -> additive_expression relop . additive_expression
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (116) term -> . term mulop factor
    (117) term -> . factor
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

    VARIABLE        shift and go to state 164
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    additive_expression            shift and go to state 178
    term                           shift and go to state 15
    factor                         shift and go to state 41
    var                            shift and go to state 34
    boolean                        shift and go to state 20

state 123

    (24) header_declaration -> REQUIRE PARENT_IZQ STRING . PARENT_DER PUNTOYCOMA

    PARENT_DER      shift and go to state 179


state 124

    (25) header_declaration -> INCLUDE PARENT_IZQ STRING . PARENT_DER PUNTOYCOMA

    PARENT_DER      shift and go to state 180


state 125

    (27) class_declaration -> CLASS VARIABLE LLAVE_IZQ . attribute LLAVE_DER
    (28) attribute -> . attribute area var_declaration
    (29) attribute -> . area var_declaration
    (30) attribute -> . attribute area fun_declaration
    (31) attribute -> . area fun_declaration
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED

    PRIVATE         shift and go to state 24
    PUBLIC          shift and go to state 25
    PROTECTED       shift and go to state 26

    attribute                      shift and go to state 181
    area                           shift and go to state 182

state 126

    (124) factor -> IDVAR PARENT_IZQ args . PARENT_DER

    PARENT_DER      shift and go to state 183


state 127

    (125) args -> args_list .
    (128) args_list -> args_list . COMA expression

    PARENT_DER      reduce using rule 125 (args -> args_list .)
    COMA            shift and go to state 184


state 128

    (126) args -> empty .
    (23) alert_stmt -> empty .

  ! reduce/reduce conflict for PARENT_DER resolved using rule 23 (alert_stmt -> empty .)
    AND             reduce using rule 23 (alert_stmt -> empty .)
    OR              reduce using rule 23 (alert_stmt -> empty .)
    COMA            reduce using rule 23 (alert_stmt -> empty .)
    PARENT_DER      reduce using rule 23 (alert_stmt -> empty .)

  ! PARENT_DER      [ reduce using rule 126 (args -> empty .) ]


state 129

    (127) args -> VOID .

    PARENT_DER      reduce using rule 127 (args -> VOID .)


state 130

    (129) args_list -> expression .
    (92) expression -> expression . AND expression
    (93) expression -> expression . OR expression

    COMA            reduce using rule 129 (args_list -> expression .)
    PARENT_DER      reduce using rule 129 (args_list -> expression .)
    AND             shift and go to state 111
    OR              shift and go to state 112


state 131

    (77) selection_stmt -> IF PARENT_IZQ expression . PARENT_DER statement
    (78) selection_stmt -> IF PARENT_IZQ expression . PARENT_DER statement selection
    (92) expression -> expression . AND expression
    (93) expression -> expression . OR expression

    PARENT_DER      shift and go to state 185
    AND             shift and go to state 111
    OR              shift and go to state 112


state 132

    (81) selection_stmt -> SWITCH PARENT_IZQ var . PARENT_DER statement

    PARENT_DER      shift and go to state 186


state 133

    (82) selection_stmt -> CASE NUMERO DOS_PUNTOS . statement BREAK PUNTOYCOMA
    (64) statement -> . expression_stmt
    (65) statement -> . compount_stmt
    (66) statement -> . selection_stmt
    (67) statement -> . iteration_stmt
    (68) statement -> . return_stmt
    (69) statement -> . class_declaration
    (70) statement -> . echo_stmt
    (71) statement -> . expression
    (72) statement -> . additive_expression
    (73) statement -> . alert_stmt
    (74) expression_stmt -> . expression PUNTOYCOMA
    (75) expression_stmt -> . additive_expression
    (76) expression_stmt -> . alert_stmt
    (58) compount_stmt -> . LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER
    (77) selection_stmt -> . IF PARENT_IZQ expression PARENT_DER statement
    (78) selection_stmt -> . IF PARENT_IZQ expression PARENT_DER statement selection
    (81) selection_stmt -> . SWITCH PARENT_IZQ var PARENT_DER statement
    (82) selection_stmt -> . CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA
    (83) selection_stmt -> . DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA
    (84) iteration_stmt -> . FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement
    (85) iteration_stmt -> . WHILE PARENT_IZQ expression PARENT_DER statement
    (86) iteration_stmt -> . DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER
    (87) return_stmt -> . RETURN PUNTOYCOMA
    (88) return_stmt -> . RETURN expression PUNTOYCOMA
    (26) class_declaration -> . area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
    (27) class_declaration -> . CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
    (16) echo_stmt -> . echo_stmt ECHO STRING PUNTOYCOMA
    (17) echo_stmt -> . echo_stmt ECHO IDVAR PUNTOYCOMA
    (18) echo_stmt -> . empty
    (19) echo_stmt -> . echo_stmt ECHO NUMERO PUNTOYCOMA
    (20) echo_stmt -> . echo_stmt ECHO boolean PUNTOYCOMA
    (21) echo_stmt -> . echo_stmt ECHO fun_declaration PUNTOYCOMA
    (89) expression -> . VARIABLE relop NUMERO
    (90) expression -> . simple_expression
    (91) expression -> . VARIABLE IGUAL AMPERSANT VARIABLE
    (92) expression -> . expression AND expression
    (93) expression -> . expression OR expression
    (94) expression -> . additive_expression
    (95) expression -> . alert_stmt
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED
    (135) empty -> .
    (98) simple_expression -> . additive_expression relop additive_expression
    (99) simple_expression -> . additive_expression
    (100) simple_expression -> . alert_stmt
    (116) term -> . term mulop factor
    (117) term -> . factor
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

    LLAVE_IZQ       shift and go to state 145
    IF              shift and go to state 32
    SWITCH          shift and go to state 33
    CASE            shift and go to state 35
    DEFAULT         shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    DO              shift and go to state 39
    RETURN          shift and go to state 146
    CLASS           shift and go to state 29
    VARIABLE        shift and go to state 67
    ALERT           shift and go to state 40
    PRIVATE         shift and go to state 24
    PUBLIC          shift and go to state 25
    PROTECTED       shift and go to state 26
    ECHO            reduce using rule 135 (empty -> .)
    BREAK           reduce using rule 135 (empty -> .)
    PUNTOYCOMA      reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    statement                      shift and go to state 187
    expression_stmt                shift and go to state 135
    compount_stmt                  shift and go to state 136
    selection_stmt                 shift and go to state 137
    iteration_stmt                 shift and go to state 138
    return_stmt                    shift and go to state 139
    class_declaration              shift and go to state 140
    echo_stmt                      shift and go to state 141
    expression                     shift and go to state 142
    additive_expression            shift and go to state 143
    alert_stmt                     shift and go to state 144
    var                            shift and go to state 34
    area                           shift and go to state 147
    empty                          shift and go to state 31
    boolean                        shift and go to state 20
    simple_expression              shift and go to state 68
    term                           shift and go to state 15
    factor                         shift and go to state 41

state 134

    (83) selection_stmt -> DEFAULT DOS_PUNTOS statement . BREAK PUNTOYCOMA

    BREAK           shift and go to state 188


state 135

    (64) statement -> expression_stmt .

    BREAK           reduce using rule 64 (statement -> expression_stmt .)
    PUNTOYCOMA      reduce using rule 64 (statement -> expression_stmt .)
    ELSE            reduce using rule 64 (statement -> expression_stmt .)
    ELSEIF          reduce using rule 64 (statement -> expression_stmt .)
    VARIABLE        reduce using rule 64 (statement -> expression_stmt .)
    VAR             reduce using rule 64 (statement -> expression_stmt .)
    TIMESTIMES      reduce using rule 64 (statement -> expression_stmt .)
    AMPERSANT       reduce using rule 64 (statement -> expression_stmt .)
    FUNCTION        reduce using rule 64 (statement -> expression_stmt .)
    PRIVATE         reduce using rule 64 (statement -> expression_stmt .)
    PUBLIC          reduce using rule 64 (statement -> expression_stmt .)
    PROTECTED       reduce using rule 64 (statement -> expression_stmt .)
    REQUIRE         reduce using rule 64 (statement -> expression_stmt .)
    INCLUDE         reduce using rule 64 (statement -> expression_stmt .)
    CLASS           reduce using rule 64 (statement -> expression_stmt .)
    IF              reduce using rule 64 (statement -> expression_stmt .)
    SWITCH          reduce using rule 64 (statement -> expression_stmt .)
    CASE            reduce using rule 64 (statement -> expression_stmt .)
    DEFAULT         reduce using rule 64 (statement -> expression_stmt .)
    FOR             reduce using rule 64 (statement -> expression_stmt .)
    WHILE           reduce using rule 64 (statement -> expression_stmt .)
    DO              reduce using rule 64 (statement -> expression_stmt .)
    ALERT           reduce using rule 64 (statement -> expression_stmt .)
    PARENT_IZQ      reduce using rule 64 (statement -> expression_stmt .)
    NUMERO          reduce using rule 64 (statement -> expression_stmt .)
    IDVAR           reduce using rule 64 (statement -> expression_stmt .)
    TRUE            reduce using rule 64 (statement -> expression_stmt .)
    FALSE           reduce using rule 64 (statement -> expression_stmt .)
    ECHO            reduce using rule 64 (statement -> expression_stmt .)
    $end            reduce using rule 64 (statement -> expression_stmt .)
    LLAVE_DER       reduce using rule 64 (statement -> expression_stmt .)
    LLAVE_IZQ       reduce using rule 64 (statement -> expression_stmt .)
    RETURN          reduce using rule 64 (statement -> expression_stmt .)
    AND             reduce using rule 64 (statement -> expression_stmt .)
    OR              reduce using rule 64 (statement -> expression_stmt .)


state 136

    (65) statement -> compount_stmt .

    BREAK           reduce using rule 65 (statement -> compount_stmt .)
    PUNTOYCOMA      reduce using rule 65 (statement -> compount_stmt .)
    ELSE            reduce using rule 65 (statement -> compount_stmt .)
    ELSEIF          reduce using rule 65 (statement -> compount_stmt .)
    VARIABLE        reduce using rule 65 (statement -> compount_stmt .)
    VAR             reduce using rule 65 (statement -> compount_stmt .)
    TIMESTIMES      reduce using rule 65 (statement -> compount_stmt .)
    AMPERSANT       reduce using rule 65 (statement -> compount_stmt .)
    FUNCTION        reduce using rule 65 (statement -> compount_stmt .)
    PRIVATE         reduce using rule 65 (statement -> compount_stmt .)
    PUBLIC          reduce using rule 65 (statement -> compount_stmt .)
    PROTECTED       reduce using rule 65 (statement -> compount_stmt .)
    REQUIRE         reduce using rule 65 (statement -> compount_stmt .)
    INCLUDE         reduce using rule 65 (statement -> compount_stmt .)
    CLASS           reduce using rule 65 (statement -> compount_stmt .)
    IF              reduce using rule 65 (statement -> compount_stmt .)
    SWITCH          reduce using rule 65 (statement -> compount_stmt .)
    CASE            reduce using rule 65 (statement -> compount_stmt .)
    DEFAULT         reduce using rule 65 (statement -> compount_stmt .)
    FOR             reduce using rule 65 (statement -> compount_stmt .)
    WHILE           reduce using rule 65 (statement -> compount_stmt .)
    DO              reduce using rule 65 (statement -> compount_stmt .)
    ALERT           reduce using rule 65 (statement -> compount_stmt .)
    PARENT_IZQ      reduce using rule 65 (statement -> compount_stmt .)
    NUMERO          reduce using rule 65 (statement -> compount_stmt .)
    IDVAR           reduce using rule 65 (statement -> compount_stmt .)
    TRUE            reduce using rule 65 (statement -> compount_stmt .)
    FALSE           reduce using rule 65 (statement -> compount_stmt .)
    ECHO            reduce using rule 65 (statement -> compount_stmt .)
    $end            reduce using rule 65 (statement -> compount_stmt .)
    LLAVE_DER       reduce using rule 65 (statement -> compount_stmt .)
    LLAVE_IZQ       reduce using rule 65 (statement -> compount_stmt .)
    RETURN          reduce using rule 65 (statement -> compount_stmt .)
    AND             reduce using rule 65 (statement -> compount_stmt .)
    OR              reduce using rule 65 (statement -> compount_stmt .)


state 137

    (66) statement -> selection_stmt .

    BREAK           reduce using rule 66 (statement -> selection_stmt .)
    PUNTOYCOMA      reduce using rule 66 (statement -> selection_stmt .)
    ELSE            reduce using rule 66 (statement -> selection_stmt .)
    ELSEIF          reduce using rule 66 (statement -> selection_stmt .)
    VARIABLE        reduce using rule 66 (statement -> selection_stmt .)
    VAR             reduce using rule 66 (statement -> selection_stmt .)
    TIMESTIMES      reduce using rule 66 (statement -> selection_stmt .)
    AMPERSANT       reduce using rule 66 (statement -> selection_stmt .)
    FUNCTION        reduce using rule 66 (statement -> selection_stmt .)
    PRIVATE         reduce using rule 66 (statement -> selection_stmt .)
    PUBLIC          reduce using rule 66 (statement -> selection_stmt .)
    PROTECTED       reduce using rule 66 (statement -> selection_stmt .)
    REQUIRE         reduce using rule 66 (statement -> selection_stmt .)
    INCLUDE         reduce using rule 66 (statement -> selection_stmt .)
    CLASS           reduce using rule 66 (statement -> selection_stmt .)
    IF              reduce using rule 66 (statement -> selection_stmt .)
    SWITCH          reduce using rule 66 (statement -> selection_stmt .)
    CASE            reduce using rule 66 (statement -> selection_stmt .)
    DEFAULT         reduce using rule 66 (statement -> selection_stmt .)
    FOR             reduce using rule 66 (statement -> selection_stmt .)
    WHILE           reduce using rule 66 (statement -> selection_stmt .)
    DO              reduce using rule 66 (statement -> selection_stmt .)
    ALERT           reduce using rule 66 (statement -> selection_stmt .)
    PARENT_IZQ      reduce using rule 66 (statement -> selection_stmt .)
    NUMERO          reduce using rule 66 (statement -> selection_stmt .)
    IDVAR           reduce using rule 66 (statement -> selection_stmt .)
    TRUE            reduce using rule 66 (statement -> selection_stmt .)
    FALSE           reduce using rule 66 (statement -> selection_stmt .)
    ECHO            reduce using rule 66 (statement -> selection_stmt .)
    $end            reduce using rule 66 (statement -> selection_stmt .)
    LLAVE_DER       reduce using rule 66 (statement -> selection_stmt .)
    LLAVE_IZQ       reduce using rule 66 (statement -> selection_stmt .)
    RETURN          reduce using rule 66 (statement -> selection_stmt .)
    AND             reduce using rule 66 (statement -> selection_stmt .)
    OR              reduce using rule 66 (statement -> selection_stmt .)


state 138

    (67) statement -> iteration_stmt .

    BREAK           reduce using rule 67 (statement -> iteration_stmt .)
    PUNTOYCOMA      reduce using rule 67 (statement -> iteration_stmt .)
    ELSE            reduce using rule 67 (statement -> iteration_stmt .)
    ELSEIF          reduce using rule 67 (statement -> iteration_stmt .)
    VARIABLE        reduce using rule 67 (statement -> iteration_stmt .)
    VAR             reduce using rule 67 (statement -> iteration_stmt .)
    TIMESTIMES      reduce using rule 67 (statement -> iteration_stmt .)
    AMPERSANT       reduce using rule 67 (statement -> iteration_stmt .)
    FUNCTION        reduce using rule 67 (statement -> iteration_stmt .)
    PRIVATE         reduce using rule 67 (statement -> iteration_stmt .)
    PUBLIC          reduce using rule 67 (statement -> iteration_stmt .)
    PROTECTED       reduce using rule 67 (statement -> iteration_stmt .)
    REQUIRE         reduce using rule 67 (statement -> iteration_stmt .)
    INCLUDE         reduce using rule 67 (statement -> iteration_stmt .)
    CLASS           reduce using rule 67 (statement -> iteration_stmt .)
    IF              reduce using rule 67 (statement -> iteration_stmt .)
    SWITCH          reduce using rule 67 (statement -> iteration_stmt .)
    CASE            reduce using rule 67 (statement -> iteration_stmt .)
    DEFAULT         reduce using rule 67 (statement -> iteration_stmt .)
    FOR             reduce using rule 67 (statement -> iteration_stmt .)
    WHILE           reduce using rule 67 (statement -> iteration_stmt .)
    DO              reduce using rule 67 (statement -> iteration_stmt .)
    ALERT           reduce using rule 67 (statement -> iteration_stmt .)
    PARENT_IZQ      reduce using rule 67 (statement -> iteration_stmt .)
    NUMERO          reduce using rule 67 (statement -> iteration_stmt .)
    IDVAR           reduce using rule 67 (statement -> iteration_stmt .)
    TRUE            reduce using rule 67 (statement -> iteration_stmt .)
    FALSE           reduce using rule 67 (statement -> iteration_stmt .)
    ECHO            reduce using rule 67 (statement -> iteration_stmt .)
    $end            reduce using rule 67 (statement -> iteration_stmt .)
    LLAVE_DER       reduce using rule 67 (statement -> iteration_stmt .)
    LLAVE_IZQ       reduce using rule 67 (statement -> iteration_stmt .)
    RETURN          reduce using rule 67 (statement -> iteration_stmt .)
    AND             reduce using rule 67 (statement -> iteration_stmt .)
    OR              reduce using rule 67 (statement -> iteration_stmt .)


state 139

    (68) statement -> return_stmt .

    BREAK           reduce using rule 68 (statement -> return_stmt .)
    PUNTOYCOMA      reduce using rule 68 (statement -> return_stmt .)
    ELSE            reduce using rule 68 (statement -> return_stmt .)
    ELSEIF          reduce using rule 68 (statement -> return_stmt .)
    VARIABLE        reduce using rule 68 (statement -> return_stmt .)
    VAR             reduce using rule 68 (statement -> return_stmt .)
    TIMESTIMES      reduce using rule 68 (statement -> return_stmt .)
    AMPERSANT       reduce using rule 68 (statement -> return_stmt .)
    FUNCTION        reduce using rule 68 (statement -> return_stmt .)
    PRIVATE         reduce using rule 68 (statement -> return_stmt .)
    PUBLIC          reduce using rule 68 (statement -> return_stmt .)
    PROTECTED       reduce using rule 68 (statement -> return_stmt .)
    REQUIRE         reduce using rule 68 (statement -> return_stmt .)
    INCLUDE         reduce using rule 68 (statement -> return_stmt .)
    CLASS           reduce using rule 68 (statement -> return_stmt .)
    IF              reduce using rule 68 (statement -> return_stmt .)
    SWITCH          reduce using rule 68 (statement -> return_stmt .)
    CASE            reduce using rule 68 (statement -> return_stmt .)
    DEFAULT         reduce using rule 68 (statement -> return_stmt .)
    FOR             reduce using rule 68 (statement -> return_stmt .)
    WHILE           reduce using rule 68 (statement -> return_stmt .)
    DO              reduce using rule 68 (statement -> return_stmt .)
    ALERT           reduce using rule 68 (statement -> return_stmt .)
    PARENT_IZQ      reduce using rule 68 (statement -> return_stmt .)
    NUMERO          reduce using rule 68 (statement -> return_stmt .)
    IDVAR           reduce using rule 68 (statement -> return_stmt .)
    TRUE            reduce using rule 68 (statement -> return_stmt .)
    FALSE           reduce using rule 68 (statement -> return_stmt .)
    ECHO            reduce using rule 68 (statement -> return_stmt .)
    $end            reduce using rule 68 (statement -> return_stmt .)
    LLAVE_DER       reduce using rule 68 (statement -> return_stmt .)
    LLAVE_IZQ       reduce using rule 68 (statement -> return_stmt .)
    RETURN          reduce using rule 68 (statement -> return_stmt .)
    AND             reduce using rule 68 (statement -> return_stmt .)
    OR              reduce using rule 68 (statement -> return_stmt .)


state 140

    (69) statement -> class_declaration .

    BREAK           reduce using rule 69 (statement -> class_declaration .)
    PUNTOYCOMA      reduce using rule 69 (statement -> class_declaration .)
    ELSE            reduce using rule 69 (statement -> class_declaration .)
    ELSEIF          reduce using rule 69 (statement -> class_declaration .)
    VARIABLE        reduce using rule 69 (statement -> class_declaration .)
    VAR             reduce using rule 69 (statement -> class_declaration .)
    TIMESTIMES      reduce using rule 69 (statement -> class_declaration .)
    AMPERSANT       reduce using rule 69 (statement -> class_declaration .)
    FUNCTION        reduce using rule 69 (statement -> class_declaration .)
    PRIVATE         reduce using rule 69 (statement -> class_declaration .)
    PUBLIC          reduce using rule 69 (statement -> class_declaration .)
    PROTECTED       reduce using rule 69 (statement -> class_declaration .)
    REQUIRE         reduce using rule 69 (statement -> class_declaration .)
    INCLUDE         reduce using rule 69 (statement -> class_declaration .)
    CLASS           reduce using rule 69 (statement -> class_declaration .)
    IF              reduce using rule 69 (statement -> class_declaration .)
    SWITCH          reduce using rule 69 (statement -> class_declaration .)
    CASE            reduce using rule 69 (statement -> class_declaration .)
    DEFAULT         reduce using rule 69 (statement -> class_declaration .)
    FOR             reduce using rule 69 (statement -> class_declaration .)
    WHILE           reduce using rule 69 (statement -> class_declaration .)
    DO              reduce using rule 69 (statement -> class_declaration .)
    ALERT           reduce using rule 69 (statement -> class_declaration .)
    PARENT_IZQ      reduce using rule 69 (statement -> class_declaration .)
    NUMERO          reduce using rule 69 (statement -> class_declaration .)
    IDVAR           reduce using rule 69 (statement -> class_declaration .)
    TRUE            reduce using rule 69 (statement -> class_declaration .)
    FALSE           reduce using rule 69 (statement -> class_declaration .)
    ECHO            reduce using rule 69 (statement -> class_declaration .)
    $end            reduce using rule 69 (statement -> class_declaration .)
    LLAVE_DER       reduce using rule 69 (statement -> class_declaration .)
    LLAVE_IZQ       reduce using rule 69 (statement -> class_declaration .)
    RETURN          reduce using rule 69 (statement -> class_declaration .)
    AND             reduce using rule 69 (statement -> class_declaration .)
    OR              reduce using rule 69 (statement -> class_declaration .)


state 141

    (70) statement -> echo_stmt .
    (16) echo_stmt -> echo_stmt . ECHO STRING PUNTOYCOMA
    (17) echo_stmt -> echo_stmt . ECHO IDVAR PUNTOYCOMA
    (19) echo_stmt -> echo_stmt . ECHO NUMERO PUNTOYCOMA
    (20) echo_stmt -> echo_stmt . ECHO boolean PUNTOYCOMA
    (21) echo_stmt -> echo_stmt . ECHO fun_declaration PUNTOYCOMA

  ! shift/reduce conflict for ECHO resolved as shift
    BREAK           reduce using rule 70 (statement -> echo_stmt .)
    PUNTOYCOMA      reduce using rule 70 (statement -> echo_stmt .)
    ELSE            reduce using rule 70 (statement -> echo_stmt .)
    ELSEIF          reduce using rule 70 (statement -> echo_stmt .)
    VARIABLE        reduce using rule 70 (statement -> echo_stmt .)
    VAR             reduce using rule 70 (statement -> echo_stmt .)
    TIMESTIMES      reduce using rule 70 (statement -> echo_stmt .)
    AMPERSANT       reduce using rule 70 (statement -> echo_stmt .)
    FUNCTION        reduce using rule 70 (statement -> echo_stmt .)
    PRIVATE         reduce using rule 70 (statement -> echo_stmt .)
    PUBLIC          reduce using rule 70 (statement -> echo_stmt .)
    PROTECTED       reduce using rule 70 (statement -> echo_stmt .)
    REQUIRE         reduce using rule 70 (statement -> echo_stmt .)
    INCLUDE         reduce using rule 70 (statement -> echo_stmt .)
    CLASS           reduce using rule 70 (statement -> echo_stmt .)
    IF              reduce using rule 70 (statement -> echo_stmt .)
    SWITCH          reduce using rule 70 (statement -> echo_stmt .)
    CASE            reduce using rule 70 (statement -> echo_stmt .)
    DEFAULT         reduce using rule 70 (statement -> echo_stmt .)
    FOR             reduce using rule 70 (statement -> echo_stmt .)
    WHILE           reduce using rule 70 (statement -> echo_stmt .)
    DO              reduce using rule 70 (statement -> echo_stmt .)
    ALERT           reduce using rule 70 (statement -> echo_stmt .)
    PARENT_IZQ      reduce using rule 70 (statement -> echo_stmt .)
    NUMERO          reduce using rule 70 (statement -> echo_stmt .)
    IDVAR           reduce using rule 70 (statement -> echo_stmt .)
    TRUE            reduce using rule 70 (statement -> echo_stmt .)
    FALSE           reduce using rule 70 (statement -> echo_stmt .)
    $end            reduce using rule 70 (statement -> echo_stmt .)
    LLAVE_DER       reduce using rule 70 (statement -> echo_stmt .)
    LLAVE_IZQ       reduce using rule 70 (statement -> echo_stmt .)
    RETURN          reduce using rule 70 (statement -> echo_stmt .)
    AND             reduce using rule 70 (statement -> echo_stmt .)
    OR              reduce using rule 70 (statement -> echo_stmt .)
    ECHO            shift and go to state 52

  ! ECHO            [ reduce using rule 70 (statement -> echo_stmt .) ]


state 142

    (71) statement -> expression .
    (74) expression_stmt -> expression . PUNTOYCOMA
    (92) expression -> expression . AND expression
    (93) expression -> expression . OR expression

  ! shift/reduce conflict for PUNTOYCOMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    BREAK           reduce using rule 71 (statement -> expression .)
    ELSE            reduce using rule 71 (statement -> expression .)
    ELSEIF          reduce using rule 71 (statement -> expression .)
    VARIABLE        reduce using rule 71 (statement -> expression .)
    VAR             reduce using rule 71 (statement -> expression .)
    TIMESTIMES      reduce using rule 71 (statement -> expression .)
    AMPERSANT       reduce using rule 71 (statement -> expression .)
    FUNCTION        reduce using rule 71 (statement -> expression .)
    PRIVATE         reduce using rule 71 (statement -> expression .)
    PUBLIC          reduce using rule 71 (statement -> expression .)
    PROTECTED       reduce using rule 71 (statement -> expression .)
    REQUIRE         reduce using rule 71 (statement -> expression .)
    INCLUDE         reduce using rule 71 (statement -> expression .)
    CLASS           reduce using rule 71 (statement -> expression .)
    IF              reduce using rule 71 (statement -> expression .)
    SWITCH          reduce using rule 71 (statement -> expression .)
    CASE            reduce using rule 71 (statement -> expression .)
    DEFAULT         reduce using rule 71 (statement -> expression .)
    FOR             reduce using rule 71 (statement -> expression .)
    WHILE           reduce using rule 71 (statement -> expression .)
    DO              reduce using rule 71 (statement -> expression .)
    ALERT           reduce using rule 71 (statement -> expression .)
    PARENT_IZQ      reduce using rule 71 (statement -> expression .)
    NUMERO          reduce using rule 71 (statement -> expression .)
    IDVAR           reduce using rule 71 (statement -> expression .)
    TRUE            reduce using rule 71 (statement -> expression .)
    FALSE           reduce using rule 71 (statement -> expression .)
    ECHO            reduce using rule 71 (statement -> expression .)
    $end            reduce using rule 71 (statement -> expression .)
    LLAVE_DER       reduce using rule 71 (statement -> expression .)
    LLAVE_IZQ       reduce using rule 71 (statement -> expression .)
    RETURN          reduce using rule 71 (statement -> expression .)
    PUNTOYCOMA      shift and go to state 189
    AND             shift and go to state 111
    OR              shift and go to state 112

  ! PUNTOYCOMA      [ reduce using rule 71 (statement -> expression .) ]
  ! AND             [ reduce using rule 71 (statement -> expression .) ]
  ! OR              [ reduce using rule 71 (statement -> expression .) ]


state 143

    (72) statement -> additive_expression .
    (75) expression_stmt -> additive_expression .
    (94) expression -> additive_expression .
    (108) additive_expression -> additive_expression . addop term
    (98) simple_expression -> additive_expression . relop additive_expression
    (99) simple_expression -> additive_expression .
    (114) addop -> . SUMA
    (115) addop -> . RESTA
    (101) relop -> . MENOR
    (102) relop -> . MENOR_IGUAL
    (103) relop -> . MAYOR
    (104) relop -> . MAYOR_IGUAL
    (105) relop -> . DESIGUAL
    (106) relop -> . DISTINTO
    (107) relop -> . ES_IGUAL

  ! reduce/reduce conflict for BREAK resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for PUNTOYCOMA resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for VAR resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for TIMESTIMES resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for AMPERSANT resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for REQUIRE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for INCLUDE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for CLASS resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for IF resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for SWITCH resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for CASE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for FOR resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for DO resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for ALERT resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for PARENT_IZQ resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for NUMERO resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for IDVAR resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for ECHO resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for $end resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for LLAVE_IZQ resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for AND resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for OR resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for PUNTOYCOMA resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for AND resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for OR resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for BREAK resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for VAR resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for TIMESTIMES resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for AMPERSANT resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for REQUIRE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for INCLUDE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for CLASS resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for IF resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for SWITCH resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for CASE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for FOR resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for DO resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for ALERT resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for PARENT_IZQ resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for NUMERO resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for IDVAR resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for ECHO resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for $end resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for LLAVE_IZQ resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for PUNTOYCOMA resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for AND resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for OR resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for BREAK resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for VAR resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for TIMESTIMES resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for AMPERSANT resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for REQUIRE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for INCLUDE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for CLASS resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for IF resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for SWITCH resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for CASE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for FOR resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for DO resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for ALERT resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for PARENT_IZQ resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for NUMERO resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for IDVAR resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for ECHO resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for $end resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for LLAVE_IZQ resolved using rule 72 (statement -> additive_expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 72 (statement -> additive_expression .)
    BREAK           reduce using rule 72 (statement -> additive_expression .)
    PUNTOYCOMA      reduce using rule 72 (statement -> additive_expression .)
    ELSE            reduce using rule 72 (statement -> additive_expression .)
    ELSEIF          reduce using rule 72 (statement -> additive_expression .)
    VARIABLE        reduce using rule 72 (statement -> additive_expression .)
    VAR             reduce using rule 72 (statement -> additive_expression .)
    TIMESTIMES      reduce using rule 72 (statement -> additive_expression .)
    AMPERSANT       reduce using rule 72 (statement -> additive_expression .)
    FUNCTION        reduce using rule 72 (statement -> additive_expression .)
    PRIVATE         reduce using rule 72 (statement -> additive_expression .)
    PUBLIC          reduce using rule 72 (statement -> additive_expression .)
    PROTECTED       reduce using rule 72 (statement -> additive_expression .)
    REQUIRE         reduce using rule 72 (statement -> additive_expression .)
    INCLUDE         reduce using rule 72 (statement -> additive_expression .)
    CLASS           reduce using rule 72 (statement -> additive_expression .)
    IF              reduce using rule 72 (statement -> additive_expression .)
    SWITCH          reduce using rule 72 (statement -> additive_expression .)
    CASE            reduce using rule 72 (statement -> additive_expression .)
    DEFAULT         reduce using rule 72 (statement -> additive_expression .)
    FOR             reduce using rule 72 (statement -> additive_expression .)
    WHILE           reduce using rule 72 (statement -> additive_expression .)
    DO              reduce using rule 72 (statement -> additive_expression .)
    ALERT           reduce using rule 72 (statement -> additive_expression .)
    PARENT_IZQ      reduce using rule 72 (statement -> additive_expression .)
    NUMERO          reduce using rule 72 (statement -> additive_expression .)
    IDVAR           reduce using rule 72 (statement -> additive_expression .)
    TRUE            reduce using rule 72 (statement -> additive_expression .)
    FALSE           reduce using rule 72 (statement -> additive_expression .)
    ECHO            reduce using rule 72 (statement -> additive_expression .)
    $end            reduce using rule 72 (statement -> additive_expression .)
    LLAVE_DER       reduce using rule 72 (statement -> additive_expression .)
    LLAVE_IZQ       reduce using rule 72 (statement -> additive_expression .)
    RETURN          reduce using rule 72 (statement -> additive_expression .)
    AND             reduce using rule 72 (statement -> additive_expression .)
    OR              reduce using rule 72 (statement -> additive_expression .)
    SUMA            shift and go to state 48
    RESTA           shift and go to state 49
    MENOR           shift and go to state 115
    MENOR_IGUAL     shift and go to state 116
    MAYOR           shift and go to state 117
    MAYOR_IGUAL     shift and go to state 118
    DESIGUAL        shift and go to state 119
    DISTINTO        shift and go to state 120
    ES_IGUAL        shift and go to state 121

  ! BREAK           [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! PUNTOYCOMA      [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! ELSE            [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! ELSEIF          [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! VARIABLE        [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! VAR             [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! TIMESTIMES      [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! AMPERSANT       [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! FUNCTION        [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! PRIVATE         [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! PUBLIC          [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! PROTECTED       [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! REQUIRE         [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! INCLUDE         [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! CLASS           [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! IF              [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! SWITCH          [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! CASE            [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! DEFAULT         [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! FOR             [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! WHILE           [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! DO              [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! ALERT           [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! PARENT_IZQ      [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! NUMERO          [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! IDVAR           [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! TRUE            [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! FALSE           [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! ECHO            [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! $end            [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! LLAVE_DER       [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! LLAVE_IZQ       [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! RETURN          [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! AND             [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! OR              [ reduce using rule 75 (expression_stmt -> additive_expression .) ]
  ! PUNTOYCOMA      [ reduce using rule 94 (expression -> additive_expression .) ]
  ! AND             [ reduce using rule 94 (expression -> additive_expression .) ]
  ! OR              [ reduce using rule 94 (expression -> additive_expression .) ]
  ! BREAK           [ reduce using rule 94 (expression -> additive_expression .) ]
  ! ELSE            [ reduce using rule 94 (expression -> additive_expression .) ]
  ! ELSEIF          [ reduce using rule 94 (expression -> additive_expression .) ]
  ! VARIABLE        [ reduce using rule 94 (expression -> additive_expression .) ]
  ! VAR             [ reduce using rule 94 (expression -> additive_expression .) ]
  ! TIMESTIMES      [ reduce using rule 94 (expression -> additive_expression .) ]
  ! AMPERSANT       [ reduce using rule 94 (expression -> additive_expression .) ]
  ! FUNCTION        [ reduce using rule 94 (expression -> additive_expression .) ]
  ! PRIVATE         [ reduce using rule 94 (expression -> additive_expression .) ]
  ! PUBLIC          [ reduce using rule 94 (expression -> additive_expression .) ]
  ! PROTECTED       [ reduce using rule 94 (expression -> additive_expression .) ]
  ! REQUIRE         [ reduce using rule 94 (expression -> additive_expression .) ]
  ! INCLUDE         [ reduce using rule 94 (expression -> additive_expression .) ]
  ! CLASS           [ reduce using rule 94 (expression -> additive_expression .) ]
  ! IF              [ reduce using rule 94 (expression -> additive_expression .) ]
  ! SWITCH          [ reduce using rule 94 (expression -> additive_expression .) ]
  ! CASE            [ reduce using rule 94 (expression -> additive_expression .) ]
  ! DEFAULT         [ reduce using rule 94 (expression -> additive_expression .) ]
  ! FOR             [ reduce using rule 94 (expression -> additive_expression .) ]
  ! WHILE           [ reduce using rule 94 (expression -> additive_expression .) ]
  ! DO              [ reduce using rule 94 (expression -> additive_expression .) ]
  ! ALERT           [ reduce using rule 94 (expression -> additive_expression .) ]
  ! PARENT_IZQ      [ reduce using rule 94 (expression -> additive_expression .) ]
  ! NUMERO          [ reduce using rule 94 (expression -> additive_expression .) ]
  ! IDVAR           [ reduce using rule 94 (expression -> additive_expression .) ]
  ! TRUE            [ reduce using rule 94 (expression -> additive_expression .) ]
  ! FALSE           [ reduce using rule 94 (expression -> additive_expression .) ]
  ! ECHO            [ reduce using rule 94 (expression -> additive_expression .) ]
  ! $end            [ reduce using rule 94 (expression -> additive_expression .) ]
  ! LLAVE_DER       [ reduce using rule 94 (expression -> additive_expression .) ]
  ! LLAVE_IZQ       [ reduce using rule 94 (expression -> additive_expression .) ]
  ! RETURN          [ reduce using rule 94 (expression -> additive_expression .) ]
  ! PUNTOYCOMA      [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! AND             [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! OR              [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! BREAK           [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! ELSE            [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! ELSEIF          [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! VARIABLE        [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! VAR             [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! TIMESTIMES      [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! AMPERSANT       [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! FUNCTION        [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! PRIVATE         [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! PUBLIC          [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! PROTECTED       [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! REQUIRE         [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! INCLUDE         [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! CLASS           [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! IF              [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! SWITCH          [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! CASE            [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! DEFAULT         [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! FOR             [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! WHILE           [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! DO              [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! ALERT           [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! PARENT_IZQ      [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! NUMERO          [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! IDVAR           [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! TRUE            [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! FALSE           [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! ECHO            [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! $end            [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! LLAVE_DER       [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! LLAVE_IZQ       [ reduce using rule 99 (simple_expression -> additive_expression .) ]
  ! RETURN          [ reduce using rule 99 (simple_expression -> additive_expression .) ]

    addop                          shift and go to state 47
    relop                          shift and go to state 122

state 144

    (73) statement -> alert_stmt .
    (76) expression_stmt -> alert_stmt .
    (95) expression -> alert_stmt .
    (100) simple_expression -> alert_stmt .

  ! reduce/reduce conflict for BREAK resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for PUNTOYCOMA resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for ELSE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for VAR resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for TIMESTIMES resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for AMPERSANT resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for REQUIRE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for INCLUDE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for CLASS resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for IF resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for SWITCH resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for CASE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for FOR resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for WHILE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for DO resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for ALERT resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for PARENT_IZQ resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for NUMERO resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for IDVAR resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for TRUE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for FALSE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for ECHO resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for $end resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for LLAVE_IZQ resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for RETURN resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for AND resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for OR resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for PUNTOYCOMA resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for AND resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for OR resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for BREAK resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for ELSE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for VAR resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for TIMESTIMES resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for AMPERSANT resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for REQUIRE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for INCLUDE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for CLASS resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for IF resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for SWITCH resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for CASE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for FOR resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for WHILE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for DO resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for ALERT resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for PARENT_IZQ resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for NUMERO resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for IDVAR resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for TRUE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for FALSE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for ECHO resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for $end resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for LLAVE_IZQ resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for RETURN resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for PUNTOYCOMA resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for AND resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for OR resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for BREAK resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for ELSE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for VAR resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for TIMESTIMES resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for AMPERSANT resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for REQUIRE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for INCLUDE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for CLASS resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for IF resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for SWITCH resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for CASE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for FOR resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for WHILE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for DO resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for ALERT resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for PARENT_IZQ resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for NUMERO resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for IDVAR resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for TRUE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for FALSE resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for ECHO resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for $end resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for LLAVE_IZQ resolved using rule 73 (statement -> alert_stmt .)
  ! reduce/reduce conflict for RETURN resolved using rule 73 (statement -> alert_stmt .)
    BREAK           reduce using rule 73 (statement -> alert_stmt .)
    PUNTOYCOMA      reduce using rule 73 (statement -> alert_stmt .)
    ELSE            reduce using rule 73 (statement -> alert_stmt .)
    ELSEIF          reduce using rule 73 (statement -> alert_stmt .)
    VARIABLE        reduce using rule 73 (statement -> alert_stmt .)
    VAR             reduce using rule 73 (statement -> alert_stmt .)
    TIMESTIMES      reduce using rule 73 (statement -> alert_stmt .)
    AMPERSANT       reduce using rule 73 (statement -> alert_stmt .)
    FUNCTION        reduce using rule 73 (statement -> alert_stmt .)
    PRIVATE         reduce using rule 73 (statement -> alert_stmt .)
    PUBLIC          reduce using rule 73 (statement -> alert_stmt .)
    PROTECTED       reduce using rule 73 (statement -> alert_stmt .)
    REQUIRE         reduce using rule 73 (statement -> alert_stmt .)
    INCLUDE         reduce using rule 73 (statement -> alert_stmt .)
    CLASS           reduce using rule 73 (statement -> alert_stmt .)
    IF              reduce using rule 73 (statement -> alert_stmt .)
    SWITCH          reduce using rule 73 (statement -> alert_stmt .)
    CASE            reduce using rule 73 (statement -> alert_stmt .)
    DEFAULT         reduce using rule 73 (statement -> alert_stmt .)
    FOR             reduce using rule 73 (statement -> alert_stmt .)
    WHILE           reduce using rule 73 (statement -> alert_stmt .)
    DO              reduce using rule 73 (statement -> alert_stmt .)
    ALERT           reduce using rule 73 (statement -> alert_stmt .)
    PARENT_IZQ      reduce using rule 73 (statement -> alert_stmt .)
    NUMERO          reduce using rule 73 (statement -> alert_stmt .)
    IDVAR           reduce using rule 73 (statement -> alert_stmt .)
    TRUE            reduce using rule 73 (statement -> alert_stmt .)
    FALSE           reduce using rule 73 (statement -> alert_stmt .)
    ECHO            reduce using rule 73 (statement -> alert_stmt .)
    $end            reduce using rule 73 (statement -> alert_stmt .)
    LLAVE_DER       reduce using rule 73 (statement -> alert_stmt .)
    LLAVE_IZQ       reduce using rule 73 (statement -> alert_stmt .)
    RETURN          reduce using rule 73 (statement -> alert_stmt .)
    AND             reduce using rule 73 (statement -> alert_stmt .)
    OR              reduce using rule 73 (statement -> alert_stmt .)

  ! BREAK           [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! PUNTOYCOMA      [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! ELSE            [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! ELSEIF          [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! VARIABLE        [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! VAR             [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! TIMESTIMES      [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! AMPERSANT       [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! FUNCTION        [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! PRIVATE         [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! PUBLIC          [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! PROTECTED       [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! REQUIRE         [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! INCLUDE         [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! CLASS           [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! IF              [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! SWITCH          [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! CASE            [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! DEFAULT         [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! FOR             [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! WHILE           [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! DO              [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! ALERT           [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! PARENT_IZQ      [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! NUMERO          [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! IDVAR           [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! TRUE            [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! FALSE           [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! ECHO            [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! $end            [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! LLAVE_DER       [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! LLAVE_IZQ       [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! RETURN          [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! AND             [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! OR              [ reduce using rule 76 (expression_stmt -> alert_stmt .) ]
  ! PUNTOYCOMA      [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! AND             [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! OR              [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! BREAK           [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! ELSE            [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! ELSEIF          [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! VARIABLE        [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! VAR             [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! TIMESTIMES      [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! AMPERSANT       [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! FUNCTION        [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! PRIVATE         [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! PUBLIC          [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! PROTECTED       [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! REQUIRE         [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! INCLUDE         [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! CLASS           [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! IF              [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! SWITCH          [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! CASE            [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! DEFAULT         [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! FOR             [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! WHILE           [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! DO              [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! ALERT           [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! PARENT_IZQ      [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! NUMERO          [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! IDVAR           [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! TRUE            [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! FALSE           [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! ECHO            [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! $end            [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! LLAVE_DER       [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! LLAVE_IZQ       [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! RETURN          [ reduce using rule 95 (expression -> alert_stmt .) ]
  ! PUNTOYCOMA      [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! AND             [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! OR              [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! BREAK           [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! ELSE            [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! ELSEIF          [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! VARIABLE        [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! VAR             [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! TIMESTIMES      [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! AMPERSANT       [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! FUNCTION        [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! PRIVATE         [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! PUBLIC          [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! PROTECTED       [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! REQUIRE         [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! INCLUDE         [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! CLASS           [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! IF              [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! SWITCH          [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! CASE            [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! DEFAULT         [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! FOR             [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! WHILE           [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! DO              [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! ALERT           [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! PARENT_IZQ      [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! NUMERO          [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! IDVAR           [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! TRUE            [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! FALSE           [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! ECHO            [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! $end            [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! LLAVE_DER       [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! LLAVE_IZQ       [ reduce using rule 100 (simple_expression -> alert_stmt .) ]
  ! RETURN          [ reduce using rule 100 (simple_expression -> alert_stmt .) ]


state 145

    (58) compount_stmt -> LLAVE_IZQ . echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER
    (16) echo_stmt -> . echo_stmt ECHO STRING PUNTOYCOMA
    (17) echo_stmt -> . echo_stmt ECHO IDVAR PUNTOYCOMA
    (18) echo_stmt -> . empty
    (19) echo_stmt -> . echo_stmt ECHO NUMERO PUNTOYCOMA
    (20) echo_stmt -> . echo_stmt ECHO boolean PUNTOYCOMA
    (21) echo_stmt -> . echo_stmt ECHO fun_declaration PUNTOYCOMA
    (135) empty -> .

    ECHO            reduce using rule 135 (empty -> .)
    VARIABLE        reduce using rule 135 (empty -> .)
    VAR             reduce using rule 135 (empty -> .)
    TIMESTIMES      reduce using rule 135 (empty -> .)
    AMPERSANT       reduce using rule 135 (empty -> .)
    ALERT           reduce using rule 135 (empty -> .)
    LLAVE_IZQ       reduce using rule 135 (empty -> .)
    IF              reduce using rule 135 (empty -> .)
    SWITCH          reduce using rule 135 (empty -> .)
    CASE            reduce using rule 135 (empty -> .)
    DEFAULT         reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    DO              reduce using rule 135 (empty -> .)
    RETURN          reduce using rule 135 (empty -> .)
    CLASS           reduce using rule 135 (empty -> .)
    PRIVATE         reduce using rule 135 (empty -> .)
    PUBLIC          reduce using rule 135 (empty -> .)
    PROTECTED       reduce using rule 135 (empty -> .)
    PARENT_IZQ      reduce using rule 135 (empty -> .)
    NUMERO          reduce using rule 135 (empty -> .)
    IDVAR           reduce using rule 135 (empty -> .)
    TRUE            reduce using rule 135 (empty -> .)
    FALSE           reduce using rule 135 (empty -> .)
    LLAVE_DER       reduce using rule 135 (empty -> .)
    PUNTOYCOMA      reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)

    echo_stmt                      shift and go to state 190
    empty                          shift and go to state 191

state 146

    (87) return_stmt -> RETURN . PUNTOYCOMA
    (88) return_stmt -> RETURN . expression PUNTOYCOMA
    (89) expression -> . VARIABLE relop NUMERO
    (90) expression -> . simple_expression
    (91) expression -> . VARIABLE IGUAL AMPERSANT VARIABLE
    (92) expression -> . expression AND expression
    (93) expression -> . expression OR expression
    (94) expression -> . additive_expression
    (95) expression -> . alert_stmt
    (98) simple_expression -> . additive_expression relop additive_expression
    (99) simple_expression -> . additive_expression
    (100) simple_expression -> . alert_stmt
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty
    (116) term -> . term mulop factor
    (117) term -> . factor
    (135) empty -> .
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

  ! shift/reduce conflict for PUNTOYCOMA resolved as shift
    PUNTOYCOMA      shift and go to state 192
    VARIABLE        shift and go to state 67
    ALERT           shift and go to state 40
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

  ! PUNTOYCOMA      [ reduce using rule 135 (empty -> .) ]

    expression                     shift and go to state 193
    simple_expression              shift and go to state 68
    additive_expression            shift and go to state 69
    alert_stmt                     shift and go to state 70
    term                           shift and go to state 15
    empty                          shift and go to state 71
    factor                         shift and go to state 41
    var                            shift and go to state 34
    boolean                        shift and go to state 20

state 147

    (26) class_declaration -> area . CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER

    CLASS           shift and go to state 51


state 148

    (84) iteration_stmt -> FOR PARENT_IZQ var_declaration . PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement

    PUNTOYCOMA      shift and go to state 194


state 149

    (85) iteration_stmt -> WHILE PARENT_IZQ expression . PARENT_DER statement
    (92) expression -> expression . AND expression
    (93) expression -> expression . OR expression

    PARENT_DER      shift and go to state 195
    AND             shift and go to state 111
    OR              shift and go to state 112


state 150

    (86) iteration_stmt -> DO LLAVE_IZQ statement . PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER

    PUNTOYCOMA      shift and go to state 196


state 151

    (22) alert_stmt -> ALERT PARENT_IZQ STRING . PARENT_DER PUNTOYCOMA

    PARENT_DER      shift and go to state 197


state 152

    (26) class_declaration -> area CLASS VARIABLE LLAVE_IZQ . attribute LLAVE_DER
    (28) attribute -> . attribute area var_declaration
    (29) attribute -> . area var_declaration
    (30) attribute -> . attribute area fun_declaration
    (31) attribute -> . area fun_declaration
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED

    PRIVATE         shift and go to state 24
    PUBLIC          shift and go to state 25
    PROTECTED       shift and go to state 26

    area                           shift and go to state 182
    attribute                      shift and go to state 198

state 153

    (16) echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .

    ECHO            reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    VARIABLE        reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    VAR             reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    TIMESTIMES      reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    AMPERSANT       reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    FUNCTION        reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    PRIVATE         reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    PUBLIC          reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    PROTECTED       reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    REQUIRE         reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    INCLUDE         reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    CLASS           reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    IF              reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    SWITCH          reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    CASE            reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    DEFAULT         reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    FOR             reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    WHILE           reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    DO              reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    ALERT           reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    PARENT_IZQ      reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    NUMERO          reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    IDVAR           reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    TRUE            reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    FALSE           reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    $end            reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    BREAK           reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    PUNTOYCOMA      reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    LLAVE_IZQ       reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    RETURN          reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    LLAVE_DER       reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    AND             reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    OR              reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    ELSE            reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)
    ELSEIF          reduce using rule 16 (echo_stmt -> echo_stmt ECHO STRING PUNTOYCOMA .)


state 154

    (17) echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .

    ECHO            reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    VARIABLE        reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    VAR             reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    TIMESTIMES      reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    AMPERSANT       reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    FUNCTION        reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    PRIVATE         reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    PUBLIC          reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    PROTECTED       reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    REQUIRE         reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    INCLUDE         reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    CLASS           reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    IF              reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    SWITCH          reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    CASE            reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    DEFAULT         reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    FOR             reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    WHILE           reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    DO              reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    ALERT           reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    PARENT_IZQ      reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    NUMERO          reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    IDVAR           reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    TRUE            reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    FALSE           reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    $end            reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    BREAK           reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    PUNTOYCOMA      reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    LLAVE_IZQ       reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    RETURN          reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    LLAVE_DER       reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    AND             reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    OR              reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    ELSE            reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)
    ELSEIF          reduce using rule 17 (echo_stmt -> echo_stmt ECHO IDVAR PUNTOYCOMA .)


state 155

    (19) echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .

    ECHO            reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    VARIABLE        reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    VAR             reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    TIMESTIMES      reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    AMPERSANT       reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    FUNCTION        reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    PRIVATE         reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    PUBLIC          reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    PROTECTED       reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    REQUIRE         reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    INCLUDE         reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    CLASS           reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    IF              reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    SWITCH          reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    CASE            reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    DEFAULT         reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    FOR             reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    WHILE           reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    DO              reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    ALERT           reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    PARENT_IZQ      reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    NUMERO          reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    IDVAR           reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    TRUE            reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    FALSE           reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    $end            reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    BREAK           reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    PUNTOYCOMA      reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    LLAVE_IZQ       reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    RETURN          reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    LLAVE_DER       reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    AND             reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    OR              reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    ELSE            reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)
    ELSEIF          reduce using rule 19 (echo_stmt -> echo_stmt ECHO NUMERO PUNTOYCOMA .)


state 156

    (20) echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .

    ECHO            reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    VARIABLE        reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    VAR             reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    TIMESTIMES      reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    AMPERSANT       reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    FUNCTION        reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    PRIVATE         reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    PUBLIC          reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    PROTECTED       reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    REQUIRE         reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    INCLUDE         reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    CLASS           reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    IF              reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    SWITCH          reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    CASE            reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    DEFAULT         reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    FOR             reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    WHILE           reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    DO              reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    ALERT           reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    PARENT_IZQ      reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    NUMERO          reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    IDVAR           reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    TRUE            reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    FALSE           reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    $end            reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    BREAK           reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    PUNTOYCOMA      reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    LLAVE_IZQ       reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    RETURN          reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    LLAVE_DER       reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    AND             reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    OR              reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    ELSE            reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)
    ELSEIF          reduce using rule 20 (echo_stmt -> echo_stmt ECHO boolean PUNTOYCOMA .)


state 157

    (21) echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .

    ECHO            reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    VARIABLE        reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    VAR             reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    TIMESTIMES      reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    AMPERSANT       reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    FUNCTION        reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    PRIVATE         reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    PUBLIC          reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    PROTECTED       reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    REQUIRE         reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    INCLUDE         reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    CLASS           reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    IF              reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    SWITCH          reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    CASE            reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    DEFAULT         reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    FOR             reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    WHILE           reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    DO              reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    ALERT           reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    PARENT_IZQ      reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    NUMERO          reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    IDVAR           reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    TRUE            reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    FALSE           reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    $end            reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    BREAK           reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    PUNTOYCOMA      reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    LLAVE_IZQ       reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    RETURN          reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    LLAVE_DER       reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    AND             reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    OR              reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    ELSE            reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)
    ELSEIF          reduce using rule 21 (echo_stmt -> echo_stmt ECHO fun_declaration PUNTOYCOMA .)


state 158

    (44) var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA . var_declaration
    (45) var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .
    (35) var_declaration -> . VARIABLE PUNTOYCOMA var_declaration
    (36) var_declaration -> . VAR VARIABLE IGUAL simple_expression
    (37) var_declaration -> . VARIABLE PUNTOYCOMA
    (38) var_declaration -> . TIMESTIMES VARIABLE PUNTOYCOMA
    (39) var_declaration -> . TIMESTIMES VARIABLE PUNTOYCOMA var_declaration
    (40) var_declaration -> . VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration
    (41) var_declaration -> . VARIABLE IGUAL NUMERO PUNTOYCOMA
    (42) var_declaration -> . VARIABLE IGUAL boolean PUNTOYCOMA var_declaration
    (43) var_declaration -> . VARIABLE IGUAL boolean PUNTOYCOMA
    (44) var_declaration -> . VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration
    (45) var_declaration -> . VARIABLE IGUAL VARIABLE PUNTOYCOMA
    (46) var_declaration -> . AMPERSANT VARIABLE PUNTOYCOMA var_declaration
    (47) var_declaration -> . AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt
    (48) var_declaration -> . AMPERSANT VARIABLE PUNTOYCOMA
    (49) var_declaration -> . VARIABLE IGUAL simple_expression PUNTOYCOMA

    VARIABLE        reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    VAR             reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    TIMESTIMES      reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    AMPERSANT       reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    FUNCTION        reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    PRIVATE         reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    PUBLIC          reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    PROTECTED       reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    REQUIRE         reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    INCLUDE         reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    CLASS           reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    IF              reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    SWITCH          reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    CASE            reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    DEFAULT         reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    FOR             reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    WHILE           reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    DO              reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    ALERT           reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    PARENT_IZQ      reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    NUMERO          reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    IDVAR           reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    TRUE            reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    FALSE           reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    ECHO            reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    $end            reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    PUNTOYCOMA      reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    LLAVE_DER       reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    LLAVE_IZQ       reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    RETURN          reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    AND             reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)
    OR              reduce using rule 45 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA .)

  ! VARIABLE        [ shift and go to state 94 ]
  ! VAR             [ shift and go to state 17 ]
  ! TIMESTIMES      [ shift and go to state 18 ]
  ! AMPERSANT       [ shift and go to state 21 ]

    var_declaration                shift and go to state 199

state 159

    (40) var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA . var_declaration
    (41) var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .
    (35) var_declaration -> . VARIABLE PUNTOYCOMA var_declaration
    (36) var_declaration -> . VAR VARIABLE IGUAL simple_expression
    (37) var_declaration -> . VARIABLE PUNTOYCOMA
    (38) var_declaration -> . TIMESTIMES VARIABLE PUNTOYCOMA
    (39) var_declaration -> . TIMESTIMES VARIABLE PUNTOYCOMA var_declaration
    (40) var_declaration -> . VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration
    (41) var_declaration -> . VARIABLE IGUAL NUMERO PUNTOYCOMA
    (42) var_declaration -> . VARIABLE IGUAL boolean PUNTOYCOMA var_declaration
    (43) var_declaration -> . VARIABLE IGUAL boolean PUNTOYCOMA
    (44) var_declaration -> . VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration
    (45) var_declaration -> . VARIABLE IGUAL VARIABLE PUNTOYCOMA
    (46) var_declaration -> . AMPERSANT VARIABLE PUNTOYCOMA var_declaration
    (47) var_declaration -> . AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt
    (48) var_declaration -> . AMPERSANT VARIABLE PUNTOYCOMA
    (49) var_declaration -> . VARIABLE IGUAL simple_expression PUNTOYCOMA

    VARIABLE        reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    VAR             reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    TIMESTIMES      reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    AMPERSANT       reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    FUNCTION        reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    PRIVATE         reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    PUBLIC          reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    PROTECTED       reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    REQUIRE         reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    INCLUDE         reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    CLASS           reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    IF              reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    SWITCH          reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    CASE            reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    DEFAULT         reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    FOR             reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    WHILE           reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    DO              reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    ALERT           reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    PARENT_IZQ      reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    NUMERO          reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    IDVAR           reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    TRUE            reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    FALSE           reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    ECHO            reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    $end            reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    PUNTOYCOMA      reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    LLAVE_DER       reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    LLAVE_IZQ       reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    RETURN          reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    AND             reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)
    OR              reduce using rule 41 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA .)

  ! VARIABLE        [ shift and go to state 94 ]
  ! VAR             [ shift and go to state 17 ]
  ! TIMESTIMES      [ shift and go to state 18 ]
  ! AMPERSANT       [ shift and go to state 21 ]

    var_declaration                shift and go to state 200

state 160

    (42) var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA . var_declaration
    (43) var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .
    (35) var_declaration -> . VARIABLE PUNTOYCOMA var_declaration
    (36) var_declaration -> . VAR VARIABLE IGUAL simple_expression
    (37) var_declaration -> . VARIABLE PUNTOYCOMA
    (38) var_declaration -> . TIMESTIMES VARIABLE PUNTOYCOMA
    (39) var_declaration -> . TIMESTIMES VARIABLE PUNTOYCOMA var_declaration
    (40) var_declaration -> . VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration
    (41) var_declaration -> . VARIABLE IGUAL NUMERO PUNTOYCOMA
    (42) var_declaration -> . VARIABLE IGUAL boolean PUNTOYCOMA var_declaration
    (43) var_declaration -> . VARIABLE IGUAL boolean PUNTOYCOMA
    (44) var_declaration -> . VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration
    (45) var_declaration -> . VARIABLE IGUAL VARIABLE PUNTOYCOMA
    (46) var_declaration -> . AMPERSANT VARIABLE PUNTOYCOMA var_declaration
    (47) var_declaration -> . AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt
    (48) var_declaration -> . AMPERSANT VARIABLE PUNTOYCOMA
    (49) var_declaration -> . VARIABLE IGUAL simple_expression PUNTOYCOMA

    VARIABLE        reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    VAR             reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    TIMESTIMES      reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    AMPERSANT       reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    FUNCTION        reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    PRIVATE         reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    PUBLIC          reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    PROTECTED       reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    REQUIRE         reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    INCLUDE         reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    CLASS           reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    IF              reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    SWITCH          reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    CASE            reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    DEFAULT         reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    FOR             reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    WHILE           reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    DO              reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    ALERT           reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    PARENT_IZQ      reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    NUMERO          reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    IDVAR           reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    TRUE            reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    FALSE           reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    ECHO            reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    $end            reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    PUNTOYCOMA      reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    LLAVE_DER       reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    LLAVE_IZQ       reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    RETURN          reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    AND             reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)
    OR              reduce using rule 43 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA .)

  ! VARIABLE        [ shift and go to state 94 ]
  ! VAR             [ shift and go to state 17 ]
  ! TIMESTIMES      [ shift and go to state 18 ]
  ! AMPERSANT       [ shift and go to state 21 ]

    var_declaration                shift and go to state 201

state 161

    (49) var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .

    VARIABLE        reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    VAR             reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    TIMESTIMES      reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    AMPERSANT       reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    FUNCTION        reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    PRIVATE         reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    PUBLIC          reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    PROTECTED       reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    REQUIRE         reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    INCLUDE         reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    CLASS           reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    IF              reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    SWITCH          reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    CASE            reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    DEFAULT         reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    FOR             reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    WHILE           reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    DO              reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    ALERT           reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    PARENT_IZQ      reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    NUMERO          reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    IDVAR           reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    TRUE            reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    FALSE           reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    ECHO            reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    $end            reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    PUNTOYCOMA      reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    LLAVE_DER       reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    LLAVE_IZQ       reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    RETURN          reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    AND             reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)
    OR              reduce using rule 49 (var_declaration -> VARIABLE IGUAL simple_expression PUNTOYCOMA .)


state 162

    (132) typeclass -> VARIABLE IDVAR IGUAL NEW . constructor PUNTOYCOMA
    (133) constructor -> . VARIABLE PARENT_IZQ PARENT_DER
    (134) constructor -> . VARIABLE PARENT_IZQ args PARENT_DER

    VARIABLE        shift and go to state 202

    constructor                    shift and go to state 203

state 163

    (97) var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .

    MULTIPLICACION  reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    DIVISION        reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    SUMA            reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    RESTA           reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    VARIABLE        reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    VAR             reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    TIMESTIMES      reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    AMPERSANT       reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    FUNCTION        reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    PRIVATE         reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    PUBLIC          reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    PROTECTED       reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    REQUIRE         reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    INCLUDE         reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    CLASS           reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    IF              reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    SWITCH          reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    CASE            reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    DEFAULT         reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    FOR             reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    WHILE           reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    DO              reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    ALERT           reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    PARENT_IZQ      reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    NUMERO          reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    IDVAR           reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    TRUE            reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    FALSE           reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    ECHO            reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    $end            reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    MENOR           reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    MENOR_IGUAL     reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    MAYOR           reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    MAYOR_IGUAL     reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    DESIGUAL        reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    DISTINTO        reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    ES_IGUAL        reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    PARENT_DER      reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    AND             reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    OR              reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    PUNTOYCOMA      reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    CORCHETE_DER    reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    COMA            reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    BREAK           reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    LLAVE_DER       reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    LLAVE_IZQ       reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    RETURN          reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    ELSE            reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)
    ELSEIF          reduce using rule 97 (var -> VARIABLE CORCHETE_IZQ expression CORCHETE_DER .)


state 164

    (110) additive_expression -> VARIABLE . DECREMENTO PUNTOYCOMA
    (111) additive_expression -> VARIABLE . INCREMENTO PUNTOYCOMA
    (112) additive_expression -> VARIABLE . DECREMENTO
    (113) additive_expression -> VARIABLE . INCREMENTO
    (96) var -> VARIABLE .
    (97) var -> VARIABLE . CORCHETE_IZQ expression CORCHETE_DER

    DECREMENTO      shift and go to state 56
    INCREMENTO      shift and go to state 58
    MULTIPLICACION  reduce using rule 96 (var -> VARIABLE .)
    DIVISION        reduce using rule 96 (var -> VARIABLE .)
    MENOR           reduce using rule 96 (var -> VARIABLE .)
    MENOR_IGUAL     reduce using rule 96 (var -> VARIABLE .)
    MAYOR           reduce using rule 96 (var -> VARIABLE .)
    MAYOR_IGUAL     reduce using rule 96 (var -> VARIABLE .)
    DESIGUAL        reduce using rule 96 (var -> VARIABLE .)
    DISTINTO        reduce using rule 96 (var -> VARIABLE .)
    ES_IGUAL        reduce using rule 96 (var -> VARIABLE .)
    SUMA            reduce using rule 96 (var -> VARIABLE .)
    RESTA           reduce using rule 96 (var -> VARIABLE .)
    VARIABLE        reduce using rule 96 (var -> VARIABLE .)
    VAR             reduce using rule 96 (var -> VARIABLE .)
    TIMESTIMES      reduce using rule 96 (var -> VARIABLE .)
    AMPERSANT       reduce using rule 96 (var -> VARIABLE .)
    FUNCTION        reduce using rule 96 (var -> VARIABLE .)
    PRIVATE         reduce using rule 96 (var -> VARIABLE .)
    PUBLIC          reduce using rule 96 (var -> VARIABLE .)
    PROTECTED       reduce using rule 96 (var -> VARIABLE .)
    REQUIRE         reduce using rule 96 (var -> VARIABLE .)
    INCLUDE         reduce using rule 96 (var -> VARIABLE .)
    CLASS           reduce using rule 96 (var -> VARIABLE .)
    IF              reduce using rule 96 (var -> VARIABLE .)
    SWITCH          reduce using rule 96 (var -> VARIABLE .)
    CASE            reduce using rule 96 (var -> VARIABLE .)
    DEFAULT         reduce using rule 96 (var -> VARIABLE .)
    FOR             reduce using rule 96 (var -> VARIABLE .)
    WHILE           reduce using rule 96 (var -> VARIABLE .)
    DO              reduce using rule 96 (var -> VARIABLE .)
    ALERT           reduce using rule 96 (var -> VARIABLE .)
    PARENT_IZQ      reduce using rule 96 (var -> VARIABLE .)
    NUMERO          reduce using rule 96 (var -> VARIABLE .)
    IDVAR           reduce using rule 96 (var -> VARIABLE .)
    TRUE            reduce using rule 96 (var -> VARIABLE .)
    FALSE           reduce using rule 96 (var -> VARIABLE .)
    ECHO            reduce using rule 96 (var -> VARIABLE .)
    $end            reduce using rule 96 (var -> VARIABLE .)
    PUNTOYCOMA      reduce using rule 96 (var -> VARIABLE .)
    LLAVE_DER       reduce using rule 96 (var -> VARIABLE .)
    LLAVE_IZQ       reduce using rule 96 (var -> VARIABLE .)
    RETURN          reduce using rule 96 (var -> VARIABLE .)
    AND             reduce using rule 96 (var -> VARIABLE .)
    OR              reduce using rule 96 (var -> VARIABLE .)
    PARENT_DER      reduce using rule 96 (var -> VARIABLE .)
    CORCHETE_DER    reduce using rule 96 (var -> VARIABLE .)
    COMA            reduce using rule 96 (var -> VARIABLE .)
    BREAK           reduce using rule 96 (var -> VARIABLE .)
    ELSE            reduce using rule 96 (var -> VARIABLE .)
    ELSEIF          reduce using rule 96 (var -> VARIABLE .)
    CORCHETE_IZQ    shift and go to state 61


state 165

    (36) var_declaration -> VAR VARIABLE IGUAL simple_expression .

    VARIABLE        reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    VAR             reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    TIMESTIMES      reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    AMPERSANT       reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    FUNCTION        reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    PRIVATE         reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    PUBLIC          reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    PROTECTED       reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    REQUIRE         reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    INCLUDE         reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    CLASS           reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    IF              reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    SWITCH          reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    CASE            reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    DEFAULT         reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    FOR             reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    WHILE           reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    DO              reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    ALERT           reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    PARENT_IZQ      reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    NUMERO          reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    IDVAR           reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    TRUE            reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    FALSE           reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    ECHO            reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    $end            reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    PUNTOYCOMA      reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    LLAVE_DER       reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    LLAVE_IZQ       reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    RETURN          reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    AND             reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)
    OR              reduce using rule 36 (var_declaration -> VAR VARIABLE IGUAL simple_expression .)


state 166

    (39) var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .

    VARIABLE        reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    VAR             reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    TIMESTIMES      reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    AMPERSANT       reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    FUNCTION        reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    PRIVATE         reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    PUBLIC          reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    PROTECTED       reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    REQUIRE         reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    INCLUDE         reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    CLASS           reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    IF              reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    SWITCH          reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    CASE            reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    DEFAULT         reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    FOR             reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    WHILE           reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    DO              reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    ALERT           reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    PARENT_IZQ      reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    NUMERO          reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    IDVAR           reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    TRUE            reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    FALSE           reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    ECHO            reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    $end            reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    PUNTOYCOMA      reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    LLAVE_DER       reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    LLAVE_IZQ       reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    RETURN          reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    AND             reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)
    OR              reduce using rule 39 (var_declaration -> TIMESTIMES VARIABLE PUNTOYCOMA var_declaration .)


state 167

    (46) var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .

    VARIABLE        reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    VAR             reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    TIMESTIMES      reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    AMPERSANT       reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    FUNCTION        reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    PRIVATE         reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    PUBLIC          reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    PROTECTED       reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    REQUIRE         reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    INCLUDE         reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    CLASS           reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    IF              reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    SWITCH          reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    CASE            reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    DEFAULT         reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    FOR             reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    WHILE           reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    DO              reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    ALERT           reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    PARENT_IZQ      reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    NUMERO          reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    IDVAR           reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    TRUE            reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    FALSE           reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    ECHO            reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    $end            reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    PUNTOYCOMA      reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    LLAVE_DER       reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    LLAVE_IZQ       reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    RETURN          reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    AND             reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)
    OR              reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE PUNTOYCOMA var_declaration .)


state 168

    (47) var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE . PUNTOYCOMA selection_stmt

    PUNTOYCOMA      shift and go to state 204


state 169

    (56) param -> VARIABLE .
    (57) param -> VARIABLE . CORCHETE_IZQ CORCHETE_DER PUNTOYCOMA

    COMA            reduce using rule 56 (param -> VARIABLE .)
    PARENT_DER      reduce using rule 56 (param -> VARIABLE .)
    CORCHETE_IZQ    shift and go to state 205


state 170

    (50) fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params . PARENT_DER
    (51) fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params . PARENT_DER compount_stmt

    PARENT_DER      shift and go to state 206


state 171

    (52) params -> param_list .
    (54) param_list -> param_list . COMA param_list

    PARENT_DER      reduce using rule 52 (params -> param_list .)
    COMA            shift and go to state 207


state 172

    (53) params -> empty .

    PARENT_DER      reduce using rule 53 (params -> empty .)


state 173

    (55) param_list -> param .

    COMA            reduce using rule 55 (param_list -> param .)
    PARENT_DER      reduce using rule 55 (param_list -> param .)


state 174

    (92) expression -> expression AND expression .
    (92) expression -> expression . AND expression
    (93) expression -> expression . OR expression

    PARENT_DER      reduce using rule 92 (expression -> expression AND expression .)
    AND             reduce using rule 92 (expression -> expression AND expression .)
    OR              reduce using rule 92 (expression -> expression AND expression .)
    CORCHETE_DER    reduce using rule 92 (expression -> expression AND expression .)
    COMA            reduce using rule 92 (expression -> expression AND expression .)
    PUNTOYCOMA      reduce using rule 92 (expression -> expression AND expression .)
    BREAK           reduce using rule 92 (expression -> expression AND expression .)
    ELSE            reduce using rule 92 (expression -> expression AND expression .)
    ELSEIF          reduce using rule 92 (expression -> expression AND expression .)
    VARIABLE        reduce using rule 92 (expression -> expression AND expression .)
    VAR             reduce using rule 92 (expression -> expression AND expression .)
    TIMESTIMES      reduce using rule 92 (expression -> expression AND expression .)
    AMPERSANT       reduce using rule 92 (expression -> expression AND expression .)
    FUNCTION        reduce using rule 92 (expression -> expression AND expression .)
    PRIVATE         reduce using rule 92 (expression -> expression AND expression .)
    PUBLIC          reduce using rule 92 (expression -> expression AND expression .)
    PROTECTED       reduce using rule 92 (expression -> expression AND expression .)
    REQUIRE         reduce using rule 92 (expression -> expression AND expression .)
    INCLUDE         reduce using rule 92 (expression -> expression AND expression .)
    CLASS           reduce using rule 92 (expression -> expression AND expression .)
    IF              reduce using rule 92 (expression -> expression AND expression .)
    SWITCH          reduce using rule 92 (expression -> expression AND expression .)
    CASE            reduce using rule 92 (expression -> expression AND expression .)
    DEFAULT         reduce using rule 92 (expression -> expression AND expression .)
    FOR             reduce using rule 92 (expression -> expression AND expression .)
    WHILE           reduce using rule 92 (expression -> expression AND expression .)
    DO              reduce using rule 92 (expression -> expression AND expression .)
    ALERT           reduce using rule 92 (expression -> expression AND expression .)
    PARENT_IZQ      reduce using rule 92 (expression -> expression AND expression .)
    NUMERO          reduce using rule 92 (expression -> expression AND expression .)
    IDVAR           reduce using rule 92 (expression -> expression AND expression .)
    TRUE            reduce using rule 92 (expression -> expression AND expression .)
    FALSE           reduce using rule 92 (expression -> expression AND expression .)
    ECHO            reduce using rule 92 (expression -> expression AND expression .)
    $end            reduce using rule 92 (expression -> expression AND expression .)
    LLAVE_DER       reduce using rule 92 (expression -> expression AND expression .)
    LLAVE_IZQ       reduce using rule 92 (expression -> expression AND expression .)
    RETURN          reduce using rule 92 (expression -> expression AND expression .)

  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 112 ]


state 175

    (93) expression -> expression OR expression .
    (92) expression -> expression . AND expression
    (93) expression -> expression . OR expression

    PARENT_DER      reduce using rule 93 (expression -> expression OR expression .)
    OR              reduce using rule 93 (expression -> expression OR expression .)
    CORCHETE_DER    reduce using rule 93 (expression -> expression OR expression .)
    COMA            reduce using rule 93 (expression -> expression OR expression .)
    PUNTOYCOMA      reduce using rule 93 (expression -> expression OR expression .)
    BREAK           reduce using rule 93 (expression -> expression OR expression .)
    ELSE            reduce using rule 93 (expression -> expression OR expression .)
    ELSEIF          reduce using rule 93 (expression -> expression OR expression .)
    VARIABLE        reduce using rule 93 (expression -> expression OR expression .)
    VAR             reduce using rule 93 (expression -> expression OR expression .)
    TIMESTIMES      reduce using rule 93 (expression -> expression OR expression .)
    AMPERSANT       reduce using rule 93 (expression -> expression OR expression .)
    FUNCTION        reduce using rule 93 (expression -> expression OR expression .)
    PRIVATE         reduce using rule 93 (expression -> expression OR expression .)
    PUBLIC          reduce using rule 93 (expression -> expression OR expression .)
    PROTECTED       reduce using rule 93 (expression -> expression OR expression .)
    REQUIRE         reduce using rule 93 (expression -> expression OR expression .)
    INCLUDE         reduce using rule 93 (expression -> expression OR expression .)
    CLASS           reduce using rule 93 (expression -> expression OR expression .)
    IF              reduce using rule 93 (expression -> expression OR expression .)
    SWITCH          reduce using rule 93 (expression -> expression OR expression .)
    CASE            reduce using rule 93 (expression -> expression OR expression .)
    DEFAULT         reduce using rule 93 (expression -> expression OR expression .)
    FOR             reduce using rule 93 (expression -> expression OR expression .)
    WHILE           reduce using rule 93 (expression -> expression OR expression .)
    DO              reduce using rule 93 (expression -> expression OR expression .)
    ALERT           reduce using rule 93 (expression -> expression OR expression .)
    PARENT_IZQ      reduce using rule 93 (expression -> expression OR expression .)
    NUMERO          reduce using rule 93 (expression -> expression OR expression .)
    IDVAR           reduce using rule 93 (expression -> expression OR expression .)
    TRUE            reduce using rule 93 (expression -> expression OR expression .)
    FALSE           reduce using rule 93 (expression -> expression OR expression .)
    ECHO            reduce using rule 93 (expression -> expression OR expression .)
    $end            reduce using rule 93 (expression -> expression OR expression .)
    LLAVE_DER       reduce using rule 93 (expression -> expression OR expression .)
    LLAVE_IZQ       reduce using rule 93 (expression -> expression OR expression .)
    RETURN          reduce using rule 93 (expression -> expression OR expression .)
    AND             shift and go to state 111

  ! AND             [ reduce using rule 93 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 112 ]


state 176

    (89) expression -> VARIABLE relop NUMERO .

    PARENT_DER      reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    AND             reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    OR              reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    CORCHETE_DER    reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    COMA            reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    PUNTOYCOMA      reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    BREAK           reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    ELSE            reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    ELSEIF          reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    VARIABLE        reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    VAR             reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    TIMESTIMES      reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    AMPERSANT       reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    FUNCTION        reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    PRIVATE         reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    PUBLIC          reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    PROTECTED       reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    REQUIRE         reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    INCLUDE         reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    CLASS           reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    IF              reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    SWITCH          reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    CASE            reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    DEFAULT         reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    FOR             reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    WHILE           reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    DO              reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    ALERT           reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    PARENT_IZQ      reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    NUMERO          reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    IDVAR           reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    TRUE            reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    FALSE           reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    ECHO            reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    $end            reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    LLAVE_DER       reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    LLAVE_IZQ       reduce using rule 89 (expression -> VARIABLE relop NUMERO .)
    RETURN          reduce using rule 89 (expression -> VARIABLE relop NUMERO .)


state 177

    (91) expression -> VARIABLE IGUAL AMPERSANT . VARIABLE

    VARIABLE        shift and go to state 208


state 178

    (98) simple_expression -> additive_expression relop additive_expression .
    (108) additive_expression -> additive_expression . addop term
    (114) addop -> . SUMA
    (115) addop -> . RESTA

    PARENT_DER      reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    AND             reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    OR              reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    PUNTOYCOMA      reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    CORCHETE_DER    reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    COMA            reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    BREAK           reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    VARIABLE        reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    VAR             reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    TIMESTIMES      reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    AMPERSANT       reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    FUNCTION        reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    PRIVATE         reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    PUBLIC          reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    PROTECTED       reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    REQUIRE         reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    INCLUDE         reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    CLASS           reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    IF              reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    SWITCH          reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    CASE            reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    DEFAULT         reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    FOR             reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    WHILE           reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    DO              reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    ALERT           reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    PARENT_IZQ      reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    NUMERO          reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    IDVAR           reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    TRUE            reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    FALSE           reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    ECHO            reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    $end            reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    LLAVE_DER       reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    LLAVE_IZQ       reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    RETURN          reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    ELSE            reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    ELSEIF          reduce using rule 98 (simple_expression -> additive_expression relop additive_expression .)
    SUMA            shift and go to state 48
    RESTA           shift and go to state 49

    addop                          shift and go to state 47

state 179

    (24) header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 209


state 180

    (25) header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 210


state 181

    (27) class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute . LLAVE_DER
    (28) attribute -> attribute . area var_declaration
    (30) attribute -> attribute . area fun_declaration
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED

    LLAVE_DER       shift and go to state 211
    PRIVATE         shift and go to state 24
    PUBLIC          shift and go to state 25
    PROTECTED       shift and go to state 26

    area                           shift and go to state 212

state 182

    (29) attribute -> area . var_declaration
    (31) attribute -> area . fun_declaration
    (35) var_declaration -> . VARIABLE PUNTOYCOMA var_declaration
    (36) var_declaration -> . VAR VARIABLE IGUAL simple_expression
    (37) var_declaration -> . VARIABLE PUNTOYCOMA
    (38) var_declaration -> . TIMESTIMES VARIABLE PUNTOYCOMA
    (39) var_declaration -> . TIMESTIMES VARIABLE PUNTOYCOMA var_declaration
    (40) var_declaration -> . VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration
    (41) var_declaration -> . VARIABLE IGUAL NUMERO PUNTOYCOMA
    (42) var_declaration -> . VARIABLE IGUAL boolean PUNTOYCOMA var_declaration
    (43) var_declaration -> . VARIABLE IGUAL boolean PUNTOYCOMA
    (44) var_declaration -> . VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration
    (45) var_declaration -> . VARIABLE IGUAL VARIABLE PUNTOYCOMA
    (46) var_declaration -> . AMPERSANT VARIABLE PUNTOYCOMA var_declaration
    (47) var_declaration -> . AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt
    (48) var_declaration -> . AMPERSANT VARIABLE PUNTOYCOMA
    (49) var_declaration -> . VARIABLE IGUAL simple_expression PUNTOYCOMA
    (50) fun_declaration -> . FUNCTION VARIABLE PARENT_IZQ params PARENT_DER
    (51) fun_declaration -> . FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt

    VARIABLE        shift and go to state 94
    VAR             shift and go to state 17
    TIMESTIMES      shift and go to state 18
    AMPERSANT       shift and go to state 21
    FUNCTION        shift and go to state 22

    var_declaration                shift and go to state 213
    fun_declaration                shift and go to state 214

state 183

    (124) factor -> IDVAR PARENT_IZQ args PARENT_DER .

    MULTIPLICACION  reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    DIVISION        reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    SUMA            reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    RESTA           reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    VARIABLE        reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    VAR             reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    TIMESTIMES      reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    AMPERSANT       reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    FUNCTION        reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    PRIVATE         reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    PUBLIC          reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    PROTECTED       reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    REQUIRE         reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    INCLUDE         reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    CLASS           reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    IF              reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    SWITCH          reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    CASE            reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    DEFAULT         reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    FOR             reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    WHILE           reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    DO              reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    ALERT           reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    PARENT_IZQ      reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    NUMERO          reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    IDVAR           reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    TRUE            reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    FALSE           reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    ECHO            reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    $end            reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    MENOR           reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    MENOR_IGUAL     reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    MAYOR           reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    MAYOR_IGUAL     reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    DESIGUAL        reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    DISTINTO        reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    ES_IGUAL        reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    PARENT_DER      reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    AND             reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    OR              reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    PUNTOYCOMA      reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    CORCHETE_DER    reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    COMA            reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    BREAK           reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    LLAVE_DER       reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    LLAVE_IZQ       reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    RETURN          reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    ELSE            reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)
    ELSEIF          reduce using rule 124 (factor -> IDVAR PARENT_IZQ args PARENT_DER .)


state 184

    (128) args_list -> args_list COMA . expression
    (89) expression -> . VARIABLE relop NUMERO
    (90) expression -> . simple_expression
    (91) expression -> . VARIABLE IGUAL AMPERSANT VARIABLE
    (92) expression -> . expression AND expression
    (93) expression -> . expression OR expression
    (94) expression -> . additive_expression
    (95) expression -> . alert_stmt
    (98) simple_expression -> . additive_expression relop additive_expression
    (99) simple_expression -> . additive_expression
    (100) simple_expression -> . alert_stmt
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty
    (116) term -> . term mulop factor
    (117) term -> . factor
    (135) empty -> .
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

    VARIABLE        shift and go to state 67
    ALERT           shift and go to state 40
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    COMA            reduce using rule 135 (empty -> .)
    PARENT_DER      reduce using rule 135 (empty -> .)
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    expression                     shift and go to state 215
    simple_expression              shift and go to state 68
    additive_expression            shift and go to state 69
    alert_stmt                     shift and go to state 70
    term                           shift and go to state 15
    empty                          shift and go to state 71
    factor                         shift and go to state 41
    var                            shift and go to state 34
    boolean                        shift and go to state 20

state 185

    (77) selection_stmt -> IF PARENT_IZQ expression PARENT_DER . statement
    (78) selection_stmt -> IF PARENT_IZQ expression PARENT_DER . statement selection
    (64) statement -> . expression_stmt
    (65) statement -> . compount_stmt
    (66) statement -> . selection_stmt
    (67) statement -> . iteration_stmt
    (68) statement -> . return_stmt
    (69) statement -> . class_declaration
    (70) statement -> . echo_stmt
    (71) statement -> . expression
    (72) statement -> . additive_expression
    (73) statement -> . alert_stmt
    (74) expression_stmt -> . expression PUNTOYCOMA
    (75) expression_stmt -> . additive_expression
    (76) expression_stmt -> . alert_stmt
    (58) compount_stmt -> . LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER
    (77) selection_stmt -> . IF PARENT_IZQ expression PARENT_DER statement
    (78) selection_stmt -> . IF PARENT_IZQ expression PARENT_DER statement selection
    (81) selection_stmt -> . SWITCH PARENT_IZQ var PARENT_DER statement
    (82) selection_stmt -> . CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA
    (83) selection_stmt -> . DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA
    (84) iteration_stmt -> . FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement
    (85) iteration_stmt -> . WHILE PARENT_IZQ expression PARENT_DER statement
    (86) iteration_stmt -> . DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER
    (87) return_stmt -> . RETURN PUNTOYCOMA
    (88) return_stmt -> . RETURN expression PUNTOYCOMA
    (26) class_declaration -> . area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
    (27) class_declaration -> . CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
    (16) echo_stmt -> . echo_stmt ECHO STRING PUNTOYCOMA
    (17) echo_stmt -> . echo_stmt ECHO IDVAR PUNTOYCOMA
    (18) echo_stmt -> . empty
    (19) echo_stmt -> . echo_stmt ECHO NUMERO PUNTOYCOMA
    (20) echo_stmt -> . echo_stmt ECHO boolean PUNTOYCOMA
    (21) echo_stmt -> . echo_stmt ECHO fun_declaration PUNTOYCOMA
    (89) expression -> . VARIABLE relop NUMERO
    (90) expression -> . simple_expression
    (91) expression -> . VARIABLE IGUAL AMPERSANT VARIABLE
    (92) expression -> . expression AND expression
    (93) expression -> . expression OR expression
    (94) expression -> . additive_expression
    (95) expression -> . alert_stmt
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED
    (135) empty -> .
    (98) simple_expression -> . additive_expression relop additive_expression
    (99) simple_expression -> . additive_expression
    (100) simple_expression -> . alert_stmt
    (116) term -> . term mulop factor
    (117) term -> . factor
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ALERT resolved as shift
  ! shift/reduce conflict for LLAVE_IZQ resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PARENT_IZQ resolved as shift
  ! shift/reduce conflict for NUMERO resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LLAVE_IZQ       shift and go to state 145
    IF              shift and go to state 32
    SWITCH          shift and go to state 33
    CASE            shift and go to state 35
    DEFAULT         shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    DO              shift and go to state 39
    RETURN          shift and go to state 146
    CLASS           shift and go to state 29
    VARIABLE        shift and go to state 67
    ALERT           shift and go to state 40
    PRIVATE         shift and go to state 24
    PUBLIC          shift and go to state 25
    PROTECTED       shift and go to state 26
    ECHO            reduce using rule 135 (empty -> .)
    ELSE            reduce using rule 135 (empty -> .)
    ELSEIF          reduce using rule 135 (empty -> .)
    VAR             reduce using rule 135 (empty -> .)
    TIMESTIMES      reduce using rule 135 (empty -> .)
    AMPERSANT       reduce using rule 135 (empty -> .)
    FUNCTION        reduce using rule 135 (empty -> .)
    REQUIRE         reduce using rule 135 (empty -> .)
    INCLUDE         reduce using rule 135 (empty -> .)
    $end            reduce using rule 135 (empty -> .)
    BREAK           reduce using rule 135 (empty -> .)
    PUNTOYCOMA      reduce using rule 135 (empty -> .)
    LLAVE_DER       reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

  ! VARIABLE        [ reduce using rule 135 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 135 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 135 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 135 (empty -> .) ]
  ! CLASS           [ reduce using rule 135 (empty -> .) ]
  ! IF              [ reduce using rule 135 (empty -> .) ]
  ! SWITCH          [ reduce using rule 135 (empty -> .) ]
  ! CASE            [ reduce using rule 135 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 135 (empty -> .) ]
  ! FOR             [ reduce using rule 135 (empty -> .) ]
  ! WHILE           [ reduce using rule 135 (empty -> .) ]
  ! DO              [ reduce using rule 135 (empty -> .) ]
  ! ALERT           [ reduce using rule 135 (empty -> .) ]
  ! PARENT_IZQ      [ reduce using rule 135 (empty -> .) ]
  ! NUMERO          [ reduce using rule 135 (empty -> .) ]
  ! IDVAR           [ reduce using rule 135 (empty -> .) ]
  ! TRUE            [ reduce using rule 135 (empty -> .) ]
  ! FALSE           [ reduce using rule 135 (empty -> .) ]
  ! LLAVE_IZQ       [ reduce using rule 135 (empty -> .) ]
  ! RETURN          [ reduce using rule 135 (empty -> .) ]

    expression                     shift and go to state 142
    statement                      shift and go to state 216
    expression_stmt                shift and go to state 135
    compount_stmt                  shift and go to state 136
    selection_stmt                 shift and go to state 137
    iteration_stmt                 shift and go to state 138
    return_stmt                    shift and go to state 139
    class_declaration              shift and go to state 140
    echo_stmt                      shift and go to state 141
    additive_expression            shift and go to state 143
    alert_stmt                     shift and go to state 144
    var                            shift and go to state 34
    area                           shift and go to state 147
    empty                          shift and go to state 31
    boolean                        shift and go to state 20
    simple_expression              shift and go to state 68
    term                           shift and go to state 15
    factor                         shift and go to state 41

state 186

    (81) selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER . statement
    (64) statement -> . expression_stmt
    (65) statement -> . compount_stmt
    (66) statement -> . selection_stmt
    (67) statement -> . iteration_stmt
    (68) statement -> . return_stmt
    (69) statement -> . class_declaration
    (70) statement -> . echo_stmt
    (71) statement -> . expression
    (72) statement -> . additive_expression
    (73) statement -> . alert_stmt
    (74) expression_stmt -> . expression PUNTOYCOMA
    (75) expression_stmt -> . additive_expression
    (76) expression_stmt -> . alert_stmt
    (58) compount_stmt -> . LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER
    (77) selection_stmt -> . IF PARENT_IZQ expression PARENT_DER statement
    (78) selection_stmt -> . IF PARENT_IZQ expression PARENT_DER statement selection
    (81) selection_stmt -> . SWITCH PARENT_IZQ var PARENT_DER statement
    (82) selection_stmt -> . CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA
    (83) selection_stmt -> . DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA
    (84) iteration_stmt -> . FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement
    (85) iteration_stmt -> . WHILE PARENT_IZQ expression PARENT_DER statement
    (86) iteration_stmt -> . DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER
    (87) return_stmt -> . RETURN PUNTOYCOMA
    (88) return_stmt -> . RETURN expression PUNTOYCOMA
    (26) class_declaration -> . area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
    (27) class_declaration -> . CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
    (16) echo_stmt -> . echo_stmt ECHO STRING PUNTOYCOMA
    (17) echo_stmt -> . echo_stmt ECHO IDVAR PUNTOYCOMA
    (18) echo_stmt -> . empty
    (19) echo_stmt -> . echo_stmt ECHO NUMERO PUNTOYCOMA
    (20) echo_stmt -> . echo_stmt ECHO boolean PUNTOYCOMA
    (21) echo_stmt -> . echo_stmt ECHO fun_declaration PUNTOYCOMA
    (89) expression -> . VARIABLE relop NUMERO
    (90) expression -> . simple_expression
    (91) expression -> . VARIABLE IGUAL AMPERSANT VARIABLE
    (92) expression -> . expression AND expression
    (93) expression -> . expression OR expression
    (94) expression -> . additive_expression
    (95) expression -> . alert_stmt
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED
    (135) empty -> .
    (98) simple_expression -> . additive_expression relop additive_expression
    (99) simple_expression -> . additive_expression
    (100) simple_expression -> . alert_stmt
    (116) term -> . term mulop factor
    (117) term -> . factor
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ALERT resolved as shift
  ! shift/reduce conflict for LLAVE_IZQ resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PARENT_IZQ resolved as shift
  ! shift/reduce conflict for NUMERO resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LLAVE_IZQ       shift and go to state 145
    IF              shift and go to state 32
    SWITCH          shift and go to state 33
    CASE            shift and go to state 35
    DEFAULT         shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    DO              shift and go to state 39
    RETURN          shift and go to state 146
    CLASS           shift and go to state 29
    VARIABLE        shift and go to state 67
    ALERT           shift and go to state 40
    PRIVATE         shift and go to state 24
    PUBLIC          shift and go to state 25
    PROTECTED       shift and go to state 26
    ECHO            reduce using rule 135 (empty -> .)
    ELSE            reduce using rule 135 (empty -> .)
    ELSEIF          reduce using rule 135 (empty -> .)
    VAR             reduce using rule 135 (empty -> .)
    TIMESTIMES      reduce using rule 135 (empty -> .)
    AMPERSANT       reduce using rule 135 (empty -> .)
    FUNCTION        reduce using rule 135 (empty -> .)
    REQUIRE         reduce using rule 135 (empty -> .)
    INCLUDE         reduce using rule 135 (empty -> .)
    $end            reduce using rule 135 (empty -> .)
    BREAK           reduce using rule 135 (empty -> .)
    PUNTOYCOMA      reduce using rule 135 (empty -> .)
    LLAVE_DER       reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

  ! VARIABLE        [ reduce using rule 135 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 135 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 135 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 135 (empty -> .) ]
  ! CLASS           [ reduce using rule 135 (empty -> .) ]
  ! IF              [ reduce using rule 135 (empty -> .) ]
  ! SWITCH          [ reduce using rule 135 (empty -> .) ]
  ! CASE            [ reduce using rule 135 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 135 (empty -> .) ]
  ! FOR             [ reduce using rule 135 (empty -> .) ]
  ! WHILE           [ reduce using rule 135 (empty -> .) ]
  ! DO              [ reduce using rule 135 (empty -> .) ]
  ! ALERT           [ reduce using rule 135 (empty -> .) ]
  ! PARENT_IZQ      [ reduce using rule 135 (empty -> .) ]
  ! NUMERO          [ reduce using rule 135 (empty -> .) ]
  ! IDVAR           [ reduce using rule 135 (empty -> .) ]
  ! TRUE            [ reduce using rule 135 (empty -> .) ]
  ! FALSE           [ reduce using rule 135 (empty -> .) ]
  ! LLAVE_IZQ       [ reduce using rule 135 (empty -> .) ]
  ! RETURN          [ reduce using rule 135 (empty -> .) ]

    var                            shift and go to state 34
    statement                      shift and go to state 217
    expression_stmt                shift and go to state 135
    compount_stmt                  shift and go to state 136
    selection_stmt                 shift and go to state 137
    iteration_stmt                 shift and go to state 138
    return_stmt                    shift and go to state 139
    class_declaration              shift and go to state 140
    echo_stmt                      shift and go to state 141
    expression                     shift and go to state 142
    additive_expression            shift and go to state 143
    alert_stmt                     shift and go to state 144
    area                           shift and go to state 147
    empty                          shift and go to state 31
    boolean                        shift and go to state 20
    simple_expression              shift and go to state 68
    term                           shift and go to state 15
    factor                         shift and go to state 41

state 187

    (82) selection_stmt -> CASE NUMERO DOS_PUNTOS statement . BREAK PUNTOYCOMA

    BREAK           shift and go to state 218


state 188

    (83) selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 219


state 189

    (74) expression_stmt -> expression PUNTOYCOMA .

    BREAK           reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    PUNTOYCOMA      reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    ELSE            reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    ELSEIF          reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    VARIABLE        reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    VAR             reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    TIMESTIMES      reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    AMPERSANT       reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    FUNCTION        reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    PRIVATE         reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    PUBLIC          reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    PROTECTED       reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    REQUIRE         reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    INCLUDE         reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    CLASS           reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    IF              reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    SWITCH          reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    CASE            reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    DEFAULT         reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    FOR             reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    WHILE           reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    DO              reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    ALERT           reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    PARENT_IZQ      reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    NUMERO          reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    IDVAR           reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    TRUE            reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    FALSE           reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    ECHO            reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    $end            reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    LLAVE_DER       reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    LLAVE_IZQ       reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    RETURN          reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    AND             reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)
    OR              reduce using rule 74 (expression_stmt -> expression PUNTOYCOMA .)


state 190

    (58) compount_stmt -> LLAVE_IZQ echo_stmt . local_declarations echo_stmt statement_list echo_stmt LLAVE_DER
    (16) echo_stmt -> echo_stmt . ECHO STRING PUNTOYCOMA
    (17) echo_stmt -> echo_stmt . ECHO IDVAR PUNTOYCOMA
    (19) echo_stmt -> echo_stmt . ECHO NUMERO PUNTOYCOMA
    (20) echo_stmt -> echo_stmt . ECHO boolean PUNTOYCOMA
    (21) echo_stmt -> echo_stmt . ECHO fun_declaration PUNTOYCOMA
    (59) local_declarations -> . local_declarations var_declaration
    (60) local_declarations -> . empty
    (135) empty -> .

  ! shift/reduce conflict for ECHO resolved as shift
    ECHO            shift and go to state 52
    VARIABLE        reduce using rule 135 (empty -> .)
    VAR             reduce using rule 135 (empty -> .)
    TIMESTIMES      reduce using rule 135 (empty -> .)
    AMPERSANT       reduce using rule 135 (empty -> .)
    ALERT           reduce using rule 135 (empty -> .)
    LLAVE_IZQ       reduce using rule 135 (empty -> .)
    IF              reduce using rule 135 (empty -> .)
    SWITCH          reduce using rule 135 (empty -> .)
    CASE            reduce using rule 135 (empty -> .)
    DEFAULT         reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    DO              reduce using rule 135 (empty -> .)
    RETURN          reduce using rule 135 (empty -> .)
    CLASS           reduce using rule 135 (empty -> .)
    PRIVATE         reduce using rule 135 (empty -> .)
    PUBLIC          reduce using rule 135 (empty -> .)
    PROTECTED       reduce using rule 135 (empty -> .)
    PARENT_IZQ      reduce using rule 135 (empty -> .)
    NUMERO          reduce using rule 135 (empty -> .)
    IDVAR           reduce using rule 135 (empty -> .)
    TRUE            reduce using rule 135 (empty -> .)
    FALSE           reduce using rule 135 (empty -> .)
    LLAVE_DER       reduce using rule 135 (empty -> .)
    PUNTOYCOMA      reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)

  ! ECHO            [ reduce using rule 135 (empty -> .) ]

    local_declarations             shift and go to state 220
    empty                          shift and go to state 221

state 191

    (18) echo_stmt -> empty .

    ECHO            reduce using rule 18 (echo_stmt -> empty .)
    VARIABLE        reduce using rule 18 (echo_stmt -> empty .)
    VAR             reduce using rule 18 (echo_stmt -> empty .)
    TIMESTIMES      reduce using rule 18 (echo_stmt -> empty .)
    AMPERSANT       reduce using rule 18 (echo_stmt -> empty .)
    ALERT           reduce using rule 18 (echo_stmt -> empty .)
    LLAVE_IZQ       reduce using rule 18 (echo_stmt -> empty .)
    IF              reduce using rule 18 (echo_stmt -> empty .)
    SWITCH          reduce using rule 18 (echo_stmt -> empty .)
    CASE            reduce using rule 18 (echo_stmt -> empty .)
    DEFAULT         reduce using rule 18 (echo_stmt -> empty .)
    FOR             reduce using rule 18 (echo_stmt -> empty .)
    WHILE           reduce using rule 18 (echo_stmt -> empty .)
    DO              reduce using rule 18 (echo_stmt -> empty .)
    RETURN          reduce using rule 18 (echo_stmt -> empty .)
    CLASS           reduce using rule 18 (echo_stmt -> empty .)
    PRIVATE         reduce using rule 18 (echo_stmt -> empty .)
    PUBLIC          reduce using rule 18 (echo_stmt -> empty .)
    PROTECTED       reduce using rule 18 (echo_stmt -> empty .)
    PARENT_IZQ      reduce using rule 18 (echo_stmt -> empty .)
    NUMERO          reduce using rule 18 (echo_stmt -> empty .)
    IDVAR           reduce using rule 18 (echo_stmt -> empty .)
    TRUE            reduce using rule 18 (echo_stmt -> empty .)
    FALSE           reduce using rule 18 (echo_stmt -> empty .)
    LLAVE_DER       reduce using rule 18 (echo_stmt -> empty .)
    PUNTOYCOMA      reduce using rule 18 (echo_stmt -> empty .)
    AND             reduce using rule 18 (echo_stmt -> empty .)
    OR              reduce using rule 18 (echo_stmt -> empty .)


state 192

    (87) return_stmt -> RETURN PUNTOYCOMA .

    BREAK           reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    PUNTOYCOMA      reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    ELSE            reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    ELSEIF          reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    VARIABLE        reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    VAR             reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    TIMESTIMES      reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    AMPERSANT       reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    FUNCTION        reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    PRIVATE         reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    PUBLIC          reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    PROTECTED       reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    REQUIRE         reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    INCLUDE         reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    CLASS           reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    IF              reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    SWITCH          reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    CASE            reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    DEFAULT         reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    FOR             reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    WHILE           reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    DO              reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    ALERT           reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    PARENT_IZQ      reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    NUMERO          reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    IDVAR           reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    TRUE            reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    FALSE           reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    ECHO            reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    $end            reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    LLAVE_DER       reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    LLAVE_IZQ       reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    RETURN          reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    AND             reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)
    OR              reduce using rule 87 (return_stmt -> RETURN PUNTOYCOMA .)


state 193

    (88) return_stmt -> RETURN expression . PUNTOYCOMA
    (92) expression -> expression . AND expression
    (93) expression -> expression . OR expression

    PUNTOYCOMA      shift and go to state 222
    AND             shift and go to state 111
    OR              shift and go to state 112


state 194

    (84) iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA . expression PUNTOYCOMA additive_expression PARENT_DER statement
    (89) expression -> . VARIABLE relop NUMERO
    (90) expression -> . simple_expression
    (91) expression -> . VARIABLE IGUAL AMPERSANT VARIABLE
    (92) expression -> . expression AND expression
    (93) expression -> . expression OR expression
    (94) expression -> . additive_expression
    (95) expression -> . alert_stmt
    (98) simple_expression -> . additive_expression relop additive_expression
    (99) simple_expression -> . additive_expression
    (100) simple_expression -> . alert_stmt
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty
    (116) term -> . term mulop factor
    (117) term -> . factor
    (135) empty -> .
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

    VARIABLE        shift and go to state 67
    ALERT           shift and go to state 40
    PUNTOYCOMA      reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    expression                     shift and go to state 223
    additive_expression            shift and go to state 69
    simple_expression              shift and go to state 68
    alert_stmt                     shift and go to state 70
    term                           shift and go to state 15
    empty                          shift and go to state 71
    factor                         shift and go to state 41
    var                            shift and go to state 34
    boolean                        shift and go to state 20

state 195

    (85) iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER . statement
    (64) statement -> . expression_stmt
    (65) statement -> . compount_stmt
    (66) statement -> . selection_stmt
    (67) statement -> . iteration_stmt
    (68) statement -> . return_stmt
    (69) statement -> . class_declaration
    (70) statement -> . echo_stmt
    (71) statement -> . expression
    (72) statement -> . additive_expression
    (73) statement -> . alert_stmt
    (74) expression_stmt -> . expression PUNTOYCOMA
    (75) expression_stmt -> . additive_expression
    (76) expression_stmt -> . alert_stmt
    (58) compount_stmt -> . LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER
    (77) selection_stmt -> . IF PARENT_IZQ expression PARENT_DER statement
    (78) selection_stmt -> . IF PARENT_IZQ expression PARENT_DER statement selection
    (81) selection_stmt -> . SWITCH PARENT_IZQ var PARENT_DER statement
    (82) selection_stmt -> . CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA
    (83) selection_stmt -> . DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA
    (84) iteration_stmt -> . FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement
    (85) iteration_stmt -> . WHILE PARENT_IZQ expression PARENT_DER statement
    (86) iteration_stmt -> . DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER
    (87) return_stmt -> . RETURN PUNTOYCOMA
    (88) return_stmt -> . RETURN expression PUNTOYCOMA
    (26) class_declaration -> . area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
    (27) class_declaration -> . CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
    (16) echo_stmt -> . echo_stmt ECHO STRING PUNTOYCOMA
    (17) echo_stmt -> . echo_stmt ECHO IDVAR PUNTOYCOMA
    (18) echo_stmt -> . empty
    (19) echo_stmt -> . echo_stmt ECHO NUMERO PUNTOYCOMA
    (20) echo_stmt -> . echo_stmt ECHO boolean PUNTOYCOMA
    (21) echo_stmt -> . echo_stmt ECHO fun_declaration PUNTOYCOMA
    (89) expression -> . VARIABLE relop NUMERO
    (90) expression -> . simple_expression
    (91) expression -> . VARIABLE IGUAL AMPERSANT VARIABLE
    (92) expression -> . expression AND expression
    (93) expression -> . expression OR expression
    (94) expression -> . additive_expression
    (95) expression -> . alert_stmt
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED
    (135) empty -> .
    (98) simple_expression -> . additive_expression relop additive_expression
    (99) simple_expression -> . additive_expression
    (100) simple_expression -> . alert_stmt
    (116) term -> . term mulop factor
    (117) term -> . factor
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ALERT resolved as shift
  ! shift/reduce conflict for LLAVE_IZQ resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PARENT_IZQ resolved as shift
  ! shift/reduce conflict for NUMERO resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LLAVE_IZQ       shift and go to state 145
    IF              shift and go to state 32
    SWITCH          shift and go to state 33
    CASE            shift and go to state 35
    DEFAULT         shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    DO              shift and go to state 39
    RETURN          shift and go to state 146
    CLASS           shift and go to state 29
    VARIABLE        shift and go to state 67
    ALERT           shift and go to state 40
    PRIVATE         shift and go to state 24
    PUBLIC          shift and go to state 25
    PROTECTED       shift and go to state 26
    ECHO            reduce using rule 135 (empty -> .)
    ELSE            reduce using rule 135 (empty -> .)
    ELSEIF          reduce using rule 135 (empty -> .)
    VAR             reduce using rule 135 (empty -> .)
    TIMESTIMES      reduce using rule 135 (empty -> .)
    AMPERSANT       reduce using rule 135 (empty -> .)
    FUNCTION        reduce using rule 135 (empty -> .)
    REQUIRE         reduce using rule 135 (empty -> .)
    INCLUDE         reduce using rule 135 (empty -> .)
    $end            reduce using rule 135 (empty -> .)
    BREAK           reduce using rule 135 (empty -> .)
    PUNTOYCOMA      reduce using rule 135 (empty -> .)
    LLAVE_DER       reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

  ! VARIABLE        [ reduce using rule 135 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 135 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 135 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 135 (empty -> .) ]
  ! CLASS           [ reduce using rule 135 (empty -> .) ]
  ! IF              [ reduce using rule 135 (empty -> .) ]
  ! SWITCH          [ reduce using rule 135 (empty -> .) ]
  ! CASE            [ reduce using rule 135 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 135 (empty -> .) ]
  ! FOR             [ reduce using rule 135 (empty -> .) ]
  ! WHILE           [ reduce using rule 135 (empty -> .) ]
  ! DO              [ reduce using rule 135 (empty -> .) ]
  ! ALERT           [ reduce using rule 135 (empty -> .) ]
  ! PARENT_IZQ      [ reduce using rule 135 (empty -> .) ]
  ! NUMERO          [ reduce using rule 135 (empty -> .) ]
  ! IDVAR           [ reduce using rule 135 (empty -> .) ]
  ! TRUE            [ reduce using rule 135 (empty -> .) ]
  ! FALSE           [ reduce using rule 135 (empty -> .) ]
  ! LLAVE_IZQ       [ reduce using rule 135 (empty -> .) ]
  ! RETURN          [ reduce using rule 135 (empty -> .) ]

    expression                     shift and go to state 142
    statement                      shift and go to state 224
    expression_stmt                shift and go to state 135
    compount_stmt                  shift and go to state 136
    selection_stmt                 shift and go to state 137
    iteration_stmt                 shift and go to state 138
    return_stmt                    shift and go to state 139
    class_declaration              shift and go to state 140
    echo_stmt                      shift and go to state 141
    additive_expression            shift and go to state 143
    alert_stmt                     shift and go to state 144
    var                            shift and go to state 34
    area                           shift and go to state 147
    empty                          shift and go to state 31
    boolean                        shift and go to state 20
    simple_expression              shift and go to state 68
    term                           shift and go to state 15
    factor                         shift and go to state 41

state 196

    (86) iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA . LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER

    LLAVE_DER       shift and go to state 225


state 197

    (22) alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 226


state 198

    (26) class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute . LLAVE_DER
    (28) attribute -> attribute . area var_declaration
    (30) attribute -> attribute . area fun_declaration
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED

    LLAVE_DER       shift and go to state 227
    PRIVATE         shift and go to state 24
    PUBLIC          shift and go to state 25
    PROTECTED       shift and go to state 26

    area                           shift and go to state 212

state 199

    (44) var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .

    VARIABLE        reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    VAR             reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    TIMESTIMES      reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    AMPERSANT       reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    FUNCTION        reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    PRIVATE         reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    PUBLIC          reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    PROTECTED       reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    REQUIRE         reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    INCLUDE         reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    CLASS           reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    IF              reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    SWITCH          reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    CASE            reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    DEFAULT         reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    FOR             reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    WHILE           reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    DO              reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    ALERT           reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    PARENT_IZQ      reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    NUMERO          reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    IDVAR           reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    TRUE            reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    FALSE           reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    ECHO            reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    $end            reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    PUNTOYCOMA      reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    LLAVE_DER       reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    LLAVE_IZQ       reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    RETURN          reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    AND             reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)
    OR              reduce using rule 44 (var_declaration -> VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration .)


state 200

    (40) var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .

    VARIABLE        reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    VAR             reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    TIMESTIMES      reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    AMPERSANT       reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    FUNCTION        reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    PRIVATE         reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    PUBLIC          reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    PROTECTED       reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    REQUIRE         reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    INCLUDE         reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    CLASS           reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    IF              reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    SWITCH          reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    CASE            reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    DEFAULT         reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    FOR             reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    WHILE           reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    DO              reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    ALERT           reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    PARENT_IZQ      reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    NUMERO          reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    IDVAR           reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    TRUE            reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    FALSE           reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    ECHO            reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    $end            reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    PUNTOYCOMA      reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    LLAVE_DER       reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    LLAVE_IZQ       reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    RETURN          reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    AND             reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)
    OR              reduce using rule 40 (var_declaration -> VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration .)


state 201

    (42) var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .

    VARIABLE        reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    VAR             reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    TIMESTIMES      reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    AMPERSANT       reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    FUNCTION        reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    PRIVATE         reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    PUBLIC          reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    PROTECTED       reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    REQUIRE         reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    INCLUDE         reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    CLASS           reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    IF              reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    SWITCH          reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    CASE            reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    DEFAULT         reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    FOR             reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    WHILE           reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    DO              reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    ALERT           reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    PARENT_IZQ      reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    NUMERO          reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    IDVAR           reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    TRUE            reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    FALSE           reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    ECHO            reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    $end            reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    PUNTOYCOMA      reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    LLAVE_DER       reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    LLAVE_IZQ       reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    RETURN          reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    AND             reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)
    OR              reduce using rule 42 (var_declaration -> VARIABLE IGUAL boolean PUNTOYCOMA var_declaration .)


state 202

    (133) constructor -> VARIABLE . PARENT_IZQ PARENT_DER
    (134) constructor -> VARIABLE . PARENT_IZQ args PARENT_DER

    PARENT_IZQ      shift and go to state 228


state 203

    (132) typeclass -> VARIABLE IDVAR IGUAL NEW constructor . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 229


state 204

    (47) var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA . selection_stmt
    (77) selection_stmt -> . IF PARENT_IZQ expression PARENT_DER statement
    (78) selection_stmt -> . IF PARENT_IZQ expression PARENT_DER statement selection
    (81) selection_stmt -> . SWITCH PARENT_IZQ var PARENT_DER statement
    (82) selection_stmt -> . CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA
    (83) selection_stmt -> . DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA

    IF              shift and go to state 32
    SWITCH          shift and go to state 33
    CASE            shift and go to state 35
    DEFAULT         shift and go to state 36

    selection_stmt                 shift and go to state 230

state 205

    (57) param -> VARIABLE CORCHETE_IZQ . CORCHETE_DER PUNTOYCOMA

    CORCHETE_DER    shift and go to state 231


state 206

    (50) fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .
    (51) fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER . compount_stmt
    (58) compount_stmt -> . LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER

    VARIABLE        reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    VAR             reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    TIMESTIMES      reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    AMPERSANT       reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    FUNCTION        reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    PRIVATE         reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    PUBLIC          reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    PROTECTED       reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    REQUIRE         reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    INCLUDE         reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    CLASS           reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    IF              reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    SWITCH          reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    CASE            reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    DEFAULT         reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    FOR             reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    WHILE           reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    DO              reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    ALERT           reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    PARENT_IZQ      reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    NUMERO          reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    IDVAR           reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    TRUE            reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    FALSE           reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    ECHO            reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    $end            reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    PUNTOYCOMA      reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    LLAVE_DER       reduce using rule 50 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER .)
    LLAVE_IZQ       shift and go to state 145

    compount_stmt                  shift and go to state 232

state 207

    (54) param_list -> param_list COMA . param_list
    (54) param_list -> . param_list COMA param_list
    (55) param_list -> . param
    (56) param -> . VARIABLE
    (57) param -> . VARIABLE CORCHETE_IZQ CORCHETE_DER PUNTOYCOMA

    VARIABLE        shift and go to state 169

    param_list                     shift and go to state 233
    param                          shift and go to state 173

state 208

    (91) expression -> VARIABLE IGUAL AMPERSANT VARIABLE .

    PARENT_DER      reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    AND             reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    OR              reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    CORCHETE_DER    reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    COMA            reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    PUNTOYCOMA      reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    BREAK           reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    ELSE            reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    ELSEIF          reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    VARIABLE        reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    VAR             reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    TIMESTIMES      reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    AMPERSANT       reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    FUNCTION        reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    PRIVATE         reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    PUBLIC          reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    PROTECTED       reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    REQUIRE         reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    INCLUDE         reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    CLASS           reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    IF              reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    SWITCH          reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    CASE            reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    DEFAULT         reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    FOR             reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    WHILE           reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    DO              reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    ALERT           reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    PARENT_IZQ      reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    NUMERO          reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    IDVAR           reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    TRUE            reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    FALSE           reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    ECHO            reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    $end            reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    LLAVE_DER       reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    LLAVE_IZQ       reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)
    RETURN          reduce using rule 91 (expression -> VARIABLE IGUAL AMPERSANT VARIABLE .)


state 209

    (24) header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .

    VARIABLE        reduce using rule 24 (header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    VAR             reduce using rule 24 (header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    TIMESTIMES      reduce using rule 24 (header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    AMPERSANT       reduce using rule 24 (header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    FUNCTION        reduce using rule 24 (header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    PRIVATE         reduce using rule 24 (header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    PUBLIC          reduce using rule 24 (header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    PROTECTED       reduce using rule 24 (header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    REQUIRE         reduce using rule 24 (header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    INCLUDE         reduce using rule 24 (header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    CLASS           reduce using rule 24 (header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    IF              reduce using rule 24 (header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    SWITCH          reduce using rule 24 (header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    CASE            reduce using rule 24 (header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    DEFAULT         reduce using rule 24 (header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    FOR             reduce using rule 24 (header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    WHILE           reduce using rule 24 (header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    DO              reduce using rule 24 (header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    ALERT           reduce using rule 24 (header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    PARENT_IZQ      reduce using rule 24 (header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    NUMERO          reduce using rule 24 (header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    IDVAR           reduce using rule 24 (header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    TRUE            reduce using rule 24 (header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    FALSE           reduce using rule 24 (header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    ECHO            reduce using rule 24 (header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    $end            reduce using rule 24 (header_declaration -> REQUIRE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)


state 210

    (25) header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .

    VARIABLE        reduce using rule 25 (header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    VAR             reduce using rule 25 (header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    TIMESTIMES      reduce using rule 25 (header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    AMPERSANT       reduce using rule 25 (header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    FUNCTION        reduce using rule 25 (header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    PRIVATE         reduce using rule 25 (header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    PUBLIC          reduce using rule 25 (header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    PROTECTED       reduce using rule 25 (header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    REQUIRE         reduce using rule 25 (header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    INCLUDE         reduce using rule 25 (header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    CLASS           reduce using rule 25 (header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    IF              reduce using rule 25 (header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    SWITCH          reduce using rule 25 (header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    CASE            reduce using rule 25 (header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    DEFAULT         reduce using rule 25 (header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    FOR             reduce using rule 25 (header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    WHILE           reduce using rule 25 (header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    DO              reduce using rule 25 (header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    ALERT           reduce using rule 25 (header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    PARENT_IZQ      reduce using rule 25 (header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    NUMERO          reduce using rule 25 (header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    IDVAR           reduce using rule 25 (header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    TRUE            reduce using rule 25 (header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    FALSE           reduce using rule 25 (header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    ECHO            reduce using rule 25 (header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    $end            reduce using rule 25 (header_declaration -> INCLUDE PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)


state 211

    (27) class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .

    VARIABLE        reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    VAR             reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    TIMESTIMES      reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    AMPERSANT       reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    FUNCTION        reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    PRIVATE         reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    PUBLIC          reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    PROTECTED       reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    REQUIRE         reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    INCLUDE         reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    CLASS           reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    IF              reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    SWITCH          reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    CASE            reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    DEFAULT         reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    FOR             reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    WHILE           reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    DO              reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    ALERT           reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    PARENT_IZQ      reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    NUMERO          reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    IDVAR           reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    TRUE            reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    FALSE           reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    ECHO            reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    $end            reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    BREAK           reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    PUNTOYCOMA      reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    ELSE            reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    ELSEIF          reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    LLAVE_DER       reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    LLAVE_IZQ       reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    RETURN          reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    AND             reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    OR              reduce using rule 27 (class_declaration -> CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)


state 212

    (28) attribute -> attribute area . var_declaration
    (30) attribute -> attribute area . fun_declaration
    (35) var_declaration -> . VARIABLE PUNTOYCOMA var_declaration
    (36) var_declaration -> . VAR VARIABLE IGUAL simple_expression
    (37) var_declaration -> . VARIABLE PUNTOYCOMA
    (38) var_declaration -> . TIMESTIMES VARIABLE PUNTOYCOMA
    (39) var_declaration -> . TIMESTIMES VARIABLE PUNTOYCOMA var_declaration
    (40) var_declaration -> . VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration
    (41) var_declaration -> . VARIABLE IGUAL NUMERO PUNTOYCOMA
    (42) var_declaration -> . VARIABLE IGUAL boolean PUNTOYCOMA var_declaration
    (43) var_declaration -> . VARIABLE IGUAL boolean PUNTOYCOMA
    (44) var_declaration -> . VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration
    (45) var_declaration -> . VARIABLE IGUAL VARIABLE PUNTOYCOMA
    (46) var_declaration -> . AMPERSANT VARIABLE PUNTOYCOMA var_declaration
    (47) var_declaration -> . AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt
    (48) var_declaration -> . AMPERSANT VARIABLE PUNTOYCOMA
    (49) var_declaration -> . VARIABLE IGUAL simple_expression PUNTOYCOMA
    (50) fun_declaration -> . FUNCTION VARIABLE PARENT_IZQ params PARENT_DER
    (51) fun_declaration -> . FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt

    VARIABLE        shift and go to state 94
    VAR             shift and go to state 17
    TIMESTIMES      shift and go to state 18
    AMPERSANT       shift and go to state 21
    FUNCTION        shift and go to state 22

    var_declaration                shift and go to state 234
    fun_declaration                shift and go to state 235

state 213

    (29) attribute -> area var_declaration .

    LLAVE_DER       reduce using rule 29 (attribute -> area var_declaration .)
    PRIVATE         reduce using rule 29 (attribute -> area var_declaration .)
    PUBLIC          reduce using rule 29 (attribute -> area var_declaration .)
    PROTECTED       reduce using rule 29 (attribute -> area var_declaration .)


state 214

    (31) attribute -> area fun_declaration .

    LLAVE_DER       reduce using rule 31 (attribute -> area fun_declaration .)
    PRIVATE         reduce using rule 31 (attribute -> area fun_declaration .)
    PUBLIC          reduce using rule 31 (attribute -> area fun_declaration .)
    PROTECTED       reduce using rule 31 (attribute -> area fun_declaration .)


state 215

    (128) args_list -> args_list COMA expression .
    (92) expression -> expression . AND expression
    (93) expression -> expression . OR expression

    COMA            reduce using rule 128 (args_list -> args_list COMA expression .)
    PARENT_DER      reduce using rule 128 (args_list -> args_list COMA expression .)
    AND             shift and go to state 111
    OR              shift and go to state 112


state 216

    (77) selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .
    (78) selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement . selection
    (79) selection -> . ELSE statement
    (80) selection -> . ELSEIF statement selection

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    VARIABLE        reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    VAR             reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    TIMESTIMES      reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    AMPERSANT       reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    FUNCTION        reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    PRIVATE         reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    PUBLIC          reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    PROTECTED       reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    REQUIRE         reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    INCLUDE         reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    CLASS           reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    IF              reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    SWITCH          reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    CASE            reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    DEFAULT         reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    FOR             reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    WHILE           reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    DO              reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    ALERT           reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    PARENT_IZQ      reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    NUMERO          reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    IDVAR           reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    TRUE            reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    FALSE           reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    ECHO            reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    $end            reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    BREAK           reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    PUNTOYCOMA      reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    LLAVE_DER       reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    LLAVE_IZQ       reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    RETURN          reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    AND             reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    OR              reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .)
    ELSE            shift and go to state 237
    ELSEIF          shift and go to state 238

  ! ELSE            [ reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .) ]
  ! ELSEIF          [ reduce using rule 77 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement .) ]

    selection                      shift and go to state 236

state 217

    (81) selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .

    VARIABLE        reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    VAR             reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    TIMESTIMES      reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    AMPERSANT       reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    FUNCTION        reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    PRIVATE         reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    PUBLIC          reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    PROTECTED       reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    REQUIRE         reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    INCLUDE         reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    CLASS           reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    IF              reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    SWITCH          reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    CASE            reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    DEFAULT         reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    FOR             reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    WHILE           reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    DO              reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    ALERT           reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    PARENT_IZQ      reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    NUMERO          reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    IDVAR           reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    TRUE            reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    FALSE           reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    ECHO            reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    $end            reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    BREAK           reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    PUNTOYCOMA      reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    ELSE            reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    ELSEIF          reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    LLAVE_DER       reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    LLAVE_IZQ       reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    RETURN          reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    AND             reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)
    OR              reduce using rule 81 (selection_stmt -> SWITCH PARENT_IZQ var PARENT_DER statement .)


state 218

    (82) selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 239


state 219

    (83) selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .

    VARIABLE        reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    VAR             reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    TIMESTIMES      reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    AMPERSANT       reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    FUNCTION        reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    PRIVATE         reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    PUBLIC          reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    PROTECTED       reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    REQUIRE         reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    INCLUDE         reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    CLASS           reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    IF              reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    SWITCH          reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    CASE            reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    DEFAULT         reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    FOR             reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    WHILE           reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    DO              reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    ALERT           reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    PARENT_IZQ      reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    NUMERO          reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    IDVAR           reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    TRUE            reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    FALSE           reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    ECHO            reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    $end            reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    BREAK           reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    PUNTOYCOMA      reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    ELSE            reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    ELSEIF          reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    LLAVE_DER       reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    LLAVE_IZQ       reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    RETURN          reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    AND             reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    OR              reduce using rule 83 (selection_stmt -> DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA .)


state 220

    (58) compount_stmt -> LLAVE_IZQ echo_stmt local_declarations . echo_stmt statement_list echo_stmt LLAVE_DER
    (59) local_declarations -> local_declarations . var_declaration
    (16) echo_stmt -> . echo_stmt ECHO STRING PUNTOYCOMA
    (17) echo_stmt -> . echo_stmt ECHO IDVAR PUNTOYCOMA
    (18) echo_stmt -> . empty
    (19) echo_stmt -> . echo_stmt ECHO NUMERO PUNTOYCOMA
    (20) echo_stmt -> . echo_stmt ECHO boolean PUNTOYCOMA
    (21) echo_stmt -> . echo_stmt ECHO fun_declaration PUNTOYCOMA
    (35) var_declaration -> . VARIABLE PUNTOYCOMA var_declaration
    (36) var_declaration -> . VAR VARIABLE IGUAL simple_expression
    (37) var_declaration -> . VARIABLE PUNTOYCOMA
    (38) var_declaration -> . TIMESTIMES VARIABLE PUNTOYCOMA
    (39) var_declaration -> . TIMESTIMES VARIABLE PUNTOYCOMA var_declaration
    (40) var_declaration -> . VARIABLE IGUAL NUMERO PUNTOYCOMA var_declaration
    (41) var_declaration -> . VARIABLE IGUAL NUMERO PUNTOYCOMA
    (42) var_declaration -> . VARIABLE IGUAL boolean PUNTOYCOMA var_declaration
    (43) var_declaration -> . VARIABLE IGUAL boolean PUNTOYCOMA
    (44) var_declaration -> . VARIABLE IGUAL VARIABLE PUNTOYCOMA var_declaration
    (45) var_declaration -> . VARIABLE IGUAL VARIABLE PUNTOYCOMA
    (46) var_declaration -> . AMPERSANT VARIABLE PUNTOYCOMA var_declaration
    (47) var_declaration -> . AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt
    (48) var_declaration -> . AMPERSANT VARIABLE PUNTOYCOMA
    (49) var_declaration -> . VARIABLE IGUAL simple_expression PUNTOYCOMA
    (135) empty -> .

  ! shift/reduce conflict for VARIABLE resolved as shift
    VARIABLE        shift and go to state 94
    VAR             shift and go to state 17
    TIMESTIMES      shift and go to state 18
    AMPERSANT       shift and go to state 21
    ECHO            reduce using rule 135 (empty -> .)
    ALERT           reduce using rule 135 (empty -> .)
    LLAVE_IZQ       reduce using rule 135 (empty -> .)
    IF              reduce using rule 135 (empty -> .)
    SWITCH          reduce using rule 135 (empty -> .)
    CASE            reduce using rule 135 (empty -> .)
    DEFAULT         reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    DO              reduce using rule 135 (empty -> .)
    RETURN          reduce using rule 135 (empty -> .)
    CLASS           reduce using rule 135 (empty -> .)
    PRIVATE         reduce using rule 135 (empty -> .)
    PUBLIC          reduce using rule 135 (empty -> .)
    PROTECTED       reduce using rule 135 (empty -> .)
    PARENT_IZQ      reduce using rule 135 (empty -> .)
    NUMERO          reduce using rule 135 (empty -> .)
    IDVAR           reduce using rule 135 (empty -> .)
    TRUE            reduce using rule 135 (empty -> .)
    FALSE           reduce using rule 135 (empty -> .)
    LLAVE_DER       reduce using rule 135 (empty -> .)
    PUNTOYCOMA      reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)

  ! VARIABLE        [ reduce using rule 135 (empty -> .) ]

    echo_stmt                      shift and go to state 240
    var_declaration                shift and go to state 241
    empty                          shift and go to state 191

state 221

    (60) local_declarations -> empty .

    VARIABLE        reduce using rule 60 (local_declarations -> empty .)
    VAR             reduce using rule 60 (local_declarations -> empty .)
    TIMESTIMES      reduce using rule 60 (local_declarations -> empty .)
    AMPERSANT       reduce using rule 60 (local_declarations -> empty .)
    ECHO            reduce using rule 60 (local_declarations -> empty .)
    ALERT           reduce using rule 60 (local_declarations -> empty .)
    LLAVE_IZQ       reduce using rule 60 (local_declarations -> empty .)
    IF              reduce using rule 60 (local_declarations -> empty .)
    SWITCH          reduce using rule 60 (local_declarations -> empty .)
    CASE            reduce using rule 60 (local_declarations -> empty .)
    DEFAULT         reduce using rule 60 (local_declarations -> empty .)
    FOR             reduce using rule 60 (local_declarations -> empty .)
    WHILE           reduce using rule 60 (local_declarations -> empty .)
    DO              reduce using rule 60 (local_declarations -> empty .)
    RETURN          reduce using rule 60 (local_declarations -> empty .)
    CLASS           reduce using rule 60 (local_declarations -> empty .)
    PRIVATE         reduce using rule 60 (local_declarations -> empty .)
    PUBLIC          reduce using rule 60 (local_declarations -> empty .)
    PROTECTED       reduce using rule 60 (local_declarations -> empty .)
    PARENT_IZQ      reduce using rule 60 (local_declarations -> empty .)
    NUMERO          reduce using rule 60 (local_declarations -> empty .)
    IDVAR           reduce using rule 60 (local_declarations -> empty .)
    TRUE            reduce using rule 60 (local_declarations -> empty .)
    FALSE           reduce using rule 60 (local_declarations -> empty .)
    LLAVE_DER       reduce using rule 60 (local_declarations -> empty .)
    PUNTOYCOMA      reduce using rule 60 (local_declarations -> empty .)
    AND             reduce using rule 60 (local_declarations -> empty .)
    OR              reduce using rule 60 (local_declarations -> empty .)


state 222

    (88) return_stmt -> RETURN expression PUNTOYCOMA .

    BREAK           reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    PUNTOYCOMA      reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    ELSE            reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    ELSEIF          reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    VARIABLE        reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    VAR             reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    TIMESTIMES      reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    AMPERSANT       reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    FUNCTION        reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    PRIVATE         reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    PUBLIC          reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    PROTECTED       reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    REQUIRE         reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    INCLUDE         reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    CLASS           reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    IF              reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    SWITCH          reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    CASE            reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    DEFAULT         reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    FOR             reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    WHILE           reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    DO              reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    ALERT           reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    PARENT_IZQ      reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    NUMERO          reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    IDVAR           reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    TRUE            reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    FALSE           reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    ECHO            reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    $end            reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    LLAVE_DER       reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    LLAVE_IZQ       reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    RETURN          reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    AND             reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)
    OR              reduce using rule 88 (return_stmt -> RETURN expression PUNTOYCOMA .)


state 223

    (84) iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression . PUNTOYCOMA additive_expression PARENT_DER statement
    (92) expression -> expression . AND expression
    (93) expression -> expression . OR expression

    PUNTOYCOMA      shift and go to state 242
    AND             shift and go to state 111
    OR              shift and go to state 112


state 224

    (85) iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .

    VARIABLE        reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    VAR             reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    TIMESTIMES      reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    AMPERSANT       reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    FUNCTION        reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    PRIVATE         reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    PUBLIC          reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    PROTECTED       reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    REQUIRE         reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    INCLUDE         reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    CLASS           reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    IF              reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    SWITCH          reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    CASE            reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    DEFAULT         reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    FOR             reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    WHILE           reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    DO              reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    ALERT           reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    PARENT_IZQ      reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    NUMERO          reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    IDVAR           reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    TRUE            reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    FALSE           reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    ECHO            reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    $end            reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    BREAK           reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    PUNTOYCOMA      reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    ELSE            reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    ELSEIF          reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    LLAVE_DER       reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    LLAVE_IZQ       reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    RETURN          reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    AND             reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)
    OR              reduce using rule 85 (iteration_stmt -> WHILE PARENT_IZQ expression PARENT_DER statement .)


state 225

    (86) iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER . WHILE PARENT_IZQ expression PARENT_DER

    WHILE           shift and go to state 243


state 226

    (22) alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .

    VARIABLE        reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    VAR             reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    TIMESTIMES      reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    AMPERSANT       reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    FUNCTION        reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    PRIVATE         reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    PUBLIC          reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    PROTECTED       reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    REQUIRE         reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    INCLUDE         reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    CLASS           reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    IF              reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    SWITCH          reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    CASE            reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    DEFAULT         reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    FOR             reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    WHILE           reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    DO              reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    ALERT           reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    PARENT_IZQ      reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    NUMERO          reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    IDVAR           reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    TRUE            reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    FALSE           reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    ECHO            reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    $end            reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    PARENT_DER      reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    AND             reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    OR              reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    PUNTOYCOMA      reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    CORCHETE_DER    reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    COMA            reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    BREAK           reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    LLAVE_DER       reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    LLAVE_IZQ       reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    RETURN          reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    ELSE            reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)
    ELSEIF          reduce using rule 22 (alert_stmt -> ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA .)


state 227

    (26) class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .

    VARIABLE        reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    VAR             reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    TIMESTIMES      reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    AMPERSANT       reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    FUNCTION        reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    PRIVATE         reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    PUBLIC          reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    PROTECTED       reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    REQUIRE         reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    INCLUDE         reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    CLASS           reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    IF              reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    SWITCH          reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    CASE            reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    DEFAULT         reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    FOR             reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    WHILE           reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    DO              reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    ALERT           reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    PARENT_IZQ      reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    NUMERO          reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    IDVAR           reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    TRUE            reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    FALSE           reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    ECHO            reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    $end            reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    BREAK           reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    PUNTOYCOMA      reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    ELSE            reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    ELSEIF          reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    LLAVE_DER       reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    LLAVE_IZQ       reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    RETURN          reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    AND             reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)
    OR              reduce using rule 26 (class_declaration -> area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER .)


state 228

    (133) constructor -> VARIABLE PARENT_IZQ . PARENT_DER
    (134) constructor -> VARIABLE PARENT_IZQ . args PARENT_DER
    (125) args -> . args_list
    (126) args -> . empty
    (127) args -> . VOID
    (128) args_list -> . args_list COMA expression
    (129) args_list -> . expression
    (135) empty -> .
    (89) expression -> . VARIABLE relop NUMERO
    (90) expression -> . simple_expression
    (91) expression -> . VARIABLE IGUAL AMPERSANT VARIABLE
    (92) expression -> . expression AND expression
    (93) expression -> . expression OR expression
    (94) expression -> . additive_expression
    (95) expression -> . alert_stmt
    (98) simple_expression -> . additive_expression relop additive_expression
    (99) simple_expression -> . additive_expression
    (100) simple_expression -> . alert_stmt
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty
    (116) term -> . term mulop factor
    (117) term -> . factor
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

  ! shift/reduce conflict for PARENT_DER resolved as shift
    PARENT_DER      shift and go to state 244
    VOID            shift and go to state 129
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    COMA            reduce using rule 135 (empty -> .)
    VARIABLE        shift and go to state 67
    ALERT           shift and go to state 40
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

  ! PARENT_DER      [ reduce using rule 135 (empty -> .) ]

    args                           shift and go to state 245
    args_list                      shift and go to state 127
    empty                          shift and go to state 128
    expression                     shift and go to state 130
    simple_expression              shift and go to state 68
    additive_expression            shift and go to state 69
    alert_stmt                     shift and go to state 70
    term                           shift and go to state 15
    factor                         shift and go to state 41
    var                            shift and go to state 34
    boolean                        shift and go to state 20

state 229

    (132) typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .

    VARIABLE        reduce using rule 132 (typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .)
    VAR             reduce using rule 132 (typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .)
    TIMESTIMES      reduce using rule 132 (typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .)
    AMPERSANT       reduce using rule 132 (typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .)
    FUNCTION        reduce using rule 132 (typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .)
    PRIVATE         reduce using rule 132 (typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .)
    PUBLIC          reduce using rule 132 (typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .)
    PROTECTED       reduce using rule 132 (typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .)
    REQUIRE         reduce using rule 132 (typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .)
    INCLUDE         reduce using rule 132 (typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .)
    CLASS           reduce using rule 132 (typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .)
    IF              reduce using rule 132 (typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .)
    SWITCH          reduce using rule 132 (typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .)
    CASE            reduce using rule 132 (typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .)
    DEFAULT         reduce using rule 132 (typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .)
    FOR             reduce using rule 132 (typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .)
    WHILE           reduce using rule 132 (typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .)
    DO              reduce using rule 132 (typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .)
    ALERT           reduce using rule 132 (typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .)
    PARENT_IZQ      reduce using rule 132 (typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .)
    NUMERO          reduce using rule 132 (typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .)
    IDVAR           reduce using rule 132 (typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .)
    TRUE            reduce using rule 132 (typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .)
    FALSE           reduce using rule 132 (typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .)
    ECHO            reduce using rule 132 (typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .)
    $end            reduce using rule 132 (typeclass -> VARIABLE IDVAR IGUAL NEW constructor PUNTOYCOMA .)


state 230

    (47) var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .

    VARIABLE        reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    VAR             reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    TIMESTIMES      reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    AMPERSANT       reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    FUNCTION        reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    PRIVATE         reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    PUBLIC          reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    PROTECTED       reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    REQUIRE         reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    INCLUDE         reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    CLASS           reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    IF              reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    SWITCH          reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    CASE            reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    DEFAULT         reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    FOR             reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    WHILE           reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    DO              reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    ALERT           reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    PARENT_IZQ      reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    NUMERO          reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    IDVAR           reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    TRUE            reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    FALSE           reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    ECHO            reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    $end            reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    PUNTOYCOMA      reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    LLAVE_DER       reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    LLAVE_IZQ       reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    RETURN          reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    AND             reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)
    OR              reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE IGUAL VARIABLE PUNTOYCOMA selection_stmt .)


state 231

    (57) param -> VARIABLE CORCHETE_IZQ CORCHETE_DER . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 246


state 232

    (51) fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .

    VARIABLE        reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    VAR             reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    TIMESTIMES      reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    AMPERSANT       reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    FUNCTION        reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    PRIVATE         reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    PUBLIC          reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    PROTECTED       reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    REQUIRE         reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    INCLUDE         reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    CLASS           reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    IF              reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    SWITCH          reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    CASE            reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    DEFAULT         reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    FOR             reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    WHILE           reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    DO              reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    ALERT           reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    PARENT_IZQ      reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    NUMERO          reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    IDVAR           reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    TRUE            reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    FALSE           reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    ECHO            reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    $end            reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    PUNTOYCOMA      reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)
    LLAVE_DER       reduce using rule 51 (fun_declaration -> FUNCTION VARIABLE PARENT_IZQ params PARENT_DER compount_stmt .)


state 233

    (54) param_list -> param_list COMA param_list .
    (54) param_list -> param_list . COMA param_list

    COMA            reduce using rule 54 (param_list -> param_list COMA param_list .)
    PARENT_DER      reduce using rule 54 (param_list -> param_list COMA param_list .)

  ! COMA            [ shift and go to state 207 ]


state 234

    (28) attribute -> attribute area var_declaration .

    LLAVE_DER       reduce using rule 28 (attribute -> attribute area var_declaration .)
    PRIVATE         reduce using rule 28 (attribute -> attribute area var_declaration .)
    PUBLIC          reduce using rule 28 (attribute -> attribute area var_declaration .)
    PROTECTED       reduce using rule 28 (attribute -> attribute area var_declaration .)


state 235

    (30) attribute -> attribute area fun_declaration .

    LLAVE_DER       reduce using rule 30 (attribute -> attribute area fun_declaration .)
    PRIVATE         reduce using rule 30 (attribute -> attribute area fun_declaration .)
    PUBLIC          reduce using rule 30 (attribute -> attribute area fun_declaration .)
    PROTECTED       reduce using rule 30 (attribute -> attribute area fun_declaration .)


state 236

    (78) selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .

    VARIABLE        reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    VAR             reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    TIMESTIMES      reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    AMPERSANT       reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    FUNCTION        reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    PRIVATE         reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    PUBLIC          reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    PROTECTED       reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    REQUIRE         reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    INCLUDE         reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    CLASS           reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    IF              reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    SWITCH          reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    CASE            reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    DEFAULT         reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    FOR             reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    WHILE           reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    DO              reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    ALERT           reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    PARENT_IZQ      reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    NUMERO          reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    IDVAR           reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    TRUE            reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    FALSE           reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    ECHO            reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    $end            reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    BREAK           reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    PUNTOYCOMA      reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    ELSE            reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    ELSEIF          reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    LLAVE_DER       reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    LLAVE_IZQ       reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    RETURN          reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    AND             reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)
    OR              reduce using rule 78 (selection_stmt -> IF PARENT_IZQ expression PARENT_DER statement selection .)


state 237

    (79) selection -> ELSE . statement
    (64) statement -> . expression_stmt
    (65) statement -> . compount_stmt
    (66) statement -> . selection_stmt
    (67) statement -> . iteration_stmt
    (68) statement -> . return_stmt
    (69) statement -> . class_declaration
    (70) statement -> . echo_stmt
    (71) statement -> . expression
    (72) statement -> . additive_expression
    (73) statement -> . alert_stmt
    (74) expression_stmt -> . expression PUNTOYCOMA
    (75) expression_stmt -> . additive_expression
    (76) expression_stmt -> . alert_stmt
    (58) compount_stmt -> . LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER
    (77) selection_stmt -> . IF PARENT_IZQ expression PARENT_DER statement
    (78) selection_stmt -> . IF PARENT_IZQ expression PARENT_DER statement selection
    (81) selection_stmt -> . SWITCH PARENT_IZQ var PARENT_DER statement
    (82) selection_stmt -> . CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA
    (83) selection_stmt -> . DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA
    (84) iteration_stmt -> . FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement
    (85) iteration_stmt -> . WHILE PARENT_IZQ expression PARENT_DER statement
    (86) iteration_stmt -> . DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER
    (87) return_stmt -> . RETURN PUNTOYCOMA
    (88) return_stmt -> . RETURN expression PUNTOYCOMA
    (26) class_declaration -> . area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
    (27) class_declaration -> . CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
    (16) echo_stmt -> . echo_stmt ECHO STRING PUNTOYCOMA
    (17) echo_stmt -> . echo_stmt ECHO IDVAR PUNTOYCOMA
    (18) echo_stmt -> . empty
    (19) echo_stmt -> . echo_stmt ECHO NUMERO PUNTOYCOMA
    (20) echo_stmt -> . echo_stmt ECHO boolean PUNTOYCOMA
    (21) echo_stmt -> . echo_stmt ECHO fun_declaration PUNTOYCOMA
    (89) expression -> . VARIABLE relop NUMERO
    (90) expression -> . simple_expression
    (91) expression -> . VARIABLE IGUAL AMPERSANT VARIABLE
    (92) expression -> . expression AND expression
    (93) expression -> . expression OR expression
    (94) expression -> . additive_expression
    (95) expression -> . alert_stmt
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED
    (135) empty -> .
    (98) simple_expression -> . additive_expression relop additive_expression
    (99) simple_expression -> . additive_expression
    (100) simple_expression -> . alert_stmt
    (116) term -> . term mulop factor
    (117) term -> . factor
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ALERT resolved as shift
  ! shift/reduce conflict for LLAVE_IZQ resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PARENT_IZQ resolved as shift
  ! shift/reduce conflict for NUMERO resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LLAVE_IZQ       shift and go to state 145
    IF              shift and go to state 32
    SWITCH          shift and go to state 33
    CASE            shift and go to state 35
    DEFAULT         shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    DO              shift and go to state 39
    RETURN          shift and go to state 146
    CLASS           shift and go to state 29
    VARIABLE        shift and go to state 67
    ALERT           shift and go to state 40
    PRIVATE         shift and go to state 24
    PUBLIC          shift and go to state 25
    PROTECTED       shift and go to state 26
    ECHO            reduce using rule 135 (empty -> .)
    ELSE            reduce using rule 135 (empty -> .)
    ELSEIF          reduce using rule 135 (empty -> .)
    VAR             reduce using rule 135 (empty -> .)
    TIMESTIMES      reduce using rule 135 (empty -> .)
    AMPERSANT       reduce using rule 135 (empty -> .)
    FUNCTION        reduce using rule 135 (empty -> .)
    REQUIRE         reduce using rule 135 (empty -> .)
    INCLUDE         reduce using rule 135 (empty -> .)
    $end            reduce using rule 135 (empty -> .)
    BREAK           reduce using rule 135 (empty -> .)
    PUNTOYCOMA      reduce using rule 135 (empty -> .)
    LLAVE_DER       reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

  ! VARIABLE        [ reduce using rule 135 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 135 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 135 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 135 (empty -> .) ]
  ! CLASS           [ reduce using rule 135 (empty -> .) ]
  ! IF              [ reduce using rule 135 (empty -> .) ]
  ! SWITCH          [ reduce using rule 135 (empty -> .) ]
  ! CASE            [ reduce using rule 135 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 135 (empty -> .) ]
  ! FOR             [ reduce using rule 135 (empty -> .) ]
  ! WHILE           [ reduce using rule 135 (empty -> .) ]
  ! DO              [ reduce using rule 135 (empty -> .) ]
  ! ALERT           [ reduce using rule 135 (empty -> .) ]
  ! PARENT_IZQ      [ reduce using rule 135 (empty -> .) ]
  ! NUMERO          [ reduce using rule 135 (empty -> .) ]
  ! IDVAR           [ reduce using rule 135 (empty -> .) ]
  ! TRUE            [ reduce using rule 135 (empty -> .) ]
  ! FALSE           [ reduce using rule 135 (empty -> .) ]
  ! LLAVE_IZQ       [ reduce using rule 135 (empty -> .) ]
  ! RETURN          [ reduce using rule 135 (empty -> .) ]

    statement                      shift and go to state 247
    expression_stmt                shift and go to state 135
    compount_stmt                  shift and go to state 136
    selection_stmt                 shift and go to state 137
    iteration_stmt                 shift and go to state 138
    return_stmt                    shift and go to state 139
    class_declaration              shift and go to state 140
    echo_stmt                      shift and go to state 141
    expression                     shift and go to state 142
    additive_expression            shift and go to state 143
    alert_stmt                     shift and go to state 144
    var                            shift and go to state 34
    area                           shift and go to state 147
    empty                          shift and go to state 31
    boolean                        shift and go to state 20
    simple_expression              shift and go to state 68
    term                           shift and go to state 15
    factor                         shift and go to state 41

state 238

    (80) selection -> ELSEIF . statement selection
    (64) statement -> . expression_stmt
    (65) statement -> . compount_stmt
    (66) statement -> . selection_stmt
    (67) statement -> . iteration_stmt
    (68) statement -> . return_stmt
    (69) statement -> . class_declaration
    (70) statement -> . echo_stmt
    (71) statement -> . expression
    (72) statement -> . additive_expression
    (73) statement -> . alert_stmt
    (74) expression_stmt -> . expression PUNTOYCOMA
    (75) expression_stmt -> . additive_expression
    (76) expression_stmt -> . alert_stmt
    (58) compount_stmt -> . LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER
    (77) selection_stmt -> . IF PARENT_IZQ expression PARENT_DER statement
    (78) selection_stmt -> . IF PARENT_IZQ expression PARENT_DER statement selection
    (81) selection_stmt -> . SWITCH PARENT_IZQ var PARENT_DER statement
    (82) selection_stmt -> . CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA
    (83) selection_stmt -> . DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA
    (84) iteration_stmt -> . FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement
    (85) iteration_stmt -> . WHILE PARENT_IZQ expression PARENT_DER statement
    (86) iteration_stmt -> . DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER
    (87) return_stmt -> . RETURN PUNTOYCOMA
    (88) return_stmt -> . RETURN expression PUNTOYCOMA
    (26) class_declaration -> . area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
    (27) class_declaration -> . CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
    (16) echo_stmt -> . echo_stmt ECHO STRING PUNTOYCOMA
    (17) echo_stmt -> . echo_stmt ECHO IDVAR PUNTOYCOMA
    (18) echo_stmt -> . empty
    (19) echo_stmt -> . echo_stmt ECHO NUMERO PUNTOYCOMA
    (20) echo_stmt -> . echo_stmt ECHO boolean PUNTOYCOMA
    (21) echo_stmt -> . echo_stmt ECHO fun_declaration PUNTOYCOMA
    (89) expression -> . VARIABLE relop NUMERO
    (90) expression -> . simple_expression
    (91) expression -> . VARIABLE IGUAL AMPERSANT VARIABLE
    (92) expression -> . expression AND expression
    (93) expression -> . expression OR expression
    (94) expression -> . additive_expression
    (95) expression -> . alert_stmt
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED
    (135) empty -> .
    (98) simple_expression -> . additive_expression relop additive_expression
    (99) simple_expression -> . additive_expression
    (100) simple_expression -> . alert_stmt
    (116) term -> . term mulop factor
    (117) term -> . factor
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

    LLAVE_IZQ       shift and go to state 145
    IF              shift and go to state 32
    SWITCH          shift and go to state 33
    CASE            shift and go to state 35
    DEFAULT         shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    DO              shift and go to state 39
    RETURN          shift and go to state 146
    CLASS           shift and go to state 29
    VARIABLE        shift and go to state 67
    ALERT           shift and go to state 40
    PRIVATE         shift and go to state 24
    PUBLIC          shift and go to state 25
    PROTECTED       shift and go to state 26
    ECHO            reduce using rule 135 (empty -> .)
    ELSE            reduce using rule 135 (empty -> .)
    ELSEIF          reduce using rule 135 (empty -> .)
    PUNTOYCOMA      reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    statement                      shift and go to state 248
    expression_stmt                shift and go to state 135
    compount_stmt                  shift and go to state 136
    selection_stmt                 shift and go to state 137
    iteration_stmt                 shift and go to state 138
    return_stmt                    shift and go to state 139
    class_declaration              shift and go to state 140
    echo_stmt                      shift and go to state 141
    expression                     shift and go to state 142
    additive_expression            shift and go to state 143
    alert_stmt                     shift and go to state 144
    var                            shift and go to state 34
    area                           shift and go to state 147
    empty                          shift and go to state 31
    boolean                        shift and go to state 20
    simple_expression              shift and go to state 68
    term                           shift and go to state 15
    factor                         shift and go to state 41

state 239

    (82) selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .

    VARIABLE        reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    VAR             reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    TIMESTIMES      reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    AMPERSANT       reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    FUNCTION        reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    PRIVATE         reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    PUBLIC          reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    PROTECTED       reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    REQUIRE         reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    INCLUDE         reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    CLASS           reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    IF              reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    SWITCH          reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    CASE            reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    DEFAULT         reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    FOR             reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    WHILE           reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    DO              reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    ALERT           reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    PARENT_IZQ      reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    NUMERO          reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    IDVAR           reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    TRUE            reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    FALSE           reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    ECHO            reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    $end            reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    BREAK           reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    PUNTOYCOMA      reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    ELSE            reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    ELSEIF          reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    LLAVE_DER       reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    LLAVE_IZQ       reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    RETURN          reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    AND             reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)
    OR              reduce using rule 82 (selection_stmt -> CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA .)


state 240

    (58) compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt . statement_list echo_stmt LLAVE_DER
    (16) echo_stmt -> echo_stmt . ECHO STRING PUNTOYCOMA
    (17) echo_stmt -> echo_stmt . ECHO IDVAR PUNTOYCOMA
    (19) echo_stmt -> echo_stmt . ECHO NUMERO PUNTOYCOMA
    (20) echo_stmt -> echo_stmt . ECHO boolean PUNTOYCOMA
    (21) echo_stmt -> echo_stmt . ECHO fun_declaration PUNTOYCOMA
    (61) statement_list -> . statement_list statement
    (62) statement_list -> . empty
    (63) statement_list -> . alert_stmt
    (135) empty -> .
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty

  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for ALERT resolved as shift
    ECHO            shift and go to state 52
    LLAVE_IZQ       reduce using rule 135 (empty -> .)
    IF              reduce using rule 135 (empty -> .)
    SWITCH          reduce using rule 135 (empty -> .)
    CASE            reduce using rule 135 (empty -> .)
    DEFAULT         reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    DO              reduce using rule 135 (empty -> .)
    RETURN          reduce using rule 135 (empty -> .)
    CLASS           reduce using rule 135 (empty -> .)
    VARIABLE        reduce using rule 135 (empty -> .)
    PRIVATE         reduce using rule 135 (empty -> .)
    PUBLIC          reduce using rule 135 (empty -> .)
    PROTECTED       reduce using rule 135 (empty -> .)
    PARENT_IZQ      reduce using rule 135 (empty -> .)
    NUMERO          reduce using rule 135 (empty -> .)
    IDVAR           reduce using rule 135 (empty -> .)
    TRUE            reduce using rule 135 (empty -> .)
    FALSE           reduce using rule 135 (empty -> .)
    LLAVE_DER       reduce using rule 135 (empty -> .)
    PUNTOYCOMA      reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    ALERT           shift and go to state 40

  ! ALERT           [ reduce using rule 135 (empty -> .) ]
  ! ECHO            [ reduce using rule 135 (empty -> .) ]

    statement_list                 shift and go to state 249
    empty                          shift and go to state 250
    alert_stmt                     shift and go to state 251

state 241

    (59) local_declarations -> local_declarations var_declaration .

    VARIABLE        reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    VAR             reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    TIMESTIMES      reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    AMPERSANT       reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    ECHO            reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    ALERT           reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    LLAVE_IZQ       reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    IF              reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    SWITCH          reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    CASE            reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    DEFAULT         reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    FOR             reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    WHILE           reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    DO              reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    RETURN          reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    CLASS           reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    PRIVATE         reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    PUBLIC          reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    PROTECTED       reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    PARENT_IZQ      reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    NUMERO          reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    IDVAR           reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    TRUE            reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    FALSE           reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    LLAVE_DER       reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    PUNTOYCOMA      reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    AND             reduce using rule 59 (local_declarations -> local_declarations var_declaration .)
    OR              reduce using rule 59 (local_declarations -> local_declarations var_declaration .)


state 242

    (84) iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA . additive_expression PARENT_DER statement
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (116) term -> . term mulop factor
    (117) term -> . factor
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

    VARIABLE        shift and go to state 164
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    additive_expression            shift and go to state 252
    term                           shift and go to state 15
    factor                         shift and go to state 41
    var                            shift and go to state 34
    boolean                        shift and go to state 20

state 243

    (86) iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE . PARENT_IZQ expression PARENT_DER

    PARENT_IZQ      shift and go to state 253


state 244

    (133) constructor -> VARIABLE PARENT_IZQ PARENT_DER .

    PUNTOYCOMA      reduce using rule 133 (constructor -> VARIABLE PARENT_IZQ PARENT_DER .)


state 245

    (134) constructor -> VARIABLE PARENT_IZQ args . PARENT_DER

    PARENT_DER      shift and go to state 254


state 246

    (57) param -> VARIABLE CORCHETE_IZQ CORCHETE_DER PUNTOYCOMA .

    COMA            reduce using rule 57 (param -> VARIABLE CORCHETE_IZQ CORCHETE_DER PUNTOYCOMA .)
    PARENT_DER      reduce using rule 57 (param -> VARIABLE CORCHETE_IZQ CORCHETE_DER PUNTOYCOMA .)


state 247

    (79) selection -> ELSE statement .

    ELSE            reduce using rule 79 (selection -> ELSE statement .)
    ELSEIF          reduce using rule 79 (selection -> ELSE statement .)
    VARIABLE        reduce using rule 79 (selection -> ELSE statement .)
    VAR             reduce using rule 79 (selection -> ELSE statement .)
    TIMESTIMES      reduce using rule 79 (selection -> ELSE statement .)
    AMPERSANT       reduce using rule 79 (selection -> ELSE statement .)
    FUNCTION        reduce using rule 79 (selection -> ELSE statement .)
    PRIVATE         reduce using rule 79 (selection -> ELSE statement .)
    PUBLIC          reduce using rule 79 (selection -> ELSE statement .)
    PROTECTED       reduce using rule 79 (selection -> ELSE statement .)
    REQUIRE         reduce using rule 79 (selection -> ELSE statement .)
    INCLUDE         reduce using rule 79 (selection -> ELSE statement .)
    CLASS           reduce using rule 79 (selection -> ELSE statement .)
    IF              reduce using rule 79 (selection -> ELSE statement .)
    SWITCH          reduce using rule 79 (selection -> ELSE statement .)
    CASE            reduce using rule 79 (selection -> ELSE statement .)
    DEFAULT         reduce using rule 79 (selection -> ELSE statement .)
    FOR             reduce using rule 79 (selection -> ELSE statement .)
    WHILE           reduce using rule 79 (selection -> ELSE statement .)
    DO              reduce using rule 79 (selection -> ELSE statement .)
    ALERT           reduce using rule 79 (selection -> ELSE statement .)
    PARENT_IZQ      reduce using rule 79 (selection -> ELSE statement .)
    NUMERO          reduce using rule 79 (selection -> ELSE statement .)
    IDVAR           reduce using rule 79 (selection -> ELSE statement .)
    TRUE            reduce using rule 79 (selection -> ELSE statement .)
    FALSE           reduce using rule 79 (selection -> ELSE statement .)
    ECHO            reduce using rule 79 (selection -> ELSE statement .)
    $end            reduce using rule 79 (selection -> ELSE statement .)
    BREAK           reduce using rule 79 (selection -> ELSE statement .)
    PUNTOYCOMA      reduce using rule 79 (selection -> ELSE statement .)
    LLAVE_DER       reduce using rule 79 (selection -> ELSE statement .)
    LLAVE_IZQ       reduce using rule 79 (selection -> ELSE statement .)
    RETURN          reduce using rule 79 (selection -> ELSE statement .)
    AND             reduce using rule 79 (selection -> ELSE statement .)
    OR              reduce using rule 79 (selection -> ELSE statement .)


state 248

    (80) selection -> ELSEIF statement . selection
    (79) selection -> . ELSE statement
    (80) selection -> . ELSEIF statement selection

    ELSE            shift and go to state 237
    ELSEIF          shift and go to state 238

    selection                      shift and go to state 255

state 249

    (58) compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list . echo_stmt LLAVE_DER
    (61) statement_list -> statement_list . statement
    (16) echo_stmt -> . echo_stmt ECHO STRING PUNTOYCOMA
    (17) echo_stmt -> . echo_stmt ECHO IDVAR PUNTOYCOMA
    (18) echo_stmt -> . empty
    (19) echo_stmt -> . echo_stmt ECHO NUMERO PUNTOYCOMA
    (20) echo_stmt -> . echo_stmt ECHO boolean PUNTOYCOMA
    (21) echo_stmt -> . echo_stmt ECHO fun_declaration PUNTOYCOMA
    (64) statement -> . expression_stmt
    (65) statement -> . compount_stmt
    (66) statement -> . selection_stmt
    (67) statement -> . iteration_stmt
    (68) statement -> . return_stmt
    (69) statement -> . class_declaration
    (70) statement -> . echo_stmt
    (71) statement -> . expression
    (72) statement -> . additive_expression
    (73) statement -> . alert_stmt
    (135) empty -> .
    (74) expression_stmt -> . expression PUNTOYCOMA
    (75) expression_stmt -> . additive_expression
    (76) expression_stmt -> . alert_stmt
    (58) compount_stmt -> . LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER
    (77) selection_stmt -> . IF PARENT_IZQ expression PARENT_DER statement
    (78) selection_stmt -> . IF PARENT_IZQ expression PARENT_DER statement selection
    (81) selection_stmt -> . SWITCH PARENT_IZQ var PARENT_DER statement
    (82) selection_stmt -> . CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA
    (83) selection_stmt -> . DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA
    (84) iteration_stmt -> . FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement
    (85) iteration_stmt -> . WHILE PARENT_IZQ expression PARENT_DER statement
    (86) iteration_stmt -> . DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER
    (87) return_stmt -> . RETURN PUNTOYCOMA
    (88) return_stmt -> . RETURN expression PUNTOYCOMA
    (26) class_declaration -> . area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
    (27) class_declaration -> . CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
    (89) expression -> . VARIABLE relop NUMERO
    (90) expression -> . simple_expression
    (91) expression -> . VARIABLE IGUAL AMPERSANT VARIABLE
    (92) expression -> . expression AND expression
    (93) expression -> . expression OR expression
    (94) expression -> . additive_expression
    (95) expression -> . alert_stmt
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED
    (98) simple_expression -> . additive_expression relop additive_expression
    (99) simple_expression -> . additive_expression
    (100) simple_expression -> . alert_stmt
    (116) term -> . term mulop factor
    (117) term -> . factor
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

  ! shift/reduce conflict for LLAVE_IZQ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for ALERT resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PARENT_IZQ resolved as shift
  ! shift/reduce conflict for NUMERO resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LLAVE_DER       reduce using rule 135 (empty -> .)
    ECHO            reduce using rule 135 (empty -> .)
    PUNTOYCOMA      reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    LLAVE_IZQ       shift and go to state 145
    IF              shift and go to state 32
    SWITCH          shift and go to state 33
    CASE            shift and go to state 35
    DEFAULT         shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    DO              shift and go to state 39
    RETURN          shift and go to state 146
    CLASS           shift and go to state 29
    VARIABLE        shift and go to state 67
    ALERT           shift and go to state 40
    PRIVATE         shift and go to state 24
    PUBLIC          shift and go to state 25
    PROTECTED       shift and go to state 26
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

  ! LLAVE_IZQ       [ reduce using rule 135 (empty -> .) ]
  ! IF              [ reduce using rule 135 (empty -> .) ]
  ! SWITCH          [ reduce using rule 135 (empty -> .) ]
  ! CASE            [ reduce using rule 135 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 135 (empty -> .) ]
  ! FOR             [ reduce using rule 135 (empty -> .) ]
  ! WHILE           [ reduce using rule 135 (empty -> .) ]
  ! DO              [ reduce using rule 135 (empty -> .) ]
  ! RETURN          [ reduce using rule 135 (empty -> .) ]
  ! CLASS           [ reduce using rule 135 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 135 (empty -> .) ]
  ! ALERT           [ reduce using rule 135 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 135 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 135 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 135 (empty -> .) ]
  ! PARENT_IZQ      [ reduce using rule 135 (empty -> .) ]
  ! NUMERO          [ reduce using rule 135 (empty -> .) ]
  ! IDVAR           [ reduce using rule 135 (empty -> .) ]
  ! TRUE            [ reduce using rule 135 (empty -> .) ]
  ! FALSE           [ reduce using rule 135 (empty -> .) ]

    echo_stmt                      shift and go to state 256
    statement                      shift and go to state 257
    empty                          shift and go to state 31
    boolean                        shift and go to state 20
    expression_stmt                shift and go to state 135
    compount_stmt                  shift and go to state 136
    selection_stmt                 shift and go to state 137
    iteration_stmt                 shift and go to state 138
    return_stmt                    shift and go to state 139
    class_declaration              shift and go to state 140
    expression                     shift and go to state 142
    additive_expression            shift and go to state 143
    alert_stmt                     shift and go to state 144
    var                            shift and go to state 34
    area                           shift and go to state 147
    simple_expression              shift and go to state 68
    term                           shift and go to state 15
    factor                         shift and go to state 41

state 250

    (62) statement_list -> empty .
    (23) alert_stmt -> empty .

  ! reduce/reduce conflict for LLAVE_IZQ resolved using rule 23 (alert_stmt -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 23 (alert_stmt -> empty .)
  ! reduce/reduce conflict for SWITCH resolved using rule 23 (alert_stmt -> empty .)
  ! reduce/reduce conflict for CASE resolved using rule 23 (alert_stmt -> empty .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 23 (alert_stmt -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 23 (alert_stmt -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 23 (alert_stmt -> empty .)
  ! reduce/reduce conflict for DO resolved using rule 23 (alert_stmt -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 23 (alert_stmt -> empty .)
  ! reduce/reduce conflict for CLASS resolved using rule 23 (alert_stmt -> empty .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 23 (alert_stmt -> empty .)
  ! reduce/reduce conflict for ALERT resolved using rule 23 (alert_stmt -> empty .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 23 (alert_stmt -> empty .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 23 (alert_stmt -> empty .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 23 (alert_stmt -> empty .)
  ! reduce/reduce conflict for PARENT_IZQ resolved using rule 23 (alert_stmt -> empty .)
  ! reduce/reduce conflict for NUMERO resolved using rule 23 (alert_stmt -> empty .)
  ! reduce/reduce conflict for IDVAR resolved using rule 23 (alert_stmt -> empty .)
  ! reduce/reduce conflict for TRUE resolved using rule 23 (alert_stmt -> empty .)
  ! reduce/reduce conflict for FALSE resolved using rule 23 (alert_stmt -> empty .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 23 (alert_stmt -> empty .)
  ! reduce/reduce conflict for ECHO resolved using rule 23 (alert_stmt -> empty .)
  ! reduce/reduce conflict for PUNTOYCOMA resolved using rule 23 (alert_stmt -> empty .)
  ! reduce/reduce conflict for AND resolved using rule 23 (alert_stmt -> empty .)
  ! reduce/reduce conflict for OR resolved using rule 23 (alert_stmt -> empty .)
    LLAVE_IZQ       reduce using rule 23 (alert_stmt -> empty .)
    IF              reduce using rule 23 (alert_stmt -> empty .)
    SWITCH          reduce using rule 23 (alert_stmt -> empty .)
    CASE            reduce using rule 23 (alert_stmt -> empty .)
    DEFAULT         reduce using rule 23 (alert_stmt -> empty .)
    FOR             reduce using rule 23 (alert_stmt -> empty .)
    WHILE           reduce using rule 23 (alert_stmt -> empty .)
    DO              reduce using rule 23 (alert_stmt -> empty .)
    RETURN          reduce using rule 23 (alert_stmt -> empty .)
    CLASS           reduce using rule 23 (alert_stmt -> empty .)
    VARIABLE        reduce using rule 23 (alert_stmt -> empty .)
    ALERT           reduce using rule 23 (alert_stmt -> empty .)
    PRIVATE         reduce using rule 23 (alert_stmt -> empty .)
    PUBLIC          reduce using rule 23 (alert_stmt -> empty .)
    PROTECTED       reduce using rule 23 (alert_stmt -> empty .)
    PARENT_IZQ      reduce using rule 23 (alert_stmt -> empty .)
    NUMERO          reduce using rule 23 (alert_stmt -> empty .)
    IDVAR           reduce using rule 23 (alert_stmt -> empty .)
    TRUE            reduce using rule 23 (alert_stmt -> empty .)
    FALSE           reduce using rule 23 (alert_stmt -> empty .)
    LLAVE_DER       reduce using rule 23 (alert_stmt -> empty .)
    ECHO            reduce using rule 23 (alert_stmt -> empty .)
    PUNTOYCOMA      reduce using rule 23 (alert_stmt -> empty .)
    AND             reduce using rule 23 (alert_stmt -> empty .)
    OR              reduce using rule 23 (alert_stmt -> empty .)

  ! LLAVE_IZQ       [ reduce using rule 62 (statement_list -> empty .) ]
  ! IF              [ reduce using rule 62 (statement_list -> empty .) ]
  ! SWITCH          [ reduce using rule 62 (statement_list -> empty .) ]
  ! CASE            [ reduce using rule 62 (statement_list -> empty .) ]
  ! DEFAULT         [ reduce using rule 62 (statement_list -> empty .) ]
  ! FOR             [ reduce using rule 62 (statement_list -> empty .) ]
  ! WHILE           [ reduce using rule 62 (statement_list -> empty .) ]
  ! DO              [ reduce using rule 62 (statement_list -> empty .) ]
  ! RETURN          [ reduce using rule 62 (statement_list -> empty .) ]
  ! CLASS           [ reduce using rule 62 (statement_list -> empty .) ]
  ! VARIABLE        [ reduce using rule 62 (statement_list -> empty .) ]
  ! ALERT           [ reduce using rule 62 (statement_list -> empty .) ]
  ! PRIVATE         [ reduce using rule 62 (statement_list -> empty .) ]
  ! PUBLIC          [ reduce using rule 62 (statement_list -> empty .) ]
  ! PROTECTED       [ reduce using rule 62 (statement_list -> empty .) ]
  ! PARENT_IZQ      [ reduce using rule 62 (statement_list -> empty .) ]
  ! NUMERO          [ reduce using rule 62 (statement_list -> empty .) ]
  ! IDVAR           [ reduce using rule 62 (statement_list -> empty .) ]
  ! TRUE            [ reduce using rule 62 (statement_list -> empty .) ]
  ! FALSE           [ reduce using rule 62 (statement_list -> empty .) ]
  ! LLAVE_DER       [ reduce using rule 62 (statement_list -> empty .) ]
  ! ECHO            [ reduce using rule 62 (statement_list -> empty .) ]
  ! PUNTOYCOMA      [ reduce using rule 62 (statement_list -> empty .) ]
  ! AND             [ reduce using rule 62 (statement_list -> empty .) ]
  ! OR              [ reduce using rule 62 (statement_list -> empty .) ]


state 251

    (63) statement_list -> alert_stmt .

    LLAVE_IZQ       reduce using rule 63 (statement_list -> alert_stmt .)
    IF              reduce using rule 63 (statement_list -> alert_stmt .)
    SWITCH          reduce using rule 63 (statement_list -> alert_stmt .)
    CASE            reduce using rule 63 (statement_list -> alert_stmt .)
    DEFAULT         reduce using rule 63 (statement_list -> alert_stmt .)
    FOR             reduce using rule 63 (statement_list -> alert_stmt .)
    WHILE           reduce using rule 63 (statement_list -> alert_stmt .)
    DO              reduce using rule 63 (statement_list -> alert_stmt .)
    RETURN          reduce using rule 63 (statement_list -> alert_stmt .)
    CLASS           reduce using rule 63 (statement_list -> alert_stmt .)
    VARIABLE        reduce using rule 63 (statement_list -> alert_stmt .)
    ALERT           reduce using rule 63 (statement_list -> alert_stmt .)
    PRIVATE         reduce using rule 63 (statement_list -> alert_stmt .)
    PUBLIC          reduce using rule 63 (statement_list -> alert_stmt .)
    PROTECTED       reduce using rule 63 (statement_list -> alert_stmt .)
    PARENT_IZQ      reduce using rule 63 (statement_list -> alert_stmt .)
    NUMERO          reduce using rule 63 (statement_list -> alert_stmt .)
    IDVAR           reduce using rule 63 (statement_list -> alert_stmt .)
    TRUE            reduce using rule 63 (statement_list -> alert_stmt .)
    FALSE           reduce using rule 63 (statement_list -> alert_stmt .)
    LLAVE_DER       reduce using rule 63 (statement_list -> alert_stmt .)
    ECHO            reduce using rule 63 (statement_list -> alert_stmt .)
    PUNTOYCOMA      reduce using rule 63 (statement_list -> alert_stmt .)
    AND             reduce using rule 63 (statement_list -> alert_stmt .)
    OR              reduce using rule 63 (statement_list -> alert_stmt .)


state 252

    (84) iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression . PARENT_DER statement
    (108) additive_expression -> additive_expression . addop term
    (114) addop -> . SUMA
    (115) addop -> . RESTA

    PARENT_DER      shift and go to state 258
    SUMA            shift and go to state 48
    RESTA           shift and go to state 49

    addop                          shift and go to state 47

state 253

    (86) iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ . expression PARENT_DER
    (89) expression -> . VARIABLE relop NUMERO
    (90) expression -> . simple_expression
    (91) expression -> . VARIABLE IGUAL AMPERSANT VARIABLE
    (92) expression -> . expression AND expression
    (93) expression -> . expression OR expression
    (94) expression -> . additive_expression
    (95) expression -> . alert_stmt
    (98) simple_expression -> . additive_expression relop additive_expression
    (99) simple_expression -> . additive_expression
    (100) simple_expression -> . alert_stmt
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty
    (116) term -> . term mulop factor
    (117) term -> . factor
    (135) empty -> .
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

    VARIABLE        shift and go to state 67
    ALERT           shift and go to state 40
    PARENT_DER      reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    expression                     shift and go to state 259
    simple_expression              shift and go to state 68
    additive_expression            shift and go to state 69
    alert_stmt                     shift and go to state 70
    term                           shift and go to state 15
    empty                          shift and go to state 71
    factor                         shift and go to state 41
    var                            shift and go to state 34
    boolean                        shift and go to state 20

state 254

    (134) constructor -> VARIABLE PARENT_IZQ args PARENT_DER .

    PUNTOYCOMA      reduce using rule 134 (constructor -> VARIABLE PARENT_IZQ args PARENT_DER .)


state 255

    (80) selection -> ELSEIF statement selection .

    ELSE            reduce using rule 80 (selection -> ELSEIF statement selection .)
    ELSEIF          reduce using rule 80 (selection -> ELSEIF statement selection .)
    VARIABLE        reduce using rule 80 (selection -> ELSEIF statement selection .)
    VAR             reduce using rule 80 (selection -> ELSEIF statement selection .)
    TIMESTIMES      reduce using rule 80 (selection -> ELSEIF statement selection .)
    AMPERSANT       reduce using rule 80 (selection -> ELSEIF statement selection .)
    FUNCTION        reduce using rule 80 (selection -> ELSEIF statement selection .)
    PRIVATE         reduce using rule 80 (selection -> ELSEIF statement selection .)
    PUBLIC          reduce using rule 80 (selection -> ELSEIF statement selection .)
    PROTECTED       reduce using rule 80 (selection -> ELSEIF statement selection .)
    REQUIRE         reduce using rule 80 (selection -> ELSEIF statement selection .)
    INCLUDE         reduce using rule 80 (selection -> ELSEIF statement selection .)
    CLASS           reduce using rule 80 (selection -> ELSEIF statement selection .)
    IF              reduce using rule 80 (selection -> ELSEIF statement selection .)
    SWITCH          reduce using rule 80 (selection -> ELSEIF statement selection .)
    CASE            reduce using rule 80 (selection -> ELSEIF statement selection .)
    DEFAULT         reduce using rule 80 (selection -> ELSEIF statement selection .)
    FOR             reduce using rule 80 (selection -> ELSEIF statement selection .)
    WHILE           reduce using rule 80 (selection -> ELSEIF statement selection .)
    DO              reduce using rule 80 (selection -> ELSEIF statement selection .)
    ALERT           reduce using rule 80 (selection -> ELSEIF statement selection .)
    PARENT_IZQ      reduce using rule 80 (selection -> ELSEIF statement selection .)
    NUMERO          reduce using rule 80 (selection -> ELSEIF statement selection .)
    IDVAR           reduce using rule 80 (selection -> ELSEIF statement selection .)
    TRUE            reduce using rule 80 (selection -> ELSEIF statement selection .)
    FALSE           reduce using rule 80 (selection -> ELSEIF statement selection .)
    ECHO            reduce using rule 80 (selection -> ELSEIF statement selection .)
    $end            reduce using rule 80 (selection -> ELSEIF statement selection .)
    BREAK           reduce using rule 80 (selection -> ELSEIF statement selection .)
    PUNTOYCOMA      reduce using rule 80 (selection -> ELSEIF statement selection .)
    LLAVE_DER       reduce using rule 80 (selection -> ELSEIF statement selection .)
    LLAVE_IZQ       reduce using rule 80 (selection -> ELSEIF statement selection .)
    RETURN          reduce using rule 80 (selection -> ELSEIF statement selection .)
    AND             reduce using rule 80 (selection -> ELSEIF statement selection .)
    OR              reduce using rule 80 (selection -> ELSEIF statement selection .)


state 256

    (58) compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt . LLAVE_DER
    (16) echo_stmt -> echo_stmt . ECHO STRING PUNTOYCOMA
    (17) echo_stmt -> echo_stmt . ECHO IDVAR PUNTOYCOMA
    (19) echo_stmt -> echo_stmt . ECHO NUMERO PUNTOYCOMA
    (20) echo_stmt -> echo_stmt . ECHO boolean PUNTOYCOMA
    (21) echo_stmt -> echo_stmt . ECHO fun_declaration PUNTOYCOMA
    (70) statement -> echo_stmt .

  ! shift/reduce conflict for LLAVE_DER resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
    LLAVE_DER       shift and go to state 260
    ECHO            shift and go to state 52
    LLAVE_IZQ       reduce using rule 70 (statement -> echo_stmt .)
    IF              reduce using rule 70 (statement -> echo_stmt .)
    SWITCH          reduce using rule 70 (statement -> echo_stmt .)
    CASE            reduce using rule 70 (statement -> echo_stmt .)
    DEFAULT         reduce using rule 70 (statement -> echo_stmt .)
    FOR             reduce using rule 70 (statement -> echo_stmt .)
    WHILE           reduce using rule 70 (statement -> echo_stmt .)
    DO              reduce using rule 70 (statement -> echo_stmt .)
    RETURN          reduce using rule 70 (statement -> echo_stmt .)
    CLASS           reduce using rule 70 (statement -> echo_stmt .)
    VARIABLE        reduce using rule 70 (statement -> echo_stmt .)
    ALERT           reduce using rule 70 (statement -> echo_stmt .)
    PRIVATE         reduce using rule 70 (statement -> echo_stmt .)
    PUBLIC          reduce using rule 70 (statement -> echo_stmt .)
    PROTECTED       reduce using rule 70 (statement -> echo_stmt .)
    PARENT_IZQ      reduce using rule 70 (statement -> echo_stmt .)
    NUMERO          reduce using rule 70 (statement -> echo_stmt .)
    IDVAR           reduce using rule 70 (statement -> echo_stmt .)
    TRUE            reduce using rule 70 (statement -> echo_stmt .)
    FALSE           reduce using rule 70 (statement -> echo_stmt .)
    PUNTOYCOMA      reduce using rule 70 (statement -> echo_stmt .)
    AND             reduce using rule 70 (statement -> echo_stmt .)
    OR              reduce using rule 70 (statement -> echo_stmt .)

  ! LLAVE_DER       [ reduce using rule 70 (statement -> echo_stmt .) ]
  ! ECHO            [ reduce using rule 70 (statement -> echo_stmt .) ]


state 257

    (61) statement_list -> statement_list statement .

    LLAVE_IZQ       reduce using rule 61 (statement_list -> statement_list statement .)
    IF              reduce using rule 61 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 61 (statement_list -> statement_list statement .)
    CASE            reduce using rule 61 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 61 (statement_list -> statement_list statement .)
    FOR             reduce using rule 61 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 61 (statement_list -> statement_list statement .)
    DO              reduce using rule 61 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 61 (statement_list -> statement_list statement .)
    CLASS           reduce using rule 61 (statement_list -> statement_list statement .)
    VARIABLE        reduce using rule 61 (statement_list -> statement_list statement .)
    ALERT           reduce using rule 61 (statement_list -> statement_list statement .)
    PRIVATE         reduce using rule 61 (statement_list -> statement_list statement .)
    PUBLIC          reduce using rule 61 (statement_list -> statement_list statement .)
    PROTECTED       reduce using rule 61 (statement_list -> statement_list statement .)
    PARENT_IZQ      reduce using rule 61 (statement_list -> statement_list statement .)
    NUMERO          reduce using rule 61 (statement_list -> statement_list statement .)
    IDVAR           reduce using rule 61 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 61 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 61 (statement_list -> statement_list statement .)
    LLAVE_DER       reduce using rule 61 (statement_list -> statement_list statement .)
    ECHO            reduce using rule 61 (statement_list -> statement_list statement .)
    PUNTOYCOMA      reduce using rule 61 (statement_list -> statement_list statement .)
    AND             reduce using rule 61 (statement_list -> statement_list statement .)
    OR              reduce using rule 61 (statement_list -> statement_list statement .)


state 258

    (84) iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER . statement
    (64) statement -> . expression_stmt
    (65) statement -> . compount_stmt
    (66) statement -> . selection_stmt
    (67) statement -> . iteration_stmt
    (68) statement -> . return_stmt
    (69) statement -> . class_declaration
    (70) statement -> . echo_stmt
    (71) statement -> . expression
    (72) statement -> . additive_expression
    (73) statement -> . alert_stmt
    (74) expression_stmt -> . expression PUNTOYCOMA
    (75) expression_stmt -> . additive_expression
    (76) expression_stmt -> . alert_stmt
    (58) compount_stmt -> . LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER
    (77) selection_stmt -> . IF PARENT_IZQ expression PARENT_DER statement
    (78) selection_stmt -> . IF PARENT_IZQ expression PARENT_DER statement selection
    (81) selection_stmt -> . SWITCH PARENT_IZQ var PARENT_DER statement
    (82) selection_stmt -> . CASE NUMERO DOS_PUNTOS statement BREAK PUNTOYCOMA
    (83) selection_stmt -> . DEFAULT DOS_PUNTOS statement BREAK PUNTOYCOMA
    (84) iteration_stmt -> . FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement
    (85) iteration_stmt -> . WHILE PARENT_IZQ expression PARENT_DER statement
    (86) iteration_stmt -> . DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER
    (87) return_stmt -> . RETURN PUNTOYCOMA
    (88) return_stmt -> . RETURN expression PUNTOYCOMA
    (26) class_declaration -> . area CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
    (27) class_declaration -> . CLASS VARIABLE LLAVE_IZQ attribute LLAVE_DER
    (16) echo_stmt -> . echo_stmt ECHO STRING PUNTOYCOMA
    (17) echo_stmt -> . echo_stmt ECHO IDVAR PUNTOYCOMA
    (18) echo_stmt -> . empty
    (19) echo_stmt -> . echo_stmt ECHO NUMERO PUNTOYCOMA
    (20) echo_stmt -> . echo_stmt ECHO boolean PUNTOYCOMA
    (21) echo_stmt -> . echo_stmt ECHO fun_declaration PUNTOYCOMA
    (89) expression -> . VARIABLE relop NUMERO
    (90) expression -> . simple_expression
    (91) expression -> . VARIABLE IGUAL AMPERSANT VARIABLE
    (92) expression -> . expression AND expression
    (93) expression -> . expression OR expression
    (94) expression -> . additive_expression
    (95) expression -> . alert_stmt
    (108) additive_expression -> . additive_expression addop term
    (109) additive_expression -> . term
    (110) additive_expression -> . VARIABLE DECREMENTO PUNTOYCOMA
    (111) additive_expression -> . VARIABLE INCREMENTO PUNTOYCOMA
    (112) additive_expression -> . VARIABLE DECREMENTO
    (113) additive_expression -> . VARIABLE INCREMENTO
    (22) alert_stmt -> . ALERT PARENT_IZQ STRING PARENT_DER PUNTOYCOMA
    (23) alert_stmt -> . empty
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED
    (135) empty -> .
    (98) simple_expression -> . additive_expression relop additive_expression
    (99) simple_expression -> . additive_expression
    (100) simple_expression -> . alert_stmt
    (116) term -> . term mulop factor
    (117) term -> . factor
    (120) factor -> . PARENT_IZQ expression PARENT_DER
    (121) factor -> . var
    (122) factor -> . NUMERO
    (123) factor -> . boolean
    (124) factor -> . IDVAR PARENT_IZQ args PARENT_DER
    (96) var -> . VARIABLE
    (97) var -> . VARIABLE CORCHETE_IZQ expression CORCHETE_DER
    (130) boolean -> . TRUE
    (131) boolean -> . FALSE

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ALERT resolved as shift
  ! shift/reduce conflict for LLAVE_IZQ resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PARENT_IZQ resolved as shift
  ! shift/reduce conflict for NUMERO resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LLAVE_IZQ       shift and go to state 145
    IF              shift and go to state 32
    SWITCH          shift and go to state 33
    CASE            shift and go to state 35
    DEFAULT         shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    DO              shift and go to state 39
    RETURN          shift and go to state 146
    CLASS           shift and go to state 29
    VARIABLE        shift and go to state 67
    ALERT           shift and go to state 40
    PRIVATE         shift and go to state 24
    PUBLIC          shift and go to state 25
    PROTECTED       shift and go to state 26
    ECHO            reduce using rule 135 (empty -> .)
    ELSE            reduce using rule 135 (empty -> .)
    ELSEIF          reduce using rule 135 (empty -> .)
    VAR             reduce using rule 135 (empty -> .)
    TIMESTIMES      reduce using rule 135 (empty -> .)
    AMPERSANT       reduce using rule 135 (empty -> .)
    FUNCTION        reduce using rule 135 (empty -> .)
    REQUIRE         reduce using rule 135 (empty -> .)
    INCLUDE         reduce using rule 135 (empty -> .)
    $end            reduce using rule 135 (empty -> .)
    BREAK           reduce using rule 135 (empty -> .)
    PUNTOYCOMA      reduce using rule 135 (empty -> .)
    LLAVE_DER       reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    PARENT_IZQ      shift and go to state 23
    NUMERO          shift and go to state 19
    IDVAR           shift and go to state 30
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

  ! VARIABLE        [ reduce using rule 135 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 135 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 135 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 135 (empty -> .) ]
  ! CLASS           [ reduce using rule 135 (empty -> .) ]
  ! IF              [ reduce using rule 135 (empty -> .) ]
  ! SWITCH          [ reduce using rule 135 (empty -> .) ]
  ! CASE            [ reduce using rule 135 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 135 (empty -> .) ]
  ! FOR             [ reduce using rule 135 (empty -> .) ]
  ! WHILE           [ reduce using rule 135 (empty -> .) ]
  ! DO              [ reduce using rule 135 (empty -> .) ]
  ! ALERT           [ reduce using rule 135 (empty -> .) ]
  ! PARENT_IZQ      [ reduce using rule 135 (empty -> .) ]
  ! NUMERO          [ reduce using rule 135 (empty -> .) ]
  ! IDVAR           [ reduce using rule 135 (empty -> .) ]
  ! TRUE            [ reduce using rule 135 (empty -> .) ]
  ! FALSE           [ reduce using rule 135 (empty -> .) ]
  ! LLAVE_IZQ       [ reduce using rule 135 (empty -> .) ]
  ! RETURN          [ reduce using rule 135 (empty -> .) ]

    expression                     shift and go to state 142
    additive_expression            shift and go to state 143
    statement                      shift and go to state 261
    expression_stmt                shift and go to state 135
    compount_stmt                  shift and go to state 136
    selection_stmt                 shift and go to state 137
    iteration_stmt                 shift and go to state 138
    return_stmt                    shift and go to state 139
    class_declaration              shift and go to state 140
    echo_stmt                      shift and go to state 141
    alert_stmt                     shift and go to state 144
    var                            shift and go to state 34
    area                           shift and go to state 147
    empty                          shift and go to state 31
    boolean                        shift and go to state 20
    simple_expression              shift and go to state 68
    term                           shift and go to state 15
    factor                         shift and go to state 41

state 259

    (86) iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression . PARENT_DER
    (92) expression -> expression . AND expression
    (93) expression -> expression . OR expression

    PARENT_DER      shift and go to state 262
    AND             shift and go to state 111
    OR              shift and go to state 112


state 260

    (58) compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .

    BREAK           reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    PUNTOYCOMA      reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    ELSE            reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    ELSEIF          reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    VARIABLE        reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    VAR             reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    TIMESTIMES      reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    AMPERSANT       reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    FUNCTION        reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    PRIVATE         reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    PUBLIC          reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    PROTECTED       reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    REQUIRE         reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    INCLUDE         reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    CLASS           reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    IF              reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    SWITCH          reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    CASE            reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    DEFAULT         reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    FOR             reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    WHILE           reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    DO              reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    ALERT           reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    PARENT_IZQ      reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    NUMERO          reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    IDVAR           reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    TRUE            reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    FALSE           reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    ECHO            reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    $end            reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    LLAVE_DER       reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    LLAVE_IZQ       reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    RETURN          reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    AND             reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)
    OR              reduce using rule 58 (compount_stmt -> LLAVE_IZQ echo_stmt local_declarations echo_stmt statement_list echo_stmt LLAVE_DER .)


state 261

    (84) iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .

    VARIABLE        reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    VAR             reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    TIMESTIMES      reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    AMPERSANT       reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    FUNCTION        reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    PRIVATE         reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    PUBLIC          reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    PROTECTED       reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    REQUIRE         reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    INCLUDE         reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    CLASS           reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    IF              reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    SWITCH          reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    CASE            reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    DEFAULT         reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    FOR             reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    WHILE           reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    DO              reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    ALERT           reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    PARENT_IZQ      reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    NUMERO          reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    IDVAR           reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    TRUE            reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    FALSE           reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    ECHO            reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    $end            reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    BREAK           reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    PUNTOYCOMA      reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    ELSE            reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    ELSEIF          reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    LLAVE_DER       reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    LLAVE_IZQ       reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    RETURN          reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    AND             reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)
    OR              reduce using rule 84 (iteration_stmt -> FOR PARENT_IZQ var_declaration PUNTOYCOMA expression PUNTOYCOMA additive_expression PARENT_DER statement .)


state 262

    (86) iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .

    VARIABLE        reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    VAR             reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    TIMESTIMES      reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    AMPERSANT       reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    FUNCTION        reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    PRIVATE         reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    PUBLIC          reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    PROTECTED       reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    REQUIRE         reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    INCLUDE         reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    CLASS           reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    IF              reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    SWITCH          reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    CASE            reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    DEFAULT         reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    FOR             reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    WHILE           reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    DO              reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    ALERT           reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    PARENT_IZQ      reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    NUMERO          reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    IDVAR           reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    TRUE            reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    FALSE           reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    ECHO            reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    $end            reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    BREAK           reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    PUNTOYCOMA      reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    ELSE            reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    ELSEIF          reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    LLAVE_DER       reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    LLAVE_IZQ       reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    RETURN          reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    AND             reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)
    OR              reduce using rule 86 (iteration_stmt -> DO LLAVE_IZQ statement PUNTOYCOMA LLAVE_DER WHILE PARENT_IZQ expression PARENT_DER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VARIABLE in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for TIMESTIMES in state 0 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 0 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 0 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 0 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 0 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 0 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 0 resolved as shift
WARNING: shift/reduce conflict for CASE in state 0 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for DO in state 0 resolved as shift
WARNING: shift/reduce conflict for ALERT in state 0 resolved as shift
WARNING: shift/reduce conflict for PARENT_IZQ in state 0 resolved as shift
WARNING: shift/reduce conflict for NUMERO in state 0 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 0 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 0 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 0 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 2 resolved as shift
WARNING: shift/reduce conflict for VAR in state 2 resolved as shift
WARNING: shift/reduce conflict for TIMESTIMES in state 2 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 2 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 2 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 2 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 2 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 2 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 2 resolved as shift
WARNING: shift/reduce conflict for CASE in state 2 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for DO in state 2 resolved as shift
WARNING: shift/reduce conflict for ALERT in state 2 resolved as shift
WARNING: shift/reduce conflict for PARENT_IZQ in state 2 resolved as shift
WARNING: shift/reduce conflict for NUMERO in state 2 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 2 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 2 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 2 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 10 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 16 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 46 resolved as shift
WARNING: shift/reduce conflict for PUNTOYCOMA in state 56 resolved as shift
WARNING: shift/reduce conflict for PUNTOYCOMA in state 58 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 67 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 67 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for DESIGUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for DISTINTO in state 67 resolved as shift
WARNING: shift/reduce conflict for ES_IGUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for PUNTOYCOMA in state 97 resolved as shift
WARNING: shift/reduce conflict for PUNTOYCOMA in state 98 resolved as shift
WARNING: shift/reduce conflict for PUNTOYCOMA in state 99 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 105 resolved as shift
WARNING: shift/reduce conflict for ALERT in state 105 resolved as shift
WARNING: shift/reduce conflict for PARENT_IZQ in state 105 resolved as shift
WARNING: shift/reduce conflict for NUMERO in state 105 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 105 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 105 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 105 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 111 resolved as shift
WARNING: shift/reduce conflict for ALERT in state 111 resolved as shift
WARNING: shift/reduce conflict for PARENT_IZQ in state 111 resolved as shift
WARNING: shift/reduce conflict for NUMERO in state 111 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 111 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 111 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 111 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 112 resolved as shift
WARNING: shift/reduce conflict for ALERT in state 112 resolved as shift
WARNING: shift/reduce conflict for PARENT_IZQ in state 112 resolved as shift
WARNING: shift/reduce conflict for NUMERO in state 112 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 112 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 112 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 112 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 141 resolved as shift
WARNING: shift/reduce conflict for PUNTOYCOMA in state 142 resolved as shift
WARNING: shift/reduce conflict for AND in state 142 resolved as shift
WARNING: shift/reduce conflict for OR in state 142 resolved as shift
WARNING: shift/reduce conflict for PUNTOYCOMA in state 146 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 185 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 185 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 185 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 185 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 185 resolved as shift
WARNING: shift/reduce conflict for IF in state 185 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 185 resolved as shift
WARNING: shift/reduce conflict for CASE in state 185 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 185 resolved as shift
WARNING: shift/reduce conflict for FOR in state 185 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 185 resolved as shift
WARNING: shift/reduce conflict for DO in state 185 resolved as shift
WARNING: shift/reduce conflict for ALERT in state 185 resolved as shift
WARNING: shift/reduce conflict for LLAVE_IZQ in state 185 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 185 resolved as shift
WARNING: shift/reduce conflict for PARENT_IZQ in state 185 resolved as shift
WARNING: shift/reduce conflict for NUMERO in state 185 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 185 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 185 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 185 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 186 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 186 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 186 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 186 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 186 resolved as shift
WARNING: shift/reduce conflict for IF in state 186 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 186 resolved as shift
WARNING: shift/reduce conflict for CASE in state 186 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 186 resolved as shift
WARNING: shift/reduce conflict for FOR in state 186 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 186 resolved as shift
WARNING: shift/reduce conflict for DO in state 186 resolved as shift
WARNING: shift/reduce conflict for ALERT in state 186 resolved as shift
WARNING: shift/reduce conflict for LLAVE_IZQ in state 186 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 186 resolved as shift
WARNING: shift/reduce conflict for PARENT_IZQ in state 186 resolved as shift
WARNING: shift/reduce conflict for NUMERO in state 186 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 186 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 186 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 186 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 190 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 195 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 195 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 195 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 195 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 195 resolved as shift
WARNING: shift/reduce conflict for IF in state 195 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 195 resolved as shift
WARNING: shift/reduce conflict for CASE in state 195 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 195 resolved as shift
WARNING: shift/reduce conflict for FOR in state 195 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 195 resolved as shift
WARNING: shift/reduce conflict for DO in state 195 resolved as shift
WARNING: shift/reduce conflict for ALERT in state 195 resolved as shift
WARNING: shift/reduce conflict for LLAVE_IZQ in state 195 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 195 resolved as shift
WARNING: shift/reduce conflict for PARENT_IZQ in state 195 resolved as shift
WARNING: shift/reduce conflict for NUMERO in state 195 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 195 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 195 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 195 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 216 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 216 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 220 resolved as shift
WARNING: shift/reduce conflict for PARENT_DER in state 228 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 237 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 237 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 237 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 237 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 237 resolved as shift
WARNING: shift/reduce conflict for IF in state 237 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 237 resolved as shift
WARNING: shift/reduce conflict for CASE in state 237 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 237 resolved as shift
WARNING: shift/reduce conflict for FOR in state 237 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 237 resolved as shift
WARNING: shift/reduce conflict for DO in state 237 resolved as shift
WARNING: shift/reduce conflict for ALERT in state 237 resolved as shift
WARNING: shift/reduce conflict for LLAVE_IZQ in state 237 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 237 resolved as shift
WARNING: shift/reduce conflict for PARENT_IZQ in state 237 resolved as shift
WARNING: shift/reduce conflict for NUMERO in state 237 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 237 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 237 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 237 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 240 resolved as shift
WARNING: shift/reduce conflict for ALERT in state 240 resolved as shift
WARNING: shift/reduce conflict for LLAVE_IZQ in state 249 resolved as shift
WARNING: shift/reduce conflict for IF in state 249 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 249 resolved as shift
WARNING: shift/reduce conflict for CASE in state 249 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 249 resolved as shift
WARNING: shift/reduce conflict for FOR in state 249 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 249 resolved as shift
WARNING: shift/reduce conflict for DO in state 249 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 249 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 249 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 249 resolved as shift
WARNING: shift/reduce conflict for ALERT in state 249 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 249 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 249 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 249 resolved as shift
WARNING: shift/reduce conflict for PARENT_IZQ in state 249 resolved as shift
WARNING: shift/reduce conflict for NUMERO in state 249 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 249 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 249 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 249 resolved as shift
WARNING: shift/reduce conflict for LLAVE_DER in state 256 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 256 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 258 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 258 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 258 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 258 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 258 resolved as shift
WARNING: shift/reduce conflict for IF in state 258 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 258 resolved as shift
WARNING: shift/reduce conflict for CASE in state 258 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 258 resolved as shift
WARNING: shift/reduce conflict for FOR in state 258 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 258 resolved as shift
WARNING: shift/reduce conflict for DO in state 258 resolved as shift
WARNING: shift/reduce conflict for ALERT in state 258 resolved as shift
WARNING: shift/reduce conflict for LLAVE_IZQ in state 258 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 258 resolved as shift
WARNING: shift/reduce conflict for PARENT_IZQ in state 258 resolved as shift
WARNING: shift/reduce conflict for NUMERO in state 258 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 258 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 258 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 258 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (program -> declaration_list)
WARNING: rejected rule (empty -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 4 resolved using rule (declaration_list -> additive_expression)
WARNING: rejected rule (declaration -> additive_expression) in state 4
WARNING: reduce/reduce conflict in state 31 resolved using rule (echo_stmt -> empty)
WARNING: rejected rule (alert_stmt -> empty) in state 31
WARNING: reduce/reduce conflict in state 69 resolved using rule (expression -> additive_expression)
WARNING: rejected rule (simple_expression -> additive_expression) in state 69
WARNING: reduce/reduce conflict in state 70 resolved using rule (expression -> alert_stmt)
WARNING: rejected rule (simple_expression -> alert_stmt) in state 70
WARNING: reduce/reduce conflict in state 128 resolved using rule (alert_stmt -> empty)
WARNING: rejected rule (args -> empty) in state 128
WARNING: reduce/reduce conflict in state 143 resolved using rule (statement -> additive_expression)
WARNING: rejected rule (expression_stmt -> additive_expression) in state 143
WARNING: reduce/reduce conflict in state 143 resolved using rule (statement -> additive_expression)
WARNING: rejected rule (expression -> additive_expression) in state 143
WARNING: reduce/reduce conflict in state 143 resolved using rule (statement -> additive_expression)
WARNING: rejected rule (simple_expression -> additive_expression) in state 143
WARNING: reduce/reduce conflict in state 144 resolved using rule (statement -> alert_stmt)
WARNING: rejected rule (expression_stmt -> alert_stmt) in state 144
WARNING: reduce/reduce conflict in state 144 resolved using rule (statement -> alert_stmt)
WARNING: rejected rule (expression -> alert_stmt) in state 144
WARNING: reduce/reduce conflict in state 144 resolved using rule (statement -> alert_stmt)
WARNING: rejected rule (simple_expression -> alert_stmt) in state 144
WARNING: reduce/reduce conflict in state 250 resolved using rule (alert_stmt -> empty)
WARNING: rejected rule (statement_list -> empty) in state 250
WARNING: Rule (args -> empty) is never reduced
WARNING: Rule (expression_stmt -> additive_expression) is never reduced
WARNING: Rule (expression_stmt -> alert_stmt) is never reduced
WARNING: Rule (statement_list -> empty) is never reduced
